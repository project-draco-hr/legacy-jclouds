{
  assertEquals(injector.getInstance(Key.get(new TypeLiteral<Supplier<Set<String>>>(){
  }
,Region.class)).get(),ImmutableSet.<String>of("sa-east-1","ap-northeast-1","eu-west-1","us-east-1","us-west-1","us-west-2","ap-southeast-1"));
  assertEquals(injector.getInstance(Key.get(new TypeLiteral<Supplier<Set<String>>>(){
  }
,Zone.class)).get(),ImmutableSet.<String>of("sa-east-1a","sa-east-1b","ap-northeast-1a","ap-northeast-1b","eu-west-1a","eu-west-1b","eu-west-1c","us-east-1a","us-east-1b","us-east-1c","us-east-1d","us-east-1e","us-west-1a","us-west-1b","us-west-1c","us-west-2a","us-west-2b","us-west-2c","ap-southeast-1a","ap-southeast-1b"));
  Map<String,Supplier<URI>> regionToURISupplier=injector.getInstance(Key.get(new TypeLiteral<Supplier<Map<String,Supplier<URI>>>>(){
  }
,Region.class)).get();
  assertEquals(regionToURISupplier.get("sa-east-1").get(),URI.create("https://ec2.sa-east-1.amazonaws.com"));
  assertEquals(regionToURISupplier.get("ap-northeast-1").get(),URI.create("https://ec2.ap-northeast-1.amazonaws.com"));
  assertEquals(regionToURISupplier.get("eu-west-1").get(),URI.create("https://ec2.eu-west-1.amazonaws.com"));
  assertEquals(regionToURISupplier.get("us-east-1").get(),URI.create("https://ec2.us-east-1.amazonaws.com"));
  assertEquals(regionToURISupplier.get("us-west-1").get(),URI.create("https://ec2.us-west-1.amazonaws.com"));
  assertEquals(regionToURISupplier.get("us-west-2").get(),URI.create("https://ec2.us-west-2.amazonaws.com"));
  assertEquals(regionToURISupplier.get("ap-southeast-1").get(),URI.create("https://ec2.ap-southeast-1.amazonaws.com"));
  Map<String,Supplier<Set<String>>> regionToZoneIdSupplier=injector.getInstance(Key.get(new TypeLiteral<Supplier<Map<String,Supplier<Set<String>>>>>(){
  }
,Zone.class)).get();
  assertEquals(regionToZoneIdSupplier.get("sa-east-1").get(),ImmutableSet.of("sa-east-1a","sa-east-1b"));
  assertEquals(regionToZoneIdSupplier.get("ap-northeast-1").get(),ImmutableSet.of("ap-northeast-1a","ap-northeast-1b"));
  assertEquals(regionToZoneIdSupplier.get("eu-west-1").get(),ImmutableSet.of("eu-west-1a","eu-west-1b","eu-west-1c"));
  assertEquals(regionToZoneIdSupplier.get("us-east-1").get(),ImmutableSet.of("us-east-1a","us-east-1b","us-east-1c","us-east-1d","us-east-1e"));
  assertEquals(regionToZoneIdSupplier.get("us-west-1").get(),ImmutableSet.of("us-west-1a","us-west-1b","us-west-1c"));
  assertEquals(regionToZoneIdSupplier.get("us-west-2").get(),ImmutableSet.of("us-west-2a","us-west-2b","us-west-2c"));
  assertEquals(regionToZoneIdSupplier.get("ap-southeast-1").get(),ImmutableSet.of("ap-southeast-1a","ap-southeast-1b"));
  Map<String,Supplier<URI>> zoneToURISupplier=injector.getInstance(Key.get(new TypeLiteral<Supplier<Map<String,Supplier<URI>>>>(){
  }
,Zone.class)).get();
  assertEquals(zoneToURISupplier.get("sa-east-1a").get(),URI.create("https://ec2.sa-east-1.amazonaws.com"));
  assertEquals(zoneToURISupplier.get("ap-northeast-1a").get(),URI.create("https://ec2.ap-northeast-1.amazonaws.com"));
  assertEquals(zoneToURISupplier.get("eu-west-1a").get(),URI.create("https://ec2.eu-west-1.amazonaws.com"));
  assertEquals(zoneToURISupplier.get("us-east-1a").get(),URI.create("https://ec2.us-east-1.amazonaws.com"));
  assertEquals(zoneToURISupplier.get("us-west-1a").get(),URI.create("https://ec2.us-west-1.amazonaws.com"));
  assertEquals(zoneToURISupplier.get("us-west-2a").get(),URI.create("https://ec2.us-west-2.amazonaws.com"));
  assertEquals(zoneToURISupplier.get("ap-southeast-1a").get(),URI.create("https://ec2.ap-southeast-1.amazonaws.com"));
}
