{
  modules.add(new BlobStoreObjectModule());
  modules.add(new BlobStoreMapModule());
  modules.add(new AbstractModule(){
    @Override protected void configure(){
      bind(AsyncBlobStore.class).to(StubAsyncBlobStore.class).asEagerSingleton();
    }
    @SuppressWarnings("unused") @Provides @Singleton public BlobStore provideClient(    AsyncBlobStore client) throws IllegalArgumentException, SecurityException, NoSuchMethodException {
      return SyncProxy.create(StubBlobStore.class,client);
    }
    @SuppressWarnings("unused") @Provides @Singleton BlobStoreContext<AsyncBlobStore,BlobStore> provideContext(    BlobMap.Factory blobMapFactory,    InputStreamMap.Factory inputStreamMapFactory,    Closer closer,    AsyncBlobStore asynch,    BlobStore synch){
      return new BlobStoreContextImpl<AsyncBlobStore,BlobStore>(blobMapFactory,inputStreamMapFactory,closer,asynch,synch,asynch,synch,URI.create("http://localhost/blobstub"),"foo");
    }
  }
);
}
