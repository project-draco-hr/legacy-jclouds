{
  return Predicates.not(new Predicate<OsFamilyVersion64Bit>(){
    @Override public boolean apply(    OsFamilyVersion64Bit input){
switch (input.family) {
case UBUNTU:
        return (input.version.equals("11.04") || input.version.equals("10.04") && !input.is64Bit) || (input.version.equals("10.10") && input.is64Bit) || input.version.equals("");
case SOLARIS:
      return !input.is64Bit;
case DEBIAN:
    return input.is64Bit;
case CENTOS:
  return input.version.equals("5.5") || input.version.equals("") || (input.version.matches("5.0") && input.is64Bit)|| (input.version.matches("6.0") && !input.is64Bit);
case WINDOWS:
return input.version.equals("2008 R2") || (input.version.equals("2008") && !input.is64Bit) || input.version.equals("")|| (input.version.equals("2003"));
default :
return false;
}
}
}
);
}
