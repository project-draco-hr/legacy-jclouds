{
  checkNotNull(template,"template was null");
  checkNotNull(template.getOptions(),"template options was null");
  checkArgument(template.getOptions().getClass().isAssignableFrom(GleSYSTemplateOptions.class),"options class %s should have been assignable from GleSYSTemplateOptions",template.getOptions().getClass());
  GleSYSTemplateOptions templateOptions=template.getOptions().as(GleSYSTemplateOptions.class);
  CreateServerOptions createServerOptions=new CreateServerOptions();
  createServerOptions.ip(templateOptions.getIp());
  createServerOptions.description(name);
  ServerSpec.Builder<?> builder=ServerSpec.builder();
  builder.datacenter(template.getLocation().getId());
  builder.templateName(template.getImage().getId());
  builder.platform(template.getHardware().getHypervisor());
  builder.memorySizeMB(template.getHardware().getRam());
  builder.diskSizeGB(Math.round(template.getHardware().getVolumes().get(0).getSize()));
  builder.cpuCores((int)template.getHardware().getProcessors().get(0).getCores());
  builder.transferGB(50);
  ServerSpec spec=builder.build();
  String password=passwordProvider.get();
  logger.debug(">> creating new Server spec(%s) name(%s) options(%s)",spec,name,createServerOptions);
  ServerDetails result=api.getServerApi().createWithHostnameAndRootPassword(spec,name,password,createServerOptions);
  logger.trace("<< server(%s)",result.getId());
  return new NodeAndInitialCredentials<ServerDetails>(result,result.getId() + "",LoginCredentials.builder().password(password).build());
}
