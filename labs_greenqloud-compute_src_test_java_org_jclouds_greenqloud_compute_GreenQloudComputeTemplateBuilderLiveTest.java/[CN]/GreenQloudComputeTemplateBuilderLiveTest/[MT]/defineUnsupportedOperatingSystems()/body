{
  return Predicates.not(new Predicate<OsFamilyVersion64Bit>(){
    @Override public boolean apply(    OsFamilyVersion64Bit input){
switch (input.family) {
case UBUNTU:
        return (input.version.equals("") || input.version.equals("10.04") || input.version.equals("11.04")|| input.version.equals("11.10")) && input.is64Bit;
case DEBIAN:
      return (input.version.equals("") || input.version.equals("6.0")) && input.is64Bit;
case CENTOS:
    return (input.version.equals("") || input.version.equals("5.5") || input.version.equals("5.6")|| input.version.equals("6.0")) && input.is64Bit;
case FEDORA:
  return input.version.equals("") && input.is64Bit;
default :
return false;
}
}
}
);
}
