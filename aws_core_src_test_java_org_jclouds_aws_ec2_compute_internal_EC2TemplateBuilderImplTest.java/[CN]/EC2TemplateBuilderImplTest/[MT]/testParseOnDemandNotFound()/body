{
  Location location=new LocationImpl(LocationScope.REGION,"region","region",null);
  Provider<Set<? extends Location>> locations=Providers.<Set<? extends Location>>of(ImmutableSet.<Location>of(location));
  Provider<Set<? extends Image>> images=Providers.<Set<? extends Image>>of(ImmutableSet.<Image>of());
  Provider<Set<? extends Size>> sizes=Providers.<Set<? extends Size>>of(ImmutableSet.<Size>of(new SizeImpl("1","1","region/1",location,null,ImmutableMap.<String,String>of(),1,1,1,ImagePredicates.any())));
  Location defaultLocation=createMock(Location.class);
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  TemplateOptions defaultOptions=createMock(TemplateOptions.class);
  knownImage=createMock(Image.class);
  expect(defaultLocation.getId()).andReturn("region");
  expect(optionsProvider.get()).andReturn(defaultOptions);
  expect(knownImage.getArchitecture()).andReturn(Architecture.X86_32).atLeastOnce();
  replay(knownImage);
  replay(defaultOptions);
  replay(defaultLocation);
  replay(optionsProvider);
  replay(templateBuilderProvider);
  TemplateBuilderImpl template=createTemplateBuilder(locations,images,sizes,defaultLocation,optionsProvider,templateBuilderProvider);
  assertEquals(template.imageId("region/bad").build().getImage(),knownImage);
  verify(knownImage);
  verify(defaultOptions);
  verify(defaultLocation);
  verify(optionsProvider);
  verify(templateBuilderProvider);
}
