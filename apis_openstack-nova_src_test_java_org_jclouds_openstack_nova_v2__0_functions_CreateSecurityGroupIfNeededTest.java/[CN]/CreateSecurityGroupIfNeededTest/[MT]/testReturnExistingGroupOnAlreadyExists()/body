{
  Builder<HttpRequest,HttpResponse> builder=ImmutableMap.builder();
  builder.put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess);
  builder.put(extensionsOfNovaRequest,extensionsOfNovaResponse);
  HttpResponse createResponse=HttpResponse.builder().statusCode(400).payload(payloadFromStringWithContentType("{\"badRequest\": {\"message\": \"Security group test already exists\", \"code\": 400}}","application/json; charset=UTF-8")).build();
  builder.put(create,createResponse);
  HttpRequest list=HttpRequest.builder().method("GET").endpoint(URI.create("https://az-1.region-a.geo-1.compute.hpcloudsvc.com/v1.1/3456/os-security-groups")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse listResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/securitygroup_list_details_computeservice_typical.json")).build();
  builder.put(list,listResponse);
  NovaApi apiWhenSecurityGroupsExist=requestsSendResponses(builder.build());
  CreateSecurityGroupIfNeeded fn=new CreateSecurityGroupIfNeeded(apiWhenSecurityGroupsExist);
  assertEquals(fn.apply(new ZoneSecurityGroupNameAndPorts("az-1.region-a.geo-1","jclouds_mygroup",ImmutableSet.of(22,8080))).toString(),new SecurityGroupInZone(new ParseComputeServiceTypicalSecurityGroupTest().expected(),"az-1.region-a.geo-1").toString());
}
