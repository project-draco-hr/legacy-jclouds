{
  String message=options.getDir() != null ? String.format("clearing path %s/%s",containerName,options.getDir()) : String.format("clearing container %s",containerName);
  options=options.clone();
  if (options.isRecursive())   message+=" recursively";
  logger.debug(message);
  Map<StorageMetadata,Exception> exceptions=Maps.newHashMap();
  int maxErrors=3;
  for (int numErrors=0; numErrors < maxErrors; ) {
    PageSet<? extends StorageMetadata> listing;
    ListenableFuture<PageSet<? extends StorageMetadata>> listFuture=connection.list(containerName,options);
    try {
      listing=listFuture.get(maxTime,TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException ie) {
      Thread.currentThread().interrupt();
      break;
    }
catch (    ExecutionException ee) {
      ++numErrors;
      if (numErrors == maxErrors) {
        throw propagate(ee.getCause());
      }
      retryHandler.imposeBackoffExponentialDelay(numErrors,message);
      continue;
    }
catch (    TimeoutException te) {
      ++numErrors;
      if (numErrors == maxErrors) {
        throw propagate(te);
      }
      retryHandler.imposeBackoffExponentialDelay(numErrors,message);
      continue;
    }
 finally {
      listFuture.cancel(true);
    }
    if (options.isRecursive()) {
      for (      StorageMetadata md : listing) {
        String fullPath=parentIsFolder(options,md) ? options.getDir() + "/" + md.getName() : md.getName();
switch (md.getType()) {
case BLOB:
          break;
case FOLDER:
case RELATIVE_PATH:
        if (options.isRecursive() && !fullPath.equals(options.getDir())) {
          execute(containerName,options.clone().inDirectory(fullPath));
        }
      break;
case CONTAINER:
    throw new IllegalArgumentException("Container type not supported");
}
}
}
Map<StorageMetadata,ListenableFuture<?>> responses=Maps.newHashMap();
for (StorageMetadata md : listing) {
String fullPath=parentIsFolder(options,md) ? options.getDir() + "/" + md.getName() : md.getName();
switch (md.getType()) {
case BLOB:
responses.put(md,connection.removeBlob(containerName,fullPath));
break;
case FOLDER:
if (options.isRecursive()) {
responses.put(md,connection.deleteDirectory(containerName,fullPath));
}
break;
case RELATIVE_PATH:
if (options.isRecursive()) {
responses.put(md,connection.deleteDirectory(containerName,md.getName()));
}
break;
case CONTAINER:
throw new IllegalArgumentException("Container type not supported");
}
}
try {
exceptions=awaitCompletion(responses,userExecutor,maxTime,logger,message);
}
 catch (TimeoutException te) {
++numErrors;
if (numErrors == maxErrors) {
throw propagate(te);
}
retryHandler.imposeBackoffExponentialDelay(numErrors,message);
continue;
}
 finally {
for (ListenableFuture<?> future : responses.values()) {
future.cancel(true);
}
}
if (!exceptions.isEmpty()) {
++numErrors;
retryHandler.imposeBackoffExponentialDelay(numErrors,message);
continue;
}
String marker=listing.getNextMarker();
if (marker == null) {
break;
}
logger.debug("%s with marker %s",message,marker);
options=options.afterMarker(marker);
numErrors=0;
}
if (!exceptions.isEmpty()) throw new BlobRuntimeException(String.format("error %s: %s",message,exceptions));
}
