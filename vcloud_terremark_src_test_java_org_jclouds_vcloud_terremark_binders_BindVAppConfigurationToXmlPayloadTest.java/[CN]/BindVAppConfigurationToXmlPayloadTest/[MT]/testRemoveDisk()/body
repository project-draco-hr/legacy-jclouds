{
  VAppImpl vApp=new VAppImpl("MyAppServer6",URI.create("https://services.vcloudexpress/terremark.com/api/v0.8/vapp/4213"),VAppStatus.OFF,4194304l,null,ImmutableListMultimap.<String,String>of(),null,null,ImmutableSet.of(new ResourceAllocation(1,"n/a",null,ResourceType.PROCESSOR,null,null,null,null,null,null,2,null),new ResourceAllocation(2,"n/a",null,ResourceType.MEMORY,null,null,null,null,null,null,1024,null),new ResourceAllocation(9,"n/a",null,ResourceType.DISK_DRIVE,null,"1048576",null,0,null,null,209152,null),new ResourceAllocation(9,"n/a",null,ResourceType.DISK_DRIVE,null,"1048576",null,1,null,null,209152,null)));
  String expected=Utils.toStringAndClose(getClass().getResourceAsStream("/terremark/configureVApp.xml")).replace("eduardo","MyAppServer6");
  VAppConfiguration config=new VAppConfiguration().deleteDiskWithAddressOnParent(1);
  GeneratedHttpRequest<?> request=createMock(GeneratedHttpRequest.class);
  expect(request.getEndpoint()).andReturn(URI.create("http://localhost/key")).anyTimes();
  expect(request.getArgs()).andReturn(new Object[]{vApp,config}).atLeastOnce();
  request.setPayload(expected);
  replay(request);
  BindVAppConfigurationToXmlPayload binder=injector.getInstance(BindVAppConfigurationToXmlPayload.class);
  Map<String,String> map=Maps.newHashMap();
  binder.bindToRequest(request,map);
  verify(request);
}
