{
  RetryablePredicate<RunningInstance> runningTester=new RetryablePredicate<RunningInstance>(new InstanceStateRunning(client.getInstanceServices()),180,5,TimeUnit.SECONDS);
  System.out.printf("%d: %s awaiting instance to run %n",System.currentTimeMillis(),instance.getId());
  if (!runningTester.apply(instance))   throw new TimeoutException("timeout waiting for instance to run: " + instance.getId());
  instance=findInstanceById(client,instance.getId());
  RetryablePredicate<InetSocketAddress> socketTester=new RetryablePredicate<InetSocketAddress>(new SocketOpen(),300,1,TimeUnit.SECONDS);
  System.out.printf("%d: %s awaiting ssh service to start%n",System.currentTimeMillis(),instance.getIpAddress());
  if (!socketTester.apply(new InetSocketAddress(instance.getIpAddress(),22)))   throw new TimeoutException("timeout waiting for ssh to start: " + instance.getIpAddress());
  System.out.printf("%d: %s ssh service started%n",System.currentTimeMillis(),instance.getIpAddress());
  System.out.printf("%d: %s awaiting http service to start%n",System.currentTimeMillis(),instance.getIpAddress());
  if (!socketTester.apply(new InetSocketAddress(instance.getIpAddress(),80)))   throw new TimeoutException("timeout waiting for http to start: " + instance.getIpAddress());
  System.out.printf("%d: %s http service started%n",System.currentTimeMillis(),instance.getIpAddress());
  return instance;
}
