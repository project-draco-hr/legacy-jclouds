{
  MockWebServer server=new MockWebServer();
  server.enqueue(new MockResponse().setResponseCode(200).setBody("<UploadId>upload-id</UploadId>"));
  server.enqueue(new MockResponse().setResponseCode(400));
  server.enqueue(new MockResponse().setResponseCode(200));
  server.play();
  byte[] bytes="0123456789abcdef".getBytes(Charsets.US_ASCII);
  int partSize=bytes.length / 2;
  SequentialMultipartUploadStrategy api=mockSequentialMultipartUploadStrategy(server.getUrl("/").toString(),partSize);
  try {
    assertEquals(api.execute("container",new BlobBuilderImpl().name("foo").payload(bytes).build()),"fff");
  }
  finally {
    RecordedRequest initiate=server.takeRequest();
    assertEquals(initiate.getRequestLine(),"POST /container/foo?uploads HTTP/1.1");
    assertEquals(initiate.getHeader("Content-Length"),"0");
    RecordedRequest part1=server.takeRequest();
    assertEquals(part1.getRequestLine(),"PUT /container/foo?partNumber=1&uploadId=upload-id HTTP/1.1");
    assertEquals(part1.getHeader("Content-Length"),String.valueOf(partSize));
    assertEquals(new String(part1.getBody()),"01234567");
    RecordedRequest abort=server.takeRequest();
    assertEquals(abort.getRequestLine(),"DELETE /container/foo?uploadId=upload-id HTTP/1.1");
    server.shutdown();
  }
}
