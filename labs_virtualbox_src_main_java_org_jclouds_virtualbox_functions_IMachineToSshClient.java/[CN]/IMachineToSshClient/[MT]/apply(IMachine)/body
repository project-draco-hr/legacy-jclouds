{
  String sshPort="22";
  String guestIdentity=vm.getExtraData(GUEST_OS_USER);
  String guestCredential=vm.getExtraData(GUEST_OS_PASSWORD);
  LoginCredentials loginCredentials=LoginCredentials.builder().user(guestIdentity).password(guestCredential).authenticateSudo(true).build();
  String clientIpAddress=null;
  long nicSlot=0;
  while (nicSlot < 4 && Strings.isNullOrEmpty(clientIpAddress)) {
    INetworkAdapter networkAdapter=vm.getNetworkAdapter(nicSlot);
    if (networkAdapter.getAttachmentType().equals(NetworkAttachmentType.NAT)) {
      for (      String nameProtocolnumberAddressInboudportGuestTargetport : networkAdapter.getNATEngine().getRedirects()) {
        Iterable<String> stuff=Splitter.on(',').split(nameProtocolnumberAddressInboudportGuestTargetport);
        String protocolNumber=Iterables.get(stuff,1);
        String hostAddress=Iterables.get(stuff,2);
        String inboundPort=Iterables.get(stuff,3);
        String targetPort=Iterables.get(stuff,5);
        if ("1".equals(protocolNumber) && "22".equals(targetPort)) {
          clientIpAddress=hostAddress;
          sshPort=inboundPort;
        }
      }
    }
 else     if (networkAdapter.getAttachmentType().equals(NetworkAttachmentType.Bridged)) {
      clientIpAddress=networkUtils.getIpAddressFromNicSlot(vm.getName(),networkAdapter.getSlot());
    }
 else     if (networkAdapter.getAttachmentType().equals(NetworkAttachmentType.HostOnly)) {
      clientIpAddress=networkUtils.getValidHostOnlyIpFromVm(vm.getName());
    }
    nicSlot++;
  }
  return sshClientFactory.create(HostAndPort.fromParts(clientIpAddress,Integer.parseInt(sshPort)),loginCredentials);
}
