{
  String imageId="ami1";
  String instanceCreatedId="instance1";
  NodeMetadata nodeMetadata=new NodeMetadataBuilder().id(region + "/" + instanceCreatedId).providerId(instanceCreatedId).state(NodeState.RUNNING).build();
  TemplateBuilder templateBuilder=createMock(TemplateBuilder.class);
  EC2CreateNodesInGroupThenAddToSet strategy=setupStrategy(templateBuilder,nodeMetadata);
  InputParams input=new InputParams(location);
  InstanceClient instanceClient=createMock(InstanceClient.class);
  RunInstancesOptions ec2Options=createMock(RunInstancesOptions.class);
  RunningInstance instance=createMock(RunningInstance.class);
  Reservation<? extends RunningInstance> reservation=new Reservation<RunningInstance>(region,ImmutableSet.<String>of(),ImmutableSet.<RunningInstance>of(instance),"ownerId","requesterId","reservationId");
  expect(templateBuilder.fromTemplate(input.template)).andReturn(templateBuilder);
  expect(templateBuilder.build()).andReturn(input.template);
  expect(strategy.client.getInstanceServices()).andReturn(instanceClient).atLeastOnce();
  expect(strategy.createKeyPairAndSecurityGroupsAsNeededAndReturncustomize.execute(region,input.tag,input.template)).andReturn(ec2Options);
  expect(input.template.getLocation()).andReturn(input.location).atLeastOnce();
  expect(input.template.getImage()).andReturn(input.image).atLeastOnce();
  expect(input.image.getProviderId()).andReturn(imageId).atLeastOnce();
  expect(instanceClient.runInstancesInRegion(region,zone,imageId,1,input.count,ec2Options)).andReturn(Reservation.class.cast(reservation));
  expect(instance.getId()).andReturn(instanceCreatedId).atLeastOnce();
  Credentials creds=new Credentials("foo","bar");
  expect(strategy.instanceToCredentials.apply(instance)).andReturn(creds);
  expect(instance.getRegion()).andReturn(region).atLeastOnce();
  expect(strategy.credentialStore.put("node#" + region + "/"+ instanceCreatedId,creds)).andReturn(null);
  expect(strategy.instancePresent.apply(new RegionAndName(region,instanceCreatedId))).andReturn(true);
  expect(input.template.getOptions()).andReturn(input.options).atLeastOnce();
  expect(strategy.runningInstanceToNodeMetadata.apply(instance)).andReturn(nodeMetadata);
  expect(strategy.utils.customizeNodesAndAddToGoodMapOrPutExceptionIntoBadMap(eq(input.options),containsNodeMetadata(nodeMetadata),eq(input.nodes),eq(input.badNodes),eq(input.customization))).andReturn(null);
  replay(templateBuilder);
  replay(instanceClient);
  replay(ec2Options);
  replay(instance);
  input.replayMe();
  replayStrategy(strategy);
  strategy.execute(input.tag,input.count,input.template,input.nodes,input.badNodes,input.customization);
  verify(templateBuilder);
  verify(instanceClient);
  verify(ec2Options);
  verify(instance);
  input.verifyMe();
  verifyStrategy(strategy);
}
