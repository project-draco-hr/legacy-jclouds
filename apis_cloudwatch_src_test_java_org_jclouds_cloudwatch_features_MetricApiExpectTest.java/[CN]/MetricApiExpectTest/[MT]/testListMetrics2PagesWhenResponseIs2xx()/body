{
  HttpResponse listMetricsResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResourceWithContentType("/list_metrics_marker.xml","text/xml")).build();
  HttpRequest listMetrics2=HttpRequest.builder().method("POST").endpoint("https://monitoring.us-east-1.amazonaws.com/").addHeader("Host","monitoring.us-east-1.amazonaws.com").payload(payloadFromStringWithContentType("Action=ListMetrics" + "&NextToken=MARKER" + "&Signature=RpBdQydXD1jQhEUnXoqT60NEuCP/ZgdvO6Hf3uf/wy0%3D"+ "&SignatureMethod=HmacSHA256"+ "&SignatureVersion=2"+ "&Timestamp=2009-11-08T15%3A54%3A08.897Z"+ "&Version=2010-08-01"+ "&AWSAccessKeyId=identity","application/x-www-form-urlencoded")).build();
  HttpResponse listMetrics2Response=HttpResponse.builder().statusCode(200).payload(payloadFromResourceWithContentType("/list_metrics.xml","text/xml")).build();
  CloudWatchApi apiWhenMetricsExist=requestsSendResponses(listMetrics,listMetricsResponse,listMetrics2,listMetrics2Response);
  assertEquals(apiWhenMetricsExist.getMetricApiForRegion(null).list().concat().toString(),"[Metric{namespace=AWS/EC2, metricName=CPUUtilization, dimension=[Dimension{name=InstanceId, value=i-689fcf0f}]}, Metric{namespace=AWS/EC2, metricName=CPUUtilization, dimension=[Dimension{name=InstanceId, value=i-689fcf0f}]}]");
}
