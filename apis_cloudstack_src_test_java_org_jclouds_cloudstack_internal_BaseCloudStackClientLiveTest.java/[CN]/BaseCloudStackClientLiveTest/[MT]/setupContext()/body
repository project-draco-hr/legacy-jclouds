{
  super.setupContext();
  computeClient=view.getComputeService();
  cloudStackContext=view.unwrap();
  client=cloudStackContext.getApi();
  user=verifyCurrentUserIsOfType(cloudStackContext,Account.Type.USER);
  domainAdminEnabled=setupDomainAdminProperties() != null;
  if (domainAdminEnabled) {
    domainAdminComputeContext=createView(setupDomainAdminProperties(),setupModules());
    domainAdminContext=domainAdminComputeContext.getDomainContext();
    domainAdminClient=domainAdminContext.getApi();
    domainAdminUser=verifyCurrentUserIsOfType(domainAdminContext,Account.Type.DOMAIN_ADMIN);
    adminClient=domainAdminContext.getApi();
  }
  globalAdminEnabled=setupGlobalAdminProperties() != null;
  if (globalAdminEnabled) {
    globalAdminComputeContext=createView(setupGlobalAdminProperties(),setupModules());
    globalAdminContext=globalAdminComputeContext.getGlobalContext();
    globalAdminClient=globalAdminContext.getApi();
    globalAdminUser=verifyCurrentUserIsOfType(globalAdminContext,Account.Type.ADMIN);
    adminClient=globalAdminContext.getApi();
  }
  injector=cloudStackContext.utils().injector();
  sshFactory=injector.getInstance(SshClient.Factory.class);
  SocketOpen socketOpen=context.utils().injector().getInstance(SocketOpen.class);
  socketTester=retry(socketOpen,180,1,1,SECONDS);
  injector.injectMembers(socketTester);
  jobComplete=retry(new JobComplete(client),1200,1,5,SECONDS);
  injector.injectMembers(jobComplete);
  adminJobComplete=retry(new JobComplete(adminClient),1200,1,5,SECONDS);
  injector.injectMembers(adminJobComplete);
  virtualMachineRunning=retry(new VirtualMachineRunning(client),600,5,5,SECONDS);
  injector.injectMembers(virtualMachineRunning);
  adminVirtualMachineRunning=retry(new VirtualMachineRunning(adminClient),600,5,5,SECONDS);
  injector.injectMembers(adminVirtualMachineRunning);
  virtualMachineDestroyed=retry(new VirtualMachineDestroyed(client),600,5,5,SECONDS);
  injector.injectMembers(virtualMachineDestroyed);
  adminVirtualMachineDestroyed=retry(new VirtualMachineDestroyed(adminClient),600,5,5,SECONDS);
  injector.injectMembers(adminVirtualMachineDestroyed);
  reuseOrAssociate=new ReuseOrAssociateNewPublicIPAddress(client,new BlockUntilJobCompletesAndReturnResult(client,jobComplete));
  injector.injectMembers(reuseOrAssociate);
}
