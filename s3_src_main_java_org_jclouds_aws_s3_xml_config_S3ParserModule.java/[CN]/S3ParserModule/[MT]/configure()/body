{
  install(new SaxModule());
  final TypeLiteral<S3ParserFactory.GenericParseFactory<List<S3Bucket.Metadata>>> listBucketsTypeLiteral=new TypeLiteral<S3ParserFactory.GenericParseFactory<List<S3Bucket.Metadata>>>(){
  }
;
  final TypeLiteral<S3ParserFactory.GenericParseFactory<S3Bucket>> bucketTypeLiteral=new TypeLiteral<S3ParserFactory.GenericParseFactory<S3Bucket>>(){
  }
;
  final TypeLiteral<S3ParserFactory.GenericParseFactory<S3Object.Metadata>> objectMetaDataTypeLiteral=new TypeLiteral<S3ParserFactory.GenericParseFactory<S3Object.Metadata>>(){
  }
;
  final TypeLiteral<S3ParserFactory.GenericParseFactory<S3Error>> errorTypeLiteral=new TypeLiteral<S3ParserFactory.GenericParseFactory<S3Error>>(){
  }
;
  bind(listBucketsTypeLiteral).toProvider(FactoryProvider.newFactory(listBucketsTypeLiteral,new TypeLiteral<ParseSax<List<S3Bucket.Metadata>>>(){
  }
));
  bind(bucketTypeLiteral).toProvider(FactoryProvider.newFactory(bucketTypeLiteral,new TypeLiteral<ParseSax<S3Bucket>>(){
  }
));
  bind(objectMetaDataTypeLiteral).toProvider(FactoryProvider.newFactory(objectMetaDataTypeLiteral,new TypeLiteral<ParseSax<S3Object.Metadata>>(){
  }
));
  bind(errorTypeLiteral).toProvider(FactoryProvider.newFactory(errorTypeLiteral,new TypeLiteral<ParseSax<S3Error>>(){
  }
));
  bind(new TypeLiteral<ParseSax.HandlerWithResult<List<S3Bucket.Metadata>>>(){
  }
).to(ListAllMyBucketsHandler.class);
  bind(new TypeLiteral<ParseSax.HandlerWithResult<S3Bucket>>(){
  }
).to(ListBucketHandler.class);
  bind(new TypeLiteral<ParseSax.HandlerWithResult<S3Object.Metadata>>(){
  }
).to(CopyObjectHandler.class);
  bind(new TypeLiteral<ParseSax.HandlerWithResult<S3Error>>(){
  }
).to(ErrorHandler.class);
}
