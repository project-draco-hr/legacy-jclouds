{
  JoyentCloudApi cloudApiApi=createMock(JoyentCloudApi.class);
  KeyApi keyApi=createMock(KeyApi.class);
  Crypto crypto=createMock(Crypto.class);
  KeyPairGenerator rsaKeyPairGenerator=createMock(KeyPairGenerator.class);
  SecureRandom secureRandom=createMock(SecureRandom.class);
  Key key=Key.builder().name("group-foo").key(openSshKey).build();
  expect(crypto.rsaKeyPairGenerator()).andReturn(rsaKeyPairGenerator);
  rsaKeyPairGenerator.initialize(2048,secureRandom);
  expect(rsaKeyPairGenerator.genKeyPair()).andReturn(keyPair);
  expect(cloudApiApi.getKeyApi()).andReturn(keyApi);
  expect(keyApi.create(key)).andReturn(key);
  replay(cloudApiApi,keyApi,crypto,rsaKeyPairGenerator,secureRandom);
  CreateUniqueKey parser=new CreateUniqueKey(cloudApiApi,namingConvention,crypto,Providers.of(secureRandom));
  assertEquals(parser.load(DatacenterAndName.fromDatacenterAndName("datacenter","group")),KeyAndPrivateKey.fromKeyAndPrivateKey(key,PRIVATE_KEY));
  verify(cloudApiApi,keyApi,crypto,rsaKeyPairGenerator,secureRandom);
}
