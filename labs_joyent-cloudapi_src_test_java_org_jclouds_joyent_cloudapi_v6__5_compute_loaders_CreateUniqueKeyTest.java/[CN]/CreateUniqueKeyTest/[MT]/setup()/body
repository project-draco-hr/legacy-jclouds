{
  namingConvention=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(new TypeLiteral<Supplier<String>>(){
      }
).toInstance(Suppliers.ofInstance("foo"));
    }
  }
).getInstance(GroupNamingConvention.Factory.class);
  KeyFactory keyfactory=KeyFactory.getInstance("RSA");
  PrivateKey privateKey=keyfactory.generatePrivate(Pems.privateKeySpec(Payloads.newStringPayload(PRIVATE_KEY)));
  PublicKey publicKey=keyfactory.generatePublic(Pems.publicKeySpec(Payloads.newStringPayload(PUBLIC_KEY)));
  keyPair=new KeyPair(publicKey,privateKey);
  openSshKey=SshKeys.encodeAsOpenSSH(RSAPublicKey.class.cast(publicKey));
}
