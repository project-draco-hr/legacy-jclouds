{
  String region=Region.US_EAST_1;
  String tag="tag";
  Hardware size=EC2ComputeServiceTest.CC1_4XLARGE;
  String systemGeneratedKeyPairName="systemGeneratedKeyPair";
  String generatedGroup="group";
  Set<String> generatedGroups=ImmutableSet.of(generatedGroup);
  CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions strategy=createMock(CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class,new Method[]{CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class.getDeclaredMethod("createNewKeyPairUnlessUserSpecifiedOtherwise",String.class,String.class,TemplateOptions.class),CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class.getDeclaredMethod("createNewPlacementGroupUnlessUserSpecifiedOtherwise",String.class,String.class,TemplateOptions.class),CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class.getDeclaredMethod("getSecurityGroupsForTagAndOptions",String.class,String.class,TemplateOptions.class)});
  EC2TemplateOptions options=createMock(EC2TemplateOptions.class);
  Template template=createMock(Template.class);
  expect(template.getHardware()).andReturn(size).atLeastOnce();
  expect(template.getOptions()).andReturn(options).atLeastOnce();
  expect(strategy.createNewKeyPairUnlessUserSpecifiedOtherwise(region,tag,options)).andReturn(systemGeneratedKeyPairName);
  expect(strategy.createNewPlacementGroupUnlessUserSpecifiedOtherwise(region,tag,options)).andReturn(generatedGroup);
  expect(strategy.getSecurityGroupsForTagAndOptions(region,tag,options)).andReturn(generatedGroups);
  expect(options.getSubnetId()).andReturn(null);
  expect(options.getUserData()).andReturn(null);
  replay(options);
  replay(template);
  replay(strategy);
  RunInstancesOptions runOptions=strategy.execute(region,tag,template);
  assertEquals(runOptions.buildQueryParameters(),ImmutableMultimap.<String,String>of());
  assertEquals(runOptions.buildFormParameters().entries(),ImmutableMultimap.<String,String>of("InstanceType",size.getProviderId(),"AdditionalInfo",tag,"SecurityGroup.1",generatedGroup,"KeyName",systemGeneratedKeyPairName,"Placement.GroupName",generatedGroup).entries());
  assertEquals(runOptions.buildMatrixParameters(),ImmutableMultimap.<String,String>of());
  assertEquals(runOptions.buildRequestHeaders(),ImmutableMultimap.<String,String>of());
  assertEquals(runOptions.buildStringPayload(),null);
  verify(options);
  verify(template);
  verify(strategy);
}
