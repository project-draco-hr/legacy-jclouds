{
  InputStream is=getClass().getResourceAsStream("/terremark/windows_description.txt");
  String description=new String(ByteStreams.toByteArray(is));
  VAppTemplate template=createMock(VAppTemplate.class);
  TerremarkVDC vdc=createMock(TerremarkVDC.class);
  URI templateURI=URI.create("template");
  URI vdcURI=URI.create("vdc");
  expect(template.getDescription()).andReturn(description).atLeastOnce();
  TerremarkVCloudExpressClient client=createMock(TerremarkVCloudExpressClient.class);
  VApp vApp=createMock(VApp.class);
  expect(client.getVDC(vdcURI)).andReturn(vdc);
  expect(client.getVAppTemplate(templateURI)).andReturn(template);
  expect(client.getVAppTemplate(templateURI)).andReturn(template);
  expect(vdc.getLocation()).andReturn(vdcURI);
  expect(template.getLocation()).andReturn(templateURI);
  expect(client.instantiateVAppTemplateInVDC(vdcURI,templateURI,"name",new TerremarkInstantiateVAppTemplateOptions().productProperty("password","password"))).andReturn(vApp);
  Task task=createMock(Task.class);
  expect(vApp.getId()).andReturn("1").atLeastOnce();
  expect(client.deployVApp("1")).andReturn(task);
  expect(task.getId()).andReturn("1").atLeastOnce();
  Predicate<String> successTester=createMock(Predicate.class);
  expect(successTester.apply("1")).andReturn(true).atLeastOnce();
  expect(client.powerOnVApp("1")).andReturn(task);
  Predicate<VApp> notFoundTester=createMock(Predicate.class);
  Map<VAppStatus,NodeState> vAppStatusToNodeState=createMock(Map.class);
  TerremarkVCloudComputeClient computeClient=new TerremarkVCloudComputeClient(client,new ParseVAppTemplateDescriptionToGetDefaultLoginCredentials(),new Provider<String>(){
    @Override public String get(){
      return "password";
    }
  }
,successTester,vAppStatusToNodeState);
  replay(vdc);
  replay(template);
  replay(vApp);
  replay(task);
  replay(client);
  replay(successTester);
  replay(notFoundTester);
  replay(vAppStatusToNodeState);
  Map<String,String> response=computeClient.start(vdcURI,templateURI,"name",new TerremarkInstantiateVAppTemplateOptions());
  assertEquals(response.get("id"),"1");
  assertEquals(response.get("username"),"Administrator");
  assertEquals(response.get("password"),"password");
  verify(vdc);
  verify(template);
  verify(vApp);
  verify(task);
  verify(client);
  verify(successTester);
  verify(notFoundTester);
  verify(vAppStatusToNodeState);
}
