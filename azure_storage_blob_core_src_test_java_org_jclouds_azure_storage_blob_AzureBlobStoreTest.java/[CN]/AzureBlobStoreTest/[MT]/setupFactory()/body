{
  Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(URI.class).annotatedWith(AzureBlob.class).toInstance(URI.create("http://myaccount.blob.core.windows.net"));
      bindConstant().annotatedWith(Jsr330.named(AzureStorageConstants.PROPERTY_AZURESTORAGE_ACCOUNT)).to("myaccount");
      bindConstant().annotatedWith(Jsr330.named(AzureStorageConstants.PROPERTY_AZURESTORAGE_KEY)).to(HttpUtils.toBase64String("key".getBytes()));
      bindConstant().annotatedWith(Jsr330.named(BlobStoreConstants.PROPERTY_USER_METADATA_PREFIX)).to("prefix");
      bind(Logger.LoggerFactory.class).toInstance(new LoggerFactory(){
        public Logger getLogger(        String category){
          return Logger.NULL;
        }
      }
);
      bindConstant().annotatedWith(Jsr330.named(AzureStorageConstants.PROPERTY_AZURESTORAGE_SESSIONINTERVAL)).to(1l);
    }
    @SuppressWarnings("unused") @Provides @Singleton AzureBlobUtil getAzureBlobUtil(){
      return new AzureBlobUtil(){
        public byte[] getMD5(        URI container,        String key){
          return HttpUtils.fromHexString("01");
        }
      }
;
    }
  }
,new RestAzureStorageConnectionModule(),new RestModule(),new ExecutorServiceModule(new WithinThreadExecutorService()),new JavaUrlHttpCommandExecutorServiceModule());
  processor=injector.getInstance(Key.get(new TypeLiteral<RestAnnotationProcessor<AzureBlobStore>>(){
  }
));
}
