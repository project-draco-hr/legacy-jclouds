{
  Firewall firewall=api.getFirewallApiForProject(userProject.get()).get(sharedResourceName);
  if (firewall != null) {
    return;
  }
  ImmutableSet.Builder<Firewall.Rule> rules=ImmutableSet.builder();
  Firewall.Rule.Builder tcpRule=Firewall.Rule.builder();
  tcpRule.IPProtocol(Firewall.Rule.IPProtocol.TCP);
  Firewall.Rule.Builder udpRule=Firewall.Rule.builder();
  udpRule.IPProtocol(Firewall.Rule.IPProtocol.UDP);
  for (  Integer port : templateOptions.getInboundPorts()) {
    tcpRule.addPort(port);
    udpRule.addPort(port);
  }
  rules.add(tcpRule.build());
  rules.add(udpRule.build());
  FirewallOptions options=new FirewallOptions().name(sharedResourceName).network(network.getSelfLink()).sourceTags(templateOptions.getTags()).allowedRules(rules.build()).sourceRanges(of(DEFAULT_INTERNAL_NETWORK_RANGE,EXTERIOR_RANGE));
  AtomicReference<Operation> operation=new AtomicReference<Operation>(api.getFirewallApiForProject(userProject.get()).createInNetwork(sharedResourceName,network.getSelfLink(),options));
  retry(operationDonePredicate,operationCompleteCheckTimeout,operationCompleteCheckInterval,MILLISECONDS).apply(operation);
  if (operation.get().getHttpError().isPresent()) {
    throw new IllegalStateException("Could not create firewall, operation failed" + operation.get());
  }
}
