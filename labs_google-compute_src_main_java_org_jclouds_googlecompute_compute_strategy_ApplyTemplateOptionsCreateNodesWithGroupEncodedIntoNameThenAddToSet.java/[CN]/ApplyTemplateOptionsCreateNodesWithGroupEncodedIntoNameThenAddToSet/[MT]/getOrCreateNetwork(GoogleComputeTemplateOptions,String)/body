{
  String networkName=templateOptions.getNetworkName().isPresent() ? templateOptions.getNetworkName().get() : sharedResourceName;
  Network network=api.getNetworkApiForProject(userProject.get()).get(networkName);
  if (network != null) {
    return network;
  }
  if (network == null && templateOptions.getNetwork().isPresent()) {
    throw new IllegalStateException("user defined network does not exist: " + templateOptions.getNetwork().get());
  }
  AtomicReference<Operation> operation=new AtomicReference<Operation>(api.getNetworkApiForProject(userProject.get()).createInIPv4Range(sharedResourceName,DEFAULT_INTERNAL_NETWORK_RANGE));
  retry(operationDonePredicate,operationCompleteCheckTimeout,operationCompleteCheckInterval,MILLISECONDS).apply(operation);
  if (operation.get().getHttpError().isPresent()) {
    throw new IllegalStateException("Could not create network, operation failed" + operation);
  }
  return checkNotNull(api.getNetworkApiForProject(userProject.get()).get(sharedResourceName),"no network with name %s was found",sharedResourceName);
}
