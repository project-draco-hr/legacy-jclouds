{
  checkNotNull(from,"VAppTemplate");
  if (!from.isOvfDescriptorUploaded()) {
    logger.warn("cannot parse size as ovf descriptor for %s is not uploaded",from);
    return null;
  }
  OvfEnvelope ovf=client.getOvfEnvelopeForVAppTemplate(from.getHref());
  if (ovf == null) {
    logger.warn("cannot parse size as no ovf envelope found for %s",from);
    return null;
  }
  Location location=findLocationForResource.apply(checkNotNull(parent,"parent"));
  if (ovf.getVirtualSystem().getHardware().size() == 0) {
    logger.warn("cannot parse size for %s as no hardware sections exist in ovf %s",ovf);
    return null;
  }
  if (ovf.getVirtualSystem().getHardware().size() > 1) {
    logger.warn("multiple hardware choices found. using first",ovf);
  }
  VirtualHardwareSection hardware=Iterables.get(ovf.getVirtualSystem().getHardware(),0);
  int ram=(int)find(hardware.getResourceAllocations(),resourceType(ResourceType.MEMORY)).getVirtualQuantity();
  ResourceAllocation diskR=find(hardware.getResourceAllocations(),resourceType(ResourceType.DISK_DRIVE));
  int disk=(int)(((diskR instanceof VCloudHardDisk) ? VCloudHardDisk.class.cast(diskR).getCapacity() : diskR.getVirtualQuantity()) / 1024l);
  double cores=(int)find(hardware.getResourceAllocations(),resourceType(ResourceType.PROCESSOR)).getVirtualQuantity();
  return new SizeImpl(from.getHref().toASCIIString(),from.getName() + String.format(": vpu(%.1f), ram(%d), disk(%d)",cores,ram,disk),from.getHref().toASCIIString(),location,null,ImmutableMap.<String,String>of(),cores,ram,disk,ImagePredicates.idEquals(from.getHref().toASCIIString()));
}
