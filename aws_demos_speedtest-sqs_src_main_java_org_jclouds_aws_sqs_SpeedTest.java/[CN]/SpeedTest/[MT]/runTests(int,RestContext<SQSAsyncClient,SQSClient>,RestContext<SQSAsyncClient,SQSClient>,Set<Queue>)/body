{
  String message="1";
  long timeOut=messageCount * 200;
  for (  Entry<String,RestContext<SQSAsyncClient,SQSClient>> entry : ImmutableMap.<String,RestContext<SQSAsyncClient,SQSClient>>of("enterprise",nullLoggingEnterpriseContext,"default",nullLoggingDefaultContext).entrySet()) {
    for (    Queue queue : queues) {
      int complete=0;
      int errors=0;
      Set<ListenableFuture<byte[]>> responses=Sets.newHashSet();
      long start=System.currentTimeMillis();
      for (int i=0; i < messageCount; i++) {
        responses.add(entry.getValue().getAsyncApi().sendMessage(queue,message));
      }
      do {
        Set<ListenableFuture<byte[]>> retries=Sets.newHashSet();
        for (        ListenableFuture<byte[]> response : responses) {
          try {
            response.get(100,TimeUnit.MILLISECONDS);
            complete++;
          }
 catch (          ExecutionException e) {
            System.err.println(e.getMessage());
            errors++;
          }
catch (          TimeoutException e) {
            retries.add(response);
          }
        }
        responses=Sets.newHashSet(retries);
      }
 while (responses.size() > 0 && System.currentTimeMillis() < start + timeOut);
      long duration=System.currentTimeMillis() - start;
      if (duration > timeOut)       System.out.printf("TIMEOUT: context: %s, region: %s, rate: %f messages/second%n",entry.getKey(),queue.getRegion(),((double)complete) / (duration / 1000.0));
 else       System.out.printf("COMPLETE:  context: %s, region: %s, rate: %f messages/second%n",entry.getKey(),queue.getRegion(),((double)complete) / (duration / 1000.0));
      System.out.println("pausing 5 seconds before the next run");
      System.gc();
      Thread.sleep(5000);
    }
  }
}
