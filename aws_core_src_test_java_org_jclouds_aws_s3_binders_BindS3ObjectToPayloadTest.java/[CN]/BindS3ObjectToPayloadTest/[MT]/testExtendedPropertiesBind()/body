{
  BindUserMetadataToHeadersWithPrefix mdBinder=createMock(BindUserMetadataToHeadersWithPrefix.class);
  ObjectToBlob object2Blob=createMock(ObjectToBlob.class);
  HttpRequest request=createMock(HttpRequest.class);
  S3Object object=createMock(S3Object.class);
  Payload payload=createMock(Payload.class);
  Blob blob=createMock(Blob.class);
  MutableObjectMetadata md=createMock(MutableObjectMetadata.class);
  Multimap<String,String> headers=createMock(Multimap.class);
  MutableContentMetadata content=createMock(MutableContentMetadata.class);
  expect(object.getPayload()).andReturn(payload).atLeastOnce();
  expect(payload.getContentMetadata()).andReturn(content).atLeastOnce();
  expect(content.getContentLength()).andReturn(5368709120l).atLeastOnce();
  expect(object2Blob.apply(object)).andReturn(blob);
  mdBinder.bindToRequest(request,blob);
  expect(object.getMetadata()).andReturn(md).atLeastOnce();
  expect(request.getHeaders()).andReturn(headers).atLeastOnce();
  expect(md.getCacheControl()).andReturn("no-cache").atLeastOnce();
  expect(headers.put("Cache-Control","no-cache")).andReturn(true);
  replay(headers);
  replay(payload);
  replay(content);
  replay(mdBinder);
  replay(object2Blob);
  replay(request);
  replay(object);
  replay(blob);
  replay(md);
  BindS3ObjectToPayload binder=new BindS3ObjectToPayload(object2Blob,mdBinder);
  binder.bindToRequest(request,object);
  verify(headers);
  verify(content);
  verify(payload);
  verify(mdBinder);
  verify(object2Blob);
  verify(request);
  verify(object);
  verify(blob);
  verify(md);
}
