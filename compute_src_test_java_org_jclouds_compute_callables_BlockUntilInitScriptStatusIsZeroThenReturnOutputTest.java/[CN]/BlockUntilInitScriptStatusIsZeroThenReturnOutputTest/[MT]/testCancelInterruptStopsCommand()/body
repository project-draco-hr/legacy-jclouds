{
  ExecutorService userThreads=MoreExecutors.sameThreadExecutor();
  Predicate<String> notRunningAnymore=Predicates.alwaysTrue();
  SudoAwareInitManager commandRunner=createMockBuilder(SudoAwareInitManager.class).addMockedMethod("refreshAndRunAction").addMockedMethod("runAction").addMockedMethod("getStatement").addMockedMethod("getNode").addMockedMethod("toString").createStrictMock();
  InitScript initScript=createMockBuilder(InitScript.class).addMockedMethod("getInstanceName").createStrictMock();
  expect(commandRunner.getStatement()).andReturn(initScript);
  expect(initScript.getInstanceName()).andReturn("init-script");
  expect(commandRunner.refreshAndRunAction("stop")).andReturn(new ExecResponse("stdout","",0));
  expect(commandRunner.getStatement()).andReturn(initScript);
  expect(initScript.getInstanceName()).andReturn("init-script");
  expect(commandRunner.getNode()).andReturn(new NodeMetadataBuilder().ids("id").status(NodeMetadata.Status.RUNNING).build()).atLeastOnce();
  expect(commandRunner.getStatement()).andReturn(initScript);
  expect(commandRunner.getNode()).andReturn(new NodeMetadataBuilder().ids("id").status(NodeMetadata.Status.RUNNING).build()).atLeastOnce();
  replay(commandRunner,initScript);
  BlockUntilInitScriptStatusIsZeroThenReturnOutput future=new BlockUntilInitScriptStatusIsZeroThenReturnOutput(userThreads,eventBus,notRunningAnymore,commandRunner);
  future.cancel(true);
  try {
    future.get();
    fail();
  }
 catch (  CancellationException e) {
  }
  verify(commandRunner,initScript);
}
