{
  ScheduledExecutorServiceModule module=new ScheduledExecutorServiceModule(){
    @Override protected void configure(){
      bindConstant().annotatedWith(Names.named(Constants.PROPERTY_SCHEDULER_THREADS)).to(1);
      super.configure();
    }
  }
;
  Injector i=Guice.createInjector(module);
  Closer closer=i.getInstance(Closer.class);
  ScheduledExecutorService sched=i.getInstance(Key.get(ScheduledExecutorService.class,Names.named(Constants.PROPERTY_SCHEDULER_THREADS)));
  ConfigurableRunner t1=new ConfigurableRunner();
  t1.failMessage="foo";
  t1.result="shouldn't happen";
  ScheduledFuture<Object> esc=performScheduleInSeparateMethod1(sched,t1);
  checkFutureGetFailsWith(esc,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performScheduleInSeparateMethod1");
  ScheduledFuture<?> esr=performScheduleInSeparateMethod2(sched,t1);
  checkFutureGetFailsWith(esr,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performScheduleInSeparateMethod2");
  ScheduledFuture<?> esfr=performScheduleInSeparateMethod3(sched,t1);
  checkFutureGetFailsWith(esfr,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performScheduleInSeparateMethod3");
  ScheduledFuture<?> esfd=performScheduleInSeparateMethod4(sched,t1);
  checkFutureGetFailsWith(esfd,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performScheduleInSeparateMethod4");
  closer.close();
}
