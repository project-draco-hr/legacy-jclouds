{
  Exception exception=new HttpResponseException(command,response);
  try {
    AtmosError error=null;
    if (response.getPayload() != null) {
      try {
        String content=Strings2.toStringAndClose(response.getPayload().getInput());
        if (content != null && content.indexOf('<') >= 0) {
          error=utils.parseAtmosErrorFromContent(command,response,Strings2.toInputStream(content));
        }
 else {
          exception=content != null ? new HttpResponseException(command,response,content) : exception;
        }
      }
 catch (      IOException e) {
        logger.warn(e,"exception reading error from response",response);
      }
    }
    if (error != null && error.getCode() == 1016) {
      File file=new File(command.getCurrentRequest().getEndpoint().getPath());
      exception=new KeyAlreadyExistsException(file.getParentFile().getAbsolutePath(),file.getName());
    }
 else {
switch (response.getStatusCode()) {
case 401:
        exception=new AuthorizationException(exception.getMessage(),exception);
      break;
case 404:
    if (!command.getCurrentRequest().getMethod().equals("DELETE")) {
      String message=error != null ? error.getMessage() : String.format("%s -> %s",command.getCurrentRequest().getRequestLine(),response.getStatusLine());
      String path=command.getCurrentRequest().getEndpoint().getPath();
      Matcher matcher=DIRECTORY_PATH.matcher(path);
      if (matcher.find()) {
        exception=new ContainerNotFoundException(matcher.group(1),message);
      }
 else {
        matcher=DIRECTORY_KEY_PATH.matcher(path);
        if (matcher.find()) {
          exception=new KeyNotFoundException(matcher.group(1),matcher.group(2),message);
        }
      }
    }
  break;
default :
exception=error != null ? new AtmosResponseException(command,response,error) : new HttpResponseException(command,response);
}
}
}
  finally {
releasePayload(response);
command.setException(exception);
}
}
