{
  URL url=null;
  try {
    url=request.getEndpoint().toURL();
  }
 catch (  MalformedURLException e) {
    Throwables.propagate(e);
  }
  FetchOptions options=disallowTruncate();
  options.doNotFollowRedirects();
  HTTPRequest gaeRequest=new HTTPRequest(url,HTTPMethod.valueOf(request.getMethod().toString()),options);
  for (  String header : request.getHeaders().keySet()) {
    for (    String value : request.getHeaders().get(header)) {
      if (!"Transfer-Encoding".equals(header))       gaeRequest.addHeader(new HTTPHeader(header,value));
    }
  }
  gaeRequest.addHeader(new HTTPHeader(HttpHeaders.USER_AGENT,USER_AGENT));
  if (request.getPayload() != null) {
    InputStream input=request.getPayload().getInput();
    try {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      request.getPayload().writeTo(out);
      byte[] array=out.toByteArray();
      if (!request.getPayload().isRepeatable()) {
        Payload oldPayload=request.getPayload();
        request.setPayload(array);
        HttpUtils.copy(oldPayload.getContentMetadata(),request.getPayload().getContentMetadata());
      }
      gaeRequest.setPayload(array);
    }
 catch (    IOException e) {
      Throwables.propagate(e);
    }
 finally {
      closeQuietly(input);
    }
    LinkedHashMultimap<String,String> map=LinkedHashMultimap.create();
    HttpUtils.addContentHeadersFromMetadata(request.getPayload().getContentMetadata(),map);
    for (    Entry<String,String> header : map.entries()) {
      gaeRequest.setHeader(new HTTPHeader(header.getKey(),header.getValue()));
    }
  }
 else {
    gaeRequest.setHeader(new HTTPHeader(HttpHeaders.CONTENT_LENGTH,"0"));
  }
  return gaeRequest;
}
