{
  checkNotNull(filter,"Filter must be provided");
  checkNotNull(runScript,"runScript");
  checkNotNull(options,"options");
  if (options.getTaskName() == null)   options.nameTask("jclouds-script-" + System.currentTimeMillis());
  Iterable<? extends NodeMetadata> nodes=Iterables.filter(detailsOnAllNodes(),filter);
  final Map<NodeMetadata,ExecResponse> execs=Maps.newHashMap();
  final Map<NodeMetadata,Future<Void>> responses=Maps.newHashMap();
  final Map<NodeMetadata,Exception> badNodes=Maps.newLinkedHashMap();
  nodes=filterNodesWhoCanRunScripts(nodes,badNodes,options.getOverrideCredentials());
  for (  final NodeMetadata node : nodes) {
    responses.put(node,executor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        try {
          ExecResponse response=utils.runScriptOnNode(node,Statements.exec(Utils.toStringAndClose(runScript.getInput())),options);
          if (response != null)           execs.put(node,response);
        }
 catch (        Exception e) {
          badNodes.put(node,e);
        }
        return null;
      }
    }
));
  }
  Map<?,Exception> exceptions=awaitCompletion(responses,executor,null,logger,"running script on nodes");
  if (exceptions.size() > 0 || badNodes.size() > 0) {
    throw new RunScriptOnNodesException(runScript,options,execs,exceptions,badNodes);
  }
  return execs;
}
