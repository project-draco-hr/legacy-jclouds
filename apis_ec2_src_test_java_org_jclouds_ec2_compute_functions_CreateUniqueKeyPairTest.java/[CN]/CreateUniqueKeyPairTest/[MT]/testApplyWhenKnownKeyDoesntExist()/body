{
  EC2Client client=createMock(EC2Client.class);
  KeyPairClient keyClient=createMock(KeyPairClient.class);
  Supplier<String> uniqueIdSupplier=createMock(Supplier.class);
  Map<RegionAndName,KeyPair> knownKeys=createMock(Map.class);
  KeyPair pair=createMock(KeyPair.class);
  expect(client.getKeyPairServices()).andReturn(keyClient).atLeastOnce();
  expect(knownKeys.containsKey(new RegionAndName("region","group"))).andReturn(false);
  expect(uniqueIdSupplier.get()).andReturn("1");
  expect(keyClient.createKeyPairInRegion("region","jclouds#group#region#1")).andThrow(new IllegalStateException());
  expect(uniqueIdSupplier.get()).andReturn("2");
  expect(keyClient.createKeyPairInRegion("region","jclouds#group#region#2")).andReturn(pair);
  expect(pair.getKeyName()).andReturn("jclouds#group#region#2").times(2);
  expect(knownKeys.put(new RegionAndName("region","jclouds#group#region#2"),pair)).andReturn(null);
  expect(knownKeys.put(new RegionAndName("region","group"),pair)).andReturn(null);
  replay(pair);
  replay(client);
  replay(knownKeys);
  replay(keyClient);
  replay(uniqueIdSupplier);
  CreateUniqueKeyPair parser=new CreateUniqueKeyPair(knownKeys,client,uniqueIdSupplier);
  assertEquals(parser.load(new RegionAndName("region","group")),pair);
  verify(pair);
  verify(client);
  verify(knownKeys);
  verify(keyClient);
  verify(uniqueIdSupplier);
}
