{
  final EC2Client client=createMock(EC2Client.class);
  KeyPairClient keyClient=createMock(KeyPairClient.class);
  final Supplier<String> uniqueIdSupplier=createMock(Supplier.class);
  KeyPair pair=createMock(KeyPair.class);
  expect(client.getKeyPairServices()).andReturn(keyClient).atLeastOnce();
  expect(uniqueIdSupplier.get()).andReturn("1");
  expect(keyClient.createKeyPairInRegion("region","jclouds#group#1")).andThrow(new IllegalStateException());
  expect(uniqueIdSupplier.get()).andReturn("2");
  expect(keyClient.createKeyPairInRegion("region","jclouds#group#2")).andReturn(pair);
  replay(client);
  replay(keyClient);
  replay(uniqueIdSupplier);
  CreateUniqueKeyPair parser=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      Names.bindProperties(binder(),new EC2ApiMetadata().getDefaultProperties());
      bind(new TypeLiteral<Supplier<String>>(){
      }
).toInstance(uniqueIdSupplier);
      bind(EC2Client.class).toInstance(client);
    }
  }
).getInstance(CreateUniqueKeyPair.class);
  assertEquals(parser.createNewKeyPairInRegion("region","group"),pair);
  verify(client);
  verify(keyClient);
  verify(uniqueIdSupplier);
}
