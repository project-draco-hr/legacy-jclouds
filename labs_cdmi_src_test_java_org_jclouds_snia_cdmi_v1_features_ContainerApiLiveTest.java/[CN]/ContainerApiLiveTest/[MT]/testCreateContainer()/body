{
  String pContainerName="MyContainer" + System.currentTimeMillis() + "/";
  Map<String,String> pContainerMetaDataIn=Maps.newHashMap();
  pContainerMetaDataIn.put("containerkey1","value1");
  pContainerMetaDataIn.put("containerkey2","value2");
  pContainerMetaDataIn.put("containerkey3","value3");
  CreateContainerOptions pCreateContainerOptions=CreateContainerOptions.Builder.metadata(pContainerMetaDataIn);
  ContainerApi api=cdmiContext.getApi().getApi();
  Logger.getAnonymousLogger().info("create: " + pContainerName);
  Container container=api.create(pContainerName,pCreateContainerOptions);
  assertNotNull(container);
  try {
    System.out.println(container);
    Logger.getAnonymousLogger().info("get: " + pContainerName);
    container=api.get(pContainerName);
    assertNotNull(container);
    System.out.println(container);
    assertEquals(container.getObjectType(),ObjectTypes.CONTAINER);
    assertNotNull(container.getObjectID());
    assertNotNull(container.getObjectName());
    assertEquals(container.getObjectName(),pContainerName);
    assertEquals(container.getParentURI(),"/");
    assertNotNull(container.getChildren());
    assertEquals(container.getChildren().isEmpty(),true);
    System.out.println("Children: " + container.getChildren());
    assertNotNull(container.getMetadata());
    System.out.println("Raw metadata: " + container.getMetadata());
    for (    Map.Entry<String,JsonBall> entry : container.getMetadata().entrySet()) {
      System.out.println(entry.getKey() + ":" + entry.getValue());
    }
    assertNotNull(container.getUserMetadata());
    Map<String,String> pContainerMetaDataOut=container.getUserMetadata();
    for (    Map.Entry<String,String> entry : pContainerMetaDataIn.entrySet()) {
      String key=entry.getKey();
      assertEquals(pContainerMetaDataOut.containsKey(key),true);
      assertEquals(pContainerMetaDataOut.get(key),entry.getValue());
    }
    System.out.println("UserMetaData: " + container.getUserMetadata());
    assertNotNull(container.getSystemMetadata());
    System.out.println("SystemMetaData: " + container.getSystemMetadata());
    assertNotNull(container.getACLMetadata());
    assertEquals(container.getACLMetadata().size(),3);
    List<Map<String,String>> aclMetadataOut=container.getACLMetadata();
    System.out.println("ACLMetaData: ");
    for (    Map<String,String> aclMap : aclMetadataOut) {
      System.out.println(aclMap);
    }
    container=api.get("/");
    System.out.println("root container: " + container);
    assertEquals(container.getChildren().contains(pContainerName),true);
    System.out.println("adding containers to container");
    String firstParentURI=api.get(pContainerName).getObjectName();
    for (int i=0; i < 10; i++) {
      container=api.create(pContainerName + "childcontainer" + i+ "/");
      assertNotNull(container);
      System.out.println(container);
      assertEquals(container.getParentURI(),pContainerName);
      assertEquals(container.getObjectName(),"childcontainer" + i + "/");
      container=api.create(container.getParentURI() + container.getObjectName() + "grandchild/");
      assertEquals(container.getParentURI(),pContainerName + "childcontainer" + i+ "/");
      assertEquals(container.getObjectName(),"grandchild/");
      System.out.println(container);
    }
    container=api.get(pContainerName);
    assertNotNull(container);
    assertNotNull(container.getChildren());
    assertEquals(container.getChildren().size(),10);
  }
  finally {
    Logger.getAnonymousLogger().info("delete: " + pContainerName);
    api.delete(pContainerName);
    container=api.get("/");
    System.out.println("root container: " + container);
    assertEquals(container.getChildren().contains(pContainerName),false);
  }
}
