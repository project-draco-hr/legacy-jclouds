{
  if (qName.equals("ID")) {
    currentOwner=new CanonicalUser(currentText.toString());
  }
 else   if (qName.equals("DisplayName")) {
    currentOwner.setDisplayName(currentText.toString());
  }
 else   if (qName.equals("Key")) {
    currentObjectMetadata=new S3Object.Metadata(currentText.toString());
  }
 else   if (qName.equals("LastModified")) {
    currentObjectMetadata.setLastModified(dateParser.iso8601DateParse(currentText.toString()));
  }
 else   if (qName.equals("ETag")) {
    currentObjectMetadata.setMd5(S3Utils.fromHexString(currentText.toString().replaceAll("\"","")));
  }
 else   if (qName.equals("Size")) {
    currentObjectMetadata.setSize(Long.parseLong(currentText.toString()));
  }
 else   if (qName.equals("Owner")) {
    currentObjectMetadata.setOwner(currentOwner);
  }
 else   if (qName.equals("StorageClass")) {
    currentObjectMetadata.setStorageClass(currentText.toString());
  }
 else   if (qName.equals("Contents")) {
    s3Bucket.getContents().add(currentObjectMetadata);
  }
 else   if (qName.equals("Name")) {
  }
 else   if (qName.equals("Prefix")) {
    String prefix=currentText.toString().trim();
    if (inCommonPrefixes)     s3Bucket.getCommonPrefixes().add(prefix);
 else     s3Bucket.setPrefix(prefix);
  }
 else   if (qName.equals("Delimiter")) {
    if (!currentText.toString().equals(""))     s3Bucket.setDelimiter(currentText.toString().trim());
  }
 else   if (qName.equals("Marker")) {
    if (!currentText.toString().equals(""))     s3Bucket.setMarker(currentText.toString());
  }
 else   if (qName.equals("MaxKeys")) {
    s3Bucket.setMaxKeys(Long.parseLong(currentText.toString()));
  }
 else   if (qName.equals("IsTruncated")) {
    boolean isTruncated=Boolean.parseBoolean(currentText.toString());
    s3Bucket.setTruncated(isTruncated);
  }
  currentText=new StringBuilder();
}
