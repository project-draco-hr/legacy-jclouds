{
  for (  Entry<LoadBalancer,Set<Node>> entry : nodes.entrySet()) {
    LoadBalancer lb=entry.getKey();
    Node node=entry.getValue().iterator().next();
    Map<String,String> metadataMap=ImmutableMap.<String,String>of("key1","value1","key2","value2","key3","value3");
    Metadata metadata=api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).createMetadata(node.getId(),metadataMap);
    assertEquals(metadata,getExpectedMetadata());
    assertTrue(awaitAvailable(api.getLoadBalancerApiForZone(lb.getRegion())).apply(lb));
    metadata=api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).getMetadata(node.getId());
    assertEquals(metadata,getExpectedMetadata());
    assertTrue(api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).updateMetadatum(node.getId(),metadata.getId("key1"),"key1-updated"));
    assertTrue(awaitAvailable(api.getLoadBalancerApiForZone(lb.getRegion())).apply(lb));
    metadata=api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).getMetadata(node.getId());
    assertEquals(metadata.get("key1"),"key1-updated");
    assertTrue(api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).deleteMetadatum(node.getId(),metadata.getId("key1")));
    assertTrue(awaitAvailable(api.getLoadBalancerApiForZone(lb.getRegion())).apply(lb));
    metadata=api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).getMetadata(node.getId());
    assertNull(metadata.get("key1"));
    assertTrue(api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).deleteMetadata(node.getId(),ImmutableList.<Integer>of(metadata.getId("key2"),metadata.getId("key3"))));
    assertTrue(awaitAvailable(api.getLoadBalancerApiForZone(lb.getRegion())).apply(lb));
    metadata=api.getNodeApiForZoneAndLoadBalancer(lb.getRegion(),lb.getId()).getMetadata(node.getId());
    assertEquals(metadata.size(),0);
  }
}
