{
  Provider<Set<? extends Location>> locations=Providers.<Set<? extends Location>>of(ImmutableSet.<Location>of());
  Provider<Set<? extends Image>> images=Providers.<Set<? extends Image>>of(ImmutableSet.<Image>of());
  Provider<Set<? extends Size>> sizes=Providers.<Set<? extends Size>>of(ImmutableSet.<Size>of());
  Location defaultLocation=createMock(Location.class);
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  replay(defaultLocation);
  replay(optionsProvider);
  replay(templateBuilderProvider);
  TemplateBuilderImpl template=createTemplateBuilder(locations,images,sizes,defaultLocation,optionsProvider,templateBuilderProvider);
  template.architecture(Architecture.X86_32);
  template.imageDescriptionMatches("imageDescriptionMatches");
  template.imageNameMatches("imageNameMatches");
  template.imageVersionMatches("imageVersionMatches");
  template.osDescriptionMatches("osDescriptionMatches");
  template.osFamily(OsFamily.CENTOS);
  assertEquals(template.arch,Architecture.X86_32);
  assertEquals(template.imageDescription,"imageDescriptionMatches");
  assertEquals(template.imageName,"imageNameMatches");
  assertEquals(template.imageVersion,"imageVersionMatches");
  assertEquals(template.osDescription,"osDescriptionMatches");
  assertEquals(template.os,OsFamily.CENTOS);
  assertEquals(template.imageId,null);
  template.imageId("myid");
  assertEquals(template.arch,null);
  assertEquals(template.imageDescription,null);
  assertEquals(template.imageName,null);
  assertEquals(template.imageVersion,null);
  assertEquals(template.osDescription,null);
  assertEquals(template.os,null);
  assertEquals(template.imageId,"myid");
  verify(defaultLocation);
  verify(optionsProvider);
  verify(templateBuilderProvider);
}
