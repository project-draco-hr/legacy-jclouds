{
  LoginCredentials.Builder credentialsBuilder=LoginCredentials.builder();
  NovaTemplateOptions templateOptions=template.getOptions().as(NovaTemplateOptions.class);
  CreateServerOptions options=new CreateServerOptions();
  options.metadata(templateOptions.getUserMetadata());
  options.securityGroupNames(templateOptions.getSecurityGroupNames());
  Optional<String> privateKey=Optional.absent();
  if (templateOptions.getKeyPairName() != null) {
    options.keyPairName(templateOptions.getKeyPairName());
    KeyPair keyPair=keyPairCache.getIfPresent(ZoneAndName.fromZoneAndName(template.getLocation().getId(),templateOptions.getKeyPairName()));
    if (keyPair != null && keyPair.getPrivateKey() != null) {
      privateKey=Optional.of(keyPair.getPrivateKey());
      credentialsBuilder.privateKey(privateKey.get());
    }
  }
  String zoneId=template.getLocation().getId();
  String imageId=template.getImage().getProviderId();
  String flavorId=template.getHardware().getProviderId();
  logger.debug(">> creating new server zone(%s) name(%s) image(%s) flavor(%s) options(%s)",zoneId,name,imageId,flavorId,options);
  ServerCreated lightweightServer=novaClient.getServerClientForZone(zoneId).createServer(name,imageId,flavorId,options);
  Server server=novaClient.getServerClientForZone(zoneId).getServer(lightweightServer.getId());
  logger.trace("<< server(%s)",server.getId());
  ServerInZone serverInZone=new ServerInZone(server,zoneId);
  if (!privateKey.isPresent())   credentialsBuilder.password(lightweightServer.getAdminPass());
  return new NodeAndInitialCredentials<ServerInZone>(serverInZone,serverInZone.slashEncode(),credentialsBuilder.build());
}
