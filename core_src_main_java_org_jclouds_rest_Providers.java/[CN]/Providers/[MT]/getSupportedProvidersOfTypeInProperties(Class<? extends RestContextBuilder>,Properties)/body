{
  return filter(transform(filter(properties.entrySet(),new Predicate<Map.Entry<Object,Object>>(){
    @Override public boolean apply(    Entry<Object,Object> input){
      String keyString=input.getKey().toString();
      return keyString.endsWith(".contextbuilder") || keyString.endsWith(".sync");
    }
  }
),new Function<Map.Entry<Object,Object>,String>(){
    @Override public String apply(    Entry<Object,Object> from){
      String keyString=from.getKey().toString();
      try {
        String provider=get(Splitter.on('.').split(keyString),0);
        Class<RestContextBuilder<Object,Object>> clazz=Providers.resolveContextBuilderClass(provider,properties);
        if (clazz != null && type.isAssignableFrom(clazz))         return provider;
      }
 catch (      ClassNotFoundException e) {
      }
catch (      Exception e) {
        propagate(e);
      }
      return null;
    }
  }
),notNull());
}
