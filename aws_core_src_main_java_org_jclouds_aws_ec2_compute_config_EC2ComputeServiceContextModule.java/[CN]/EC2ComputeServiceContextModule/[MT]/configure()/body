{
  install(new ComputeServiceTimeoutsModule());
  bind(Location.class).toProvider(DefaultLocationProvider.class).in(Scopes.SINGLETON);
  bind(TemplateBuilder.class).to(EC2TemplateBuilderImpl.class);
  bind(TemplateOptions.class).to(EC2TemplateOptions.class);
  bind(ComputeService.class).to(EC2ComputeService.class);
  bind(new TypeLiteral<ComputeServiceContext>(){
  }
).to(new TypeLiteral<ComputeServiceContextImpl<EC2Client,EC2AsyncClient>>(){
  }
).in(Scopes.SINGLETON);
  bind(new TypeLiteral<RestContext<EC2Client,EC2AsyncClient>>(){
  }
).to(new TypeLiteral<RestContextImpl<EC2Client,EC2AsyncClient>>(){
  }
).in(Scopes.SINGLETON);
  bind(LoadBalanceNodesStrategy.class).to(EC2LoadBalanceNodesStrategy.class);
  bind(DestroyLoadBalancerStrategy.class).to(EC2DestroyLoadBalancerStrategy.class);
  bind(RunNodesAndAddToSetStrategy.class).to(EC2RunNodesAndAddToSetStrategy.class);
  bind(ListNodesStrategy.class).to(EC2ListNodesStrategy.class);
  bind(GetNodeMetadataStrategy.class).to(EC2GetNodeMetadataStrategy.class);
  bind(RebootNodeStrategy.class).to(EC2RebootNodeStrategy.class);
  bind(DestroyNodeStrategy.class).to(EC2DestroyNodeStrategy.class);
  bind(new TypeLiteral<Function<RunningInstance,Map<String,String>>>(){
  }
).annotatedWith(Names.named("volumeMapping")).to(RunningInstanceToStorageMappingUnix.class).in(Scopes.SINGLETON);
}
