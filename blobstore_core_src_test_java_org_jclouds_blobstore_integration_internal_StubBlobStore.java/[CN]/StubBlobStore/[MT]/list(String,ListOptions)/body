{
  final ListOptions options=(optionsList.length == 0) ? new ListOptions() : optionsList[0];
  return new FutureBase<BoundedSortedSet<ResourceMetadata>>(){
    public BoundedSortedSet<ResourceMetadata> get() throws InterruptedException, ExecutionException {
      final Map<String,Blob> realContents=getContainerToBlobs().get(name);
      if (realContents == null)       throw new ContainerNotFoundException(name);
      SortedSet<ResourceMetadata> contents=Sets.newTreeSet(Iterables.transform(realContents.keySet(),new Function<String,ResourceMetadata>(){
        public ResourceMetadata apply(        String key){
          return copy(realContents.get(key).getMetadata());
        }
      }
));
      if (options.getMarker() != null) {
        final String finalMarker=options.getMarker();
        ResourceMetadata lastMarkerMetadata=Iterables.find(contents,new Predicate<ResourceMetadata>(){
          public boolean apply(          ResourceMetadata metadata){
            return metadata.getName().equals(finalMarker);
          }
        }
);
        contents=contents.tailSet(lastMarkerMetadata);
        contents.remove(lastMarkerMetadata);
      }
      final String prefix=options.getPath();
      if (prefix != null) {
        contents=Sets.newTreeSet(Iterables.filter(contents,new Predicate<ResourceMetadata>(){
          public boolean apply(          ResourceMetadata o){
            return (o != null && o.getName().startsWith(prefix));
          }
        }
));
      }
      int maxResults=contents.size();
      boolean truncated=false;
      String marker=null;
      if (options.getMaxResults() != null) {
        SortedSet<ResourceMetadata> contentsSlice=firstSliceOfSize(contents,options.getMaxResults().intValue());
        maxResults=options.getMaxResults();
        if (!contentsSlice.contains(contents.last())) {
          truncated=true;
          marker=contentsSlice.last().getName();
        }
 else {
          marker=null;
        }
        contents=contentsSlice;
      }
      final String delimiter=options.getRecursive() ? null : "/";
      if (delimiter != null) {
        SortedSet<String> commonPrefixes=null;
        Iterable<String> iterable=Iterables.transform(contents,new CommonPrefixes(prefix != null ? prefix : null,delimiter));
        commonPrefixes=iterable != null ? Sets.newTreeSet(iterable) : new TreeSet<String>();
        commonPrefixes.remove(CommonPrefixes.NO_PREFIX);
        contents=Sets.newTreeSet(Iterables.filter(contents,new DelimiterFilter(prefix != null ? prefix : null,delimiter)));
        Iterables.<ResourceMetadata>addAll(contents,Iterables.transform(commonPrefixes,new Function<String,ResourceMetadata>(){
          public ResourceMetadata apply(          String o){
            MutableResourceMetadata md=new MutableResourceMetadataImpl();
            md.setType(ResourceType.RELATIVE_PATH);
            md.setName(o);
            return md;
          }
        }
));
      }
      return new BoundedTreeSet<ResourceMetadata>(contents,prefix,marker,maxResults,truncated);
    }
  }
;
}
