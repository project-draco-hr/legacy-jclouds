{
  Invokable<?,?> method=method(GridLoadBalancerAsyncClient.class,"addLoadBalancer",String.class,IpPortPair.class,List.class,AddLoadBalancerOptions[].class);
  GeneratedHttpRequest request=processor.createRequest(method,ImmutableList.<Object>of("BalanceIt",IpPortPair.builder().ip(Ip.builder().ip("127.0.0.1").build()).port(80).build(),ImmutableList.of(IpPortPair.builder().ip(Ip.builder().ip("127.0.0.1").build()).port(8080).build(),IpPortPair.builder().ip(Ip.builder().ip("127.0.0.1").build()).port(9090).build()),new AddLoadBalancerOptions.Builder().create(LoadBalancerType.LEAST_CONNECTED,LoadBalancerPersistenceType.SSL_STICKY)));
  request=(GeneratedHttpRequest)request.getFilters().get(0).filter(request);
  assertRequestLineEquals(request,addLoadBalancer.getRequestLine());
  assertNonPayloadHeadersEqual(request,"");
  assertPayloadEquals(request,null,null,false);
  assertResponseParserClassEquals(method,request,ParseLoadBalancerFromJsonResponse.class);
  assertSaxResponseParserClassEquals(method,null);
  assertFallbackClassEquals(method,null);
  checkFilters(request);
}
