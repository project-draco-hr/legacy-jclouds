{
  FluentIterable<Network> networks=FluentIterable.from(org.getLinks()).filter(ReferencePredicates.<Link>typeEquals(ORG_NETWORK)).transform(new Function<Link,Network>(){
    @Override public Network apply(    Link in){
      return context.getApi().getNetworkApi().get(in.getHref());
    }
  }
);
  Optional<Network> optionalNetwork=tryFind(networks,new Predicate<Network>(){
    @Override public boolean apply(    Network input){
      if (input.getConfiguration().getFenceMode().equals(Network.FenceMode.BRIDGED)) {
        if (input.getTasks().size() == 0) {
          return true;
        }
      }
      return false;
    }
  }
);
  if (optionalNetwork.isPresent()) {
    Logger.CONSOLE.info("found network: %s",prettyNetwork.apply(optionalNetwork.get()));
  }
 else {
    Logger.CONSOLE.warn("no ready bridged networks present in org %s; networks: %s",org.getName(),Iterables.transform(networks,prettyNetwork));
  }
  return optionalNetwork;
}
