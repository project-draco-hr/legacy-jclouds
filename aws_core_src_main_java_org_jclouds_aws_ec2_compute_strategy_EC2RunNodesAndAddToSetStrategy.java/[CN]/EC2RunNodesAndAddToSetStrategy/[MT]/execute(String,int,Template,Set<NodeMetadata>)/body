{
  checkArgument(template.getSize() instanceof EC2Size,"unexpected image type. should be EC2Size, was: " + template.getSize().getClass());
  EC2Size ec2Size=EC2Size.class.cast(template.getSize());
  AvailabilityZone zone=template.getLocation().getScope() == LocationScope.ZONE ? AvailabilityZone.fromValue(template.getLocation().getId()) : null;
  String region=zone == null ? template.getLocation().getId() : template.getLocation().getParent();
  RegionTag regionTag=new RegionTag(region,tag);
  KeyPair keyPair=createNewKeyPair.apply(regionTag);
  credentialsMap.put(new RegionTag(region,keyPair.getKeyName()),keyPair);
  TemplateOptions options=template.getOptions();
  PortsRegionTag portsRegionTag=new PortsRegionTag(region,tag,options.getInboundPorts());
  if (!securityGroupMap.containsKey(portsRegionTag)) {
    securityGroupMap.put(portsRegionTag,createSecurityGroupIfNeeded.apply(portsRegionTag));
  }
  logger.debug(">> running %d instance region(%s) zone(%s) ami(%s) type(%s) keyPair(%s) securityGroup(%s)",count,region,zone,template.getImage().getId(),ec2Size.getInstanceType(),tag,tag);
  RunInstancesOptions instanceOptions=withKeyName(keyPair.getKeyName()).asType(ec2Size.getInstanceType()).withSecurityGroup(tag).withAdditionalInfo(tag);
  Reservation reservation=ec2Client.getInstanceServices().runInstancesInRegion(region,zone,template.getImage().getId(),1,count,instanceOptions);
  Iterable<String> ids=Iterables.transform(reservation,instanceToId);
  String idsString=Joiner.on(',').join(ids);
  logger.debug("<< started instances(%s)",idsString);
  Iterables.all(reservation,instanceStateRunning);
  logger.debug("<< running instances(%s)",idsString);
  Map<NodeMetadata,ListenableFuture<Void>> responses=Maps.newHashMap();
  for (  final NodeMetadata node : Iterables.transform(getInstances(region,ids),runningInstanceToNodeMetadata)) {
    responses.put(node,makeListenable(executor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        try {
          utils.runOptionsOnNode(node,template.getOptions());
          logger.debug("<< options applied node(%s)",node.getId());
          nodes.add(computeService.getNodeMetadata(node));
        }
 catch (        Exception e) {
          logger.error(e,"<< problem applying options to node(%s): ",node.getId(),Throwables.getRootCause(e).getMessage());
          if (!template.getOptions().shouldDestroyOnError())           nodes.add(computeService.getNodeMetadata(node));
        }
        return null;
      }
    }
),executor));
  }
  return responses;
}
