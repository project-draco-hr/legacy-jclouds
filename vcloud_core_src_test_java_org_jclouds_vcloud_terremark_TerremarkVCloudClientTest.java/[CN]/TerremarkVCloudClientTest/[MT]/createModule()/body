{
  return new AbstractModule(){
    @Override protected void configure(){
      bind(URI.class).annotatedWith(Catalog.class).toInstance(URI.create("http://catalog"));
      bind(String.class).annotatedWith(CatalogItemRoot.class).toInstance("http://catalogItem");
      bind(URI.class).annotatedWith(VDC.class).toInstance(URI.create("http://vdc"));
      bind(URI.class).annotatedWith(Network.class).toInstance(URI.create("http://network"));
      bind(SetVCloudTokenCookie.class).toInstance(new SetVCloudTokenCookie(new Provider<String>(){
        public String get(){
          return "token";
        }
      }
));
      bind(Logger.LoggerFactory.class).toInstance(new LoggerFactory(){
        public Logger getLogger(        String category){
          return Logger.NULL;
        }
      }
);
    }
    @SuppressWarnings("unused") @Singleton @Provides @Named("InstantiateVAppTemplateParams") String provideInstantiateVAppTemplateParams() throws IOException {
      InputStream is=getClass().getResourceAsStream("/terremark/InstantiateVAppTemplateParams.xml");
      return Utils.toStringAndClose(is);
    }
  }
;
}
