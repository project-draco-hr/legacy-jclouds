{
  Vdc vdc=vdcClient.getVdc(vdcURI);
  Set<Reference> networks=vdc.getAvailableNetworks();
  Optional<Reference> parentNetwork=Iterables.tryFind(networks,new Predicate<Reference>(){
    @Override public boolean apply(    Reference reference){
      return reference.getHref().equals(networkURI);
    }
  }
);
  if (!parentNetwork.isPresent()) {
    fail(String.format("Could not find network %s in vdc",networkURI.toASCIIString()));
  }
  NetworkConfiguration networkConfiguration=NetworkConfiguration.builder().parentNetwork(parentNetwork.get()).fenceMode("bridged").build();
  NetworkConfigSection networkConfigSection=NetworkConfigSection.builder().info("Configuration parameters for logical networks").networkConfigs(ImmutableSet.of(VAppNetworkConfiguration.builder().networkName("vAppNetwork").configuration(networkConfiguration).build())).build();
  InstantiationParams instantiationParams=InstantiationParams.builder().sections(ImmutableSet.of(networkConfigSection)).build();
  InstantiateVAppTemplateParams instantiate=InstantiateVAppTemplateParams.builder().name(name("test-vapp-")).notDeploy().notPowerOn().description("Test VApp").instantiationParams(instantiationParams).source(vAppTemplateURI).build();
  instantiatedVApp=vdcClient.instantiateVApp(vdcURI,instantiate);
  Task instantiationTask=Iterables.getFirst(instantiatedVApp.getTasks(),null);
  assertTaskSucceedsLong(instantiationTask);
  Checks.checkVApp(instantiatedVApp);
}
