{
  checkNotNull(modules,"modules");
  checkNotNull(overrides,"overrides");
  checkNotNull(apiMetadata,"api");
  final Properties mutable=new Properties();
  mutable.putAll(apiMetadata.getDefaultProperties());
  String providerId;
  if (providerMetadata != null) {
    mutable.putAll(providerMetadata.getDefaultProperties());
    mutable.setProperty(PROPERTY_PROVIDER,providerId=providerMetadata.getId());
    mutable.setProperty(PROPERTY_ISO3166_CODES,Joiner.on(',').join(providerMetadata.getIso3166Codes()));
  }
 else {
    mutable.setProperty(PROPERTY_PROVIDER,providerId=apiMetadata.getId());
  }
  mutable.putAll(checkNotNull(overrides,"overrides"));
  mutable.putAll(propertiesPrefixedWithJcloudsApiOrProviderId(System.getProperties(),providerId));
  mutable.setProperty(PROPERTY_ENDPOINT,searchPropertiesForProviderScopedProperty(mutable,providerId,"endpoint",endpoint));
  mutable.setProperty(PROPERTY_API,searchPropertiesForProviderScopedProperty(mutable,providerId,"api",apiMetadata.getName()));
  mutable.setProperty(PROPERTY_API_VERSION,searchPropertiesForProviderScopedProperty(mutable,providerId,"api-version",apiVersion));
  mutable.setProperty(PROPERTY_BUILD_VERSION,searchPropertiesForProviderScopedProperty(mutable,providerId,"build-version",buildVersion));
  mutable.setProperty(PROPERTY_IDENTITY,searchPropertiesForProviderScopedProperty(mutable,providerId,"identity",identity));
  try {
    mutable.setProperty(PROPERTY_CREDENTIAL,searchPropertiesForProviderScopedProperty(mutable,providerId,"credential",credential));
  }
 catch (  NoSuchElementException e) {
    if (apiMetadata.getCredentialName().isPresent())     throw e;
  }
  if (providerMetadata == null)   providerMetadata=AnonymousProviderMetadata.forApiWithEndpoint(apiMetadata,mutable.getProperty(PROPERTY_ENDPOINT));
  modules.add(Rocoto.expandVariables(new ConfigurationModule(){
    @Override protected void bindConfigurations(){
      bindProperties(mutable);
    }
  }
));
  addContextModule(modules);
  addClientModuleIfNotPresent(modules);
  addLoggingModuleIfNotPresent(modules);
  addHttpModuleIfNeededAndNotPresent(modules);
  ifHttpConfigureRestOtherwiseGuiceClientFactory(modules);
  addExecutorServiceIfNotPresent(modules);
  addCredentialStoreIfNotPresent(modules);
  modules.add(new LifeCycleModule());
  modules.add(new BindPropertiesToAnnotations());
  Injector returnVal=Guice.createInjector(Stage.PRODUCTION,modules);
  returnVal.getInstance(ExecutionList.class).execute();
  return returnVal;
}
