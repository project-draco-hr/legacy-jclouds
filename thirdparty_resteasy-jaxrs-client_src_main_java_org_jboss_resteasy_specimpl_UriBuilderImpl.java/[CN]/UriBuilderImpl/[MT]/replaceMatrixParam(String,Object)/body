{
  if (path == null)   return matrixParam(name,values);
  ArrayList<String> pathParams=new ArrayList<String>();
  boolean foundParam=false;
  Matcher matcher=PathHelper.URI_TEMPLATE_PATTERN.matcher(PathHelper.replaceEnclosedCurlyBraces(path));
  StringBuffer newSegment=new StringBuffer();
  while (matcher.find()) {
    foundParam=true;
    String group=matcher.group();
    pathParams.add(PathHelper.recoverEnclosedCurlyBraces(group));
    matcher.appendReplacement(newSegment,"_resteasy_uri_parameter");
  }
  matcher.appendTail(newSegment);
  path=newSegment.toString();
  int start=path.lastIndexOf('/');
  if (start < 0)   start=0;
  int matrixIndex=path.indexOf(';',start);
  if (matrixIndex > -1) {
    String matrixParams=path.substring(matrixIndex + 1);
    path=path.substring(0,matrixIndex);
    MultivaluedMapImpl<String,String> map=new MultivaluedMapImpl<String,String>();
    String[] params=matrixParams.split(";");
    for (    String param : params) {
      String[] namevalue=param.split("=");
      if (namevalue != null && namevalue.length > 0) {
        String theName=namevalue[0];
        String value="";
        if (namevalue.length > 1) {
          value=namevalue[1];
        }
        map.add(theName,value);
      }
    }
    map.remove(name);
    for (    String theName : map.keySet()) {
      List<String> vals=map.get(theName);
      for (      Object val : vals) {
        path+=";" + theName + "="+ val.toString();
      }
    }
  }
  matrixParam(name,values);
  if (foundParam) {
    matcher=PARAM_REPLACEMENT.matcher(path);
    newSegment=new StringBuffer();
    int i=0;
    while (matcher.find()) {
      matcher.appendReplacement(newSegment,pathParams.get(i++));
    }
    matcher.appendTail(newSegment);
    path=newSegment.toString();
  }
  return this;
}
