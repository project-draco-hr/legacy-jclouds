{
  if (future instanceof ListenableFutureAdapter<?>) {
    ListenableFutureAdapter<I> lf=(ListenableFutureAdapter<I>)future;
    if (lf.futureListener.executor.getClass().isAnnotationPresent(SingleThreaded.class))     return LazyListenableFutureFunctionAdapter.create(((ListenableFutureAdapter<I>)future).futureListener,function);
 else     return Futures.compose(lf,function,executorService);
  }
 else   if (executorService.getClass().isAnnotationPresent(SingleThreaded.class)) {
    return LazyListenableFutureFunctionAdapter.create(future,function,executorService);
  }
 else {
    return Futures.compose(makeListenable(future,executorService),function,executorService);
  }
}
