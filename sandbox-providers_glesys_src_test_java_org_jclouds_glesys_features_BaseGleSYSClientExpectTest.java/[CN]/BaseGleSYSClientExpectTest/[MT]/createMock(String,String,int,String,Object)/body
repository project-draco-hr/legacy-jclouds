{
  List<Object> argValues=new ArrayList<Object>();
  Multimap<String,String> map=LinkedHashMultimap.create();
  for (  Object arg : args) {
    if (arg instanceof BaseHttpRequestOptions) {
      for (      Map.Entry<String,String> httpEntry : ((BaseHttpRequestOptions)arg).buildFormParameters().entries()) {
        map.put(httpEntry.getKey(),httpEntry.getValue());
      }
      argValues.add(arg);
    }
 else {
      Map.Entry<String,String> entry=(Map.Entry<String,String>)arg;
      map.put(entry.getKey(),entry.getValue());
      argValues.add(entry.getValue());
    }
  }
  HttpRequest.Builder httpRequestBuilder=HttpRequest.builder().method(httpMethod).endpoint(URI.create("https://api.glesys.com/" + remoteServicePrefix + "/"+ remoteCall+ "/format/json"));
  if (expectedResponse == null) {
    httpRequestBuilder.headers(ImmutableMultimap.<String,String>builder().put("Authorization","Basic aWRlbnRpdHk6Y3JlZGVudGlhbA==").build());
  }
 else {
    httpRequestBuilder.headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("Authorization","Basic aWRlbnRpdHk6Y3JlZGVudGlhbA==").build());
  }
  if (!map.isEmpty()) {
    httpRequestBuilder.payload(newUrlEncodedFormPayload(ImmutableMultimap.<String,String>builder().putAll(map).build()));
  }
  HttpResponse.Builder responseBuilder=HttpResponse.builder().statusCode(returnCode);
  if (expectedResponse != null) {
    if (returnCode < 300) {
      responseBuilder.payload(payloadFromResource(expectedResponse));
    }
 else {
      responseBuilder.payload(new StringPayload(expectedResponse));
    }
  }
  return getClient(requestSendsResponse(httpRequestBuilder.build(),responseBuilder.build()));
}
