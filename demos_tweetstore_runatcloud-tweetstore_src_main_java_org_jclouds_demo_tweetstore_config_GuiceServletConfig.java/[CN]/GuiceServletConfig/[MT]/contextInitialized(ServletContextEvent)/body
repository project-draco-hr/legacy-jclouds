{
  BlobStoreContextFactory blobStoreContextFactory=new BlobStoreContextFactory();
  Properties props=loadJCloudsProperties(servletContextEvent);
  Set<Module> modules=ImmutableSet.<Module>of();
  try {
    Configuration twitterConf=new ConfigurationBuilder().setOAuthConsumerKey(props.getProperty(PROPERTY_TWITTER_CONSUMER_KEY)).setOAuthConsumerSecret(props.getProperty(PROPERTY_TWITTER_CONSUMER_SECRET)).setOAuthAccessToken(props.getProperty(PROPERTY_TWITTER_ACCESSTOKEN)).setOAuthAccessTokenSecret(props.getProperty(PROPERTY_TWITTER_ACCESSTOKEN_SECRET)).build();
    twitterClient=new TwitterFactory(twitterConf).getInstance();
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException("properties for twitter not configured properly in " + props.toString(),e);
  }
  container=checkNotNull(props.getProperty(PROPERTY_TWEETSTORE_CONTAINER),PROPERTY_TWEETSTORE_CONTAINER);
  providerTypeToBlobStoreMap=Maps.newHashMap();
  for (  String hint : getBlobstoreContexts(props)) {
    providerTypeToBlobStoreMap.put(hint,blobStoreContextFactory.createContext(hint,modules,props));
  }
  queue=TaskQueue.builder().name("twitter").period(MINUTES).build();
  Factory taskFactory=HttpRequestTask.factory(props,"twitter");
  for (  String name : providerTypeToBlobStoreMap.keySet()) {
    queue.add(taskFactory.create(HttpRequest.builder().endpoint(withUrl(servletContextEvent.getServletContext(),"/store/do")).headers(ImmutableMultimap.of("context",name)).method("GET").build()));
  }
  super.contextInitialized(servletContextEvent);
}
