{
  setupCredentials();
  computeContext=new ComputeServiceContextFactory().createContext(provider,ImmutableSet.<Module>of(new Log4JLoggingModule(),new SshjSshClientModule()),setupProperties());
  context=computeContext.getProviderSpecificContext();
  client=context.getApi();
  user=verifyCurrentUserIsOfType(context,Account.Type.USER);
  domainAdminEnabled=setupAdminProperties() != null;
  if (domainAdminEnabled) {
    domainAdminComputeContext=new ComputeServiceContextFactory().createContext(provider,ImmutableSet.<Module>of(new Log4JLoggingModule(),new SshjSshClientModule()),setupAdminProperties());
    domainAdminContext=domainAdminComputeContext.getProviderSpecificContext();
    domainAdminClient=domainAdminContext.getApi();
    domainAdminUser=verifyCurrentUserIsOfType(domainAdminContext,Account.Type.DOMAIN_ADMIN);
  }
  injector=Guice.createInjector(new SshjSshClientModule(),new Log4JLoggingModule());
  sshFactory=injector.getInstance(SshClient.Factory.class);
  socketTester=new RetryablePredicate<IPSocket>(new InetSocketAddressConnect(),180,1,1,TimeUnit.SECONDS);
  injector.injectMembers(socketTester);
  jobComplete=new RetryablePredicate<Long>(new JobComplete(client),1200,1,5,TimeUnit.SECONDS);
  injector.injectMembers(jobComplete);
  virtualMachineRunning=new RetryablePredicate<VirtualMachine>(new VirtualMachineRunning(client),600,5,5,TimeUnit.SECONDS);
  injector.injectMembers(virtualMachineRunning);
  virtualMachineDestroyed=new RetryablePredicate<VirtualMachine>(new VirtualMachineDestroyed(client),600,5,5,TimeUnit.SECONDS);
  injector.injectMembers(virtualMachineDestroyed);
  reuseOrAssociate=new ReuseOrAssociateNewPublicIPAddress(client,jobComplete);
  injector.injectMembers(reuseOrAssociate);
}
