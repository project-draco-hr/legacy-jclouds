{
  ensureWebServerIsRunning();
  final IMachine vm=createAndRegisterMachineFromIsoIfNotAlreadyExists.apply(vmSpec);
  String vmName=vmSpec.getVmName();
  ensureMachineHasMemory(vmName,vmSpec.getMemory());
  Set<StorageController> controllers=vmSpec.getControllers();
  if (controllers.isEmpty()) {
    throw new IllegalStateException(missingIDEControllersMessage(vmSpec));
  }
  StorageController controller=controllers.iterator().next();
  ensureMachineHasIDEControllerNamed(vmName,controller);
  setupHardDisksForController(vmName,controller);
  setupDvdsForController(vmSpec,vmName,controller);
  Map<Long,NatAdapter> natNetworkAdapters=vmSpec.getNatNetworkAdapters();
  for (  Map.Entry<Long,NatAdapter> natAdapterAndSlot : natNetworkAdapters.entrySet()) {
    long slotId=natAdapterAndSlot.getKey();
    NatAdapter natAdapter=natAdapterAndSlot.getValue();
    ensureNATNetworkingIsAppliedToMachine(vmName,slotId,natAdapter);
  }
  ensureMachineIsLaunched(vmName);
  final String installKeySequence=System.getProperty(VIRTUALBOX_INSTALLATION_KEY_SEQUENCE,defaultInstallSequence(vmName));
  sendKeyboardSequence(installKeySequence,vmName);
  boolean sshDeamonIsRunning=false;
  while (!sshDeamonIsRunning) {
    try {
      if (runScriptOnNode(guestId,"id",wrapInInitScript(false)).getExitCode() == 0) {
        logger.debug("Got response from ssh daemon.");
        sshDeamonIsRunning=true;
      }
    }
 catch (    SshException e) {
      logger.debug("No response from ssh daemon...");
    }
  }
  logger.debug("Installation of image complete. Powering down...");
  lockSessionOnMachineAndApply(manager,Shared,vmName,new Function<ISession,Void>(){
    @Override public Void apply(    ISession session){
      IProgress powerDownProgress=session.getConsole().powerDown();
      powerDownProgress.waitForCompletion(-1);
      return null;
    }
  }
);
  return vm;
}
