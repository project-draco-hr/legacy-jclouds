{
  URL url=request.getEndpoint().toURL();
  HttpURLConnection connection;
  if (systemProxies) {
    System.setProperty("java.net.useSystemProxies","true");
    Iterable<Proxy> proxies=ProxySelector.getDefault().select(request.getEndpoint());
    Proxy proxy=Iterables.getLast(proxies);
    connection=(HttpURLConnection)url.openConnection(proxy);
  }
 else   if (proxyAddress != null) {
    SocketAddress proxySocketAddress=new InetSocketAddress(InetAddress.getByName(proxyAddress),proxyPort);
    Proxy proxy=new Proxy(Proxy.Type.HTTP,proxySocketAddress);
    connection=(HttpURLConnection)url.openConnection(proxy);
  }
 else {
    connection=(HttpURLConnection)url.openConnection();
  }
  if (relaxHostname && connection instanceof HttpsURLConnection) {
    HttpsURLConnection sslCon=(HttpsURLConnection)connection;
    sslCon.setHostnameVerifier(new LogToMapHostnameVerifier());
  }
  connection.setDoOutput(true);
  connection.setAllowUserInteraction(false);
  connection.setInstanceFollowRedirects(false);
  connection.setRequestMethod(request.getMethod().toString());
  for (  String header : request.getHeaders().keySet()) {
    for (    String value : request.getHeaders().get(header)) {
      connection.setRequestProperty(header,value);
      if ("Transfer-Encoding".equals(header) && "chunked".equals(value)) {
        connection.setChunkedStreamingMode(8192);
      }
    }
  }
  connection.setRequestProperty(HttpHeaders.HOST,request.getEndpoint().getHost());
  connection.setRequestProperty(HttpHeaders.USER_AGENT,USER_AGENT);
  if (request.getPayload() != null) {
    OutputStream out=connection.getOutputStream();
    try {
      request.getPayload().writeTo(out);
    }
  finally {
      Closeables.closeQuietly(out);
    }
  }
 else {
    connection.setRequestProperty(HttpHeaders.CONTENT_LENGTH,"0");
  }
  return connection;
}
