{
  boolean chunked="chunked".equals(request.getFirstHeaderOrNull("Transfer-Encoding"));
  URL url=request.getEndpoint().toURL();
  HttpURLConnection connection;
  if (utils.useSystemProxies()) {
    System.setProperty("java.net.useSystemProxies","true");
    Iterable<Proxy> proxies=ProxySelector.getDefault().select(request.getEndpoint());
    Proxy proxy=getLast(proxies);
    connection=(HttpURLConnection)url.openConnection(proxy);
  }
 else   if (utils.getProxyHost() != null) {
    SocketAddress addr=new InetSocketAddress(utils.getProxyHost(),utils.getProxyPort());
    Proxy proxy=new Proxy(Proxy.Type.HTTP,addr);
    Authenticator authenticator=new Authenticator(){
      public PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(utils.getProxyUser(),utils.getProxyPassword().toCharArray());
      }
    }
;
    Authenticator.setDefault(authenticator);
    connection=(HttpURLConnection)url.openConnection(proxy);
  }
 else {
    connection=(HttpURLConnection)url.openConnection();
  }
  if (connection instanceof HttpsURLConnection) {
    HttpsURLConnection sslCon=(HttpsURLConnection)connection;
    if (utils.relaxHostname())     sslCon.setHostnameVerifier(verifier);
    if (sslContextSupplier != null) {
      sslCon.setSSLSocketFactory(sslContextSupplier.get().getSocketFactory());
    }
 else     if (utils.trustAllCerts()) {
      sslCon.setSSLSocketFactory(untrustedSSLContextProvider.get().getSocketFactory());
    }
  }
  connection.setConnectTimeout(utils.getConnectionTimeout());
  connection.setReadTimeout(utils.getSocketOpenTimeout());
  connection.setDoOutput(true);
  connection.setAllowUserInteraction(false);
  connection.setInstanceFollowRedirects(false);
  try {
    connection.setRequestMethod(request.getMethod());
  }
 catch (  ProtocolException e) {
    try {
      methodField.set(connection,request.getMethod());
    }
 catch (    Exception e1) {
      logger.error(e,"could not set request method: ",request.getMethod());
      propagate(e1);
    }
  }
  for (  Map.Entry<String,String> entry : request.getHeaders().entries()) {
    connection.setRequestProperty(entry.getKey(),entry.getValue());
  }
  String host=request.getEndpoint().getHost();
  if (request.getEndpoint().getPort() != -1) {
    host+=":" + request.getEndpoint().getPort();
  }
  connection.setRequestProperty(HttpHeaders.HOST,host);
  if (connection.getRequestProperty(HttpHeaders.USER_AGENT) == null) {
    connection.setRequestProperty(HttpHeaders.USER_AGENT,USER_AGENT);
  }
  if (request.getPayload() != null) {
    MutableContentMetadata md=request.getPayload().getContentMetadata();
    for (    Map.Entry<String,String> entry : contentMetadataCodec.toHeaders(md).entries()) {
      connection.setRequestProperty(entry.getKey(),entry.getValue());
    }
    if (chunked) {
      connection.setChunkedStreamingMode(8196);
    }
 else {
      Long length=checkNotNull(md.getContentLength(),"payload.getContentLength");
      connection.setRequestProperty(HttpHeaders.CONTENT_LENGTH,length.toString());
      checkArgument(length < Integer.MAX_VALUE,"JDK 1.6 does not support >2GB chunks. Use chunked encoding, if possible.");
      connection.setFixedLengthStreamingMode(length.intValue());
      if (length.intValue() > 0) {
        connection.setRequestProperty("Expect","100-continue");
      }
    }
    CountingOutputStream out=new CountingOutputStream(connection.getOutputStream());
    try {
      request.getPayload().writeTo(out);
    }
 catch (    IOException e) {
      throw new RuntimeException(String.format("error after writing %d/%s bytes to %s",out.getCount(),md.getContentLength(),request.getRequestLine()),e);
    }
  }
 else {
    connection.setRequestProperty(HttpHeaders.CONTENT_LENGTH,"0");
    if (connection.getRequestMethod().equals("POST") || connection.getRequestMethod().equals("PUT"))     connection.setFixedLengthStreamingMode(0);
  }
  return connection;
}
