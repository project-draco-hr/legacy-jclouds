{
  ListMetricsResponse response;
  String testNamespace=Namespaces.EC2;
  String testMetricName=EC2Constants.MetricName.CPU_UTILIZATION;
  String testDimensionName=EC2Constants.Dimension.INSTANCE_TYPE;
  String testDimensionValue="t1.micro";
  response=client.listMetrics(null,ListMetricsOptions.builder().build());
  performDefaultMetricsTests(response);
  if (response.getMetrics().size() > 0) {
    Metric metric=response.getMetrics().iterator().next();
    testMetricName=metric.getMetricName();
    testNamespace=metric.getNamespace();
    if (metric.getDimensions().size() > 0) {
      Dimension dimension=metric.getDimensions().iterator().next();
      testDimensionName=dimension.getName();
      testDimensionValue=dimension.getValue();
    }
    if (testDimensionName == null) {
      for (      Metric metric1 : response.getMetrics()) {
        Set<Dimension> dimensions=metric1.getDimensions();
        if (dimensions.size() > 0) {
          Dimension dimension=metric.getDimensions().iterator().next();
          testDimensionName=dimension.getName();
          testDimensionValue=dimension.getValue();
          break;
        }
      }
    }
  }
  response=client.listMetrics(null,ListMetricsOptions.builder().nextToken(response.getNextToken()).build());
  performDefaultMetricsTests(response);
  response=client.listMetrics(null,ListMetricsOptions.builder().namespace(testNamespace).build());
  performDefaultMetricsTests(response);
  for (  Metric metric : response.getMetrics()) {
    checkArgument(metric.getNamespace().equals(testNamespace),"All metrics should have the " + testNamespace + " Namespace.");
  }
  response=client.listMetrics(null,ListMetricsOptions.builder().metricName(testMetricName).build());
  performDefaultMetricsTests(response);
  for (  Metric metric : response.getMetrics()) {
    checkArgument(metric.getMetricName().equals(testMetricName),"All metrics should have the " + testMetricName + " MetricName.");
  }
  if (testDimensionName != null) {
    Dimension testDimension=new Dimension(testDimensionName,testDimensionValue);
    response=client.listMetrics(null,ListMetricsOptions.builder().dimension(testDimension).build());
    performDefaultMetricsTests(response);
    for (    Metric metric : response.getMetrics()) {
      Set<Dimension> dimensions=metric.getDimensions();
      checkArgument(dimensions.size() == 1,"There should only be one Dimension.");
      Dimension dimension=dimensions.iterator().next();
      checkArgument(dimension.equals(testDimension),"The retrieved Dimension and test Dimension should be equal.");
    }
  }
}
