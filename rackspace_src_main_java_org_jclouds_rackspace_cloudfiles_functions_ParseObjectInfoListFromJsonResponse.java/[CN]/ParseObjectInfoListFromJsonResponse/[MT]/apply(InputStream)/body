{
  checkState(request != null,"request should be initialized at this point");
  checkState(request.getArgs() != null,"request.getArgs() should be initialized at this point");
  checkArgument(request.getArgs().get(0) instanceof String,"arg[0] must be a container name");
  checkArgument(request.getArgs().get(1) instanceof ListContainerOptions[],"arg[1] must be an array of ListContainerOptions");
  ListContainerOptions[] optionsList=(ListContainerOptions[])request.getArgs().get(1);
  ListContainerOptions options=optionsList.length > 0 ? optionsList[0] : ListContainerOptions.NONE;
  Type listType=new TypeToken<SortedSet<ObjectInfoImpl>>(){
  }
.getType();
  try {
    SortedSet<ObjectInfoImpl> list=apply(stream,listType);
    SortedSet<ObjectInfo> returnVal=Sets.newTreeSet(Iterables.transform(list,new Function<ObjectInfoImpl,ObjectInfo>(){
      public ObjectInfo apply(      ObjectInfoImpl from){
        return from;
      }
    }
));
    boolean truncated=options.getMaxResults() == returnVal.size();
    String marker=truncated ? returnVal.last().getName() : null;
    return new PageSetImpl<ObjectInfo>(returnVal,marker);
  }
 catch (  IOException e) {
    throw new RuntimeException("problem reading response from request: " + request,e);
  }
}
