{
  AWSS3BlobStore ablobStore=createMock(AWSS3BlobStore.class);
  PayloadSlicer slicer=createMock(PayloadSlicer.class);
  String container="container";
  String key="mpu-test";
  Blob blob=createMock(Blob.class);
  MutableBlobMetadata blobMeta=createMock(MutableBlobMetadata.class);
  Payload payload=createMock(Payload.class);
  MutableContentMetadata contentMeta=createMock(MutableContentMetadata.class);
  BlobStoreContext context=createMock(BlobStoreContext.class);
  @SuppressWarnings("unchecked") RestContext<Object,Object> psc=createMock(RestContextImpl.class);
  AWSS3Client client=createMock(AWSS3Client.class);
  ObjectMetadata ometa=createMock(ObjectMetadata.class);
  String uploadId="uploadId";
  long chunkSize=MultipartUploadSlicingAlgorithm.DEFAULT_PART_SIZE;
  long remaining=100L;
  SortedMap<Integer,String> etags=Maps.newTreeMap();
  etags.put(new Integer(1),"eTag1");
  etags.put(new Integer(2),"eTag2");
  expect(blob.getMetadata()).andReturn(blobMeta).atLeastOnce();
  expect(blobMeta.getName()).andReturn(key).atLeastOnce();
  expect(blob.getPayload()).andReturn(payload).atLeastOnce();
  expect(payload.getContentMetadata()).andReturn(contentMeta).atLeastOnce();
  expect(contentMeta.getContentLength()).andReturn(new Long(chunkSize + remaining));
  expect(ablobStore.getContext()).andReturn(context).atLeastOnce();
  expect(context.getProviderSpecificContext()).andReturn(psc).atLeastOnce();
  expect(psc.getApi()).andReturn(client).atLeastOnce();
  expect(client.initiateMultipartUpload(container,new ObjectMetadataBuilder().key(key).build())).andReturn("uploadId").atLeastOnce();
  expect(slicer.slice(payload,0,chunkSize)).andReturn(payload).atLeastOnce();
  expect(client.uploadPart(container,key,1,uploadId,payload)).andReturn("eTag1").atLeastOnce();
  expect(slicer.slice(payload,chunkSize,remaining)).andReturn(payload).atLeastOnce();
  expect(client.uploadPart(container,key,2,uploadId,payload)).andThrow(new RuntimeException(new TimeoutException()));
  client.abortMultipartUpload(container,key,uploadId);
  expectLastCall().atLeastOnce();
  replay(ablobStore);
  replay(slicer);
  replay(blob);
  replay(blobMeta);
  replay(payload);
  replay(contentMeta);
  replay(context);
  replay(psc);
  replay(client);
  replay(ometa);
  SequentialMultipartUploadStrategy strategy=new SequentialMultipartUploadStrategy(ablobStore,slicer);
  try {
    strategy.execute(container,blob,PutOptions.NONE);
    fail("Should throw RuntimeException with TimeoutException cause!");
  }
 catch (  RuntimeException rtex) {
    TimeoutException timeout=Throwables2.getFirstThrowableOfType(rtex,TimeoutException.class);
    if (timeout == null) {
      throw rtex;
    }
  }
  verify(ablobStore);
  verify(slicer);
  verify(blob);
  verify(blobMeta);
  verify(payload);
  verify(contentMeta);
  verify(context);
  verify(psc);
  verify(client);
  verify(ometa);
}
