{
  builder.providerId(instance.getId());
  builder.id(instance.getRegion() + "/" + instance.getId());
  String group=getGroupForInstance(instance);
  builder.group(group);
  if (instance.getPrivateDnsName() != null)   builder.hostname(instance.getPrivateDnsName().replaceAll("\\..*",""));
  addCredentialsForInstance(builder,instance);
  builder.state(instanceToNodeState.get(instance.getInstanceState()));
  Builder<String> addressesBuilder=ImmutableSet.<String>builder();
  if (Strings.emptyToNull(instance.getIpAddress()) != null)   addressesBuilder.add(instance.getIpAddress());
  if (Strings.emptyToNull(instance.getPrivateIpAddress()) != null)   addressesBuilder.add(instance.getPrivateIpAddress());
  Set<String> addresses=addressesBuilder.build();
  builder.publicAddresses(filter(addresses,not(IsPrivateIPAddress.INSTANCE)));
  builder.privateAddresses(filter(addresses,IsPrivateIPAddress.INSTANCE));
  builder.hardware(parseHardware(instance));
  Location location=getLocationForAvailabilityZoneOrRegion(instance);
  builder.location(location);
  builder.imageId(instance.getRegion() + "/" + instance.getImageId());
  RegionAndName regionAndName=new RegionAndName(instance.getRegion(),instance.getImageId());
  try {
    Image image=imageMap.get().getUnchecked(regionAndName);
    if (image != null)     builder.operatingSystem(image.getOperatingSystem());
  }
 catch (  NullPointerException e) {
    logger.debug("image not found for %s: %s",regionAndName,e);
  }
catch (  UncheckedExecutionException e) {
    logger.debug("error getting image for %s: %s",regionAndName,e);
  }
  return builder;
}
