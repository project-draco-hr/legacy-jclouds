{
  int remaining=source.remaining();
  int remainder=remaining % 3;
  int olimit=(remaining + (remainder == 0 ? 0 : 3 - remainder)) / 3 * 4;
  olimit+=(wrap ? olimit / 76 * 2 + 2 : 0);
  olimit-=url && remainder > 0 ? 3 - remainder : 0;
  char[] target=new char[olimit];
  int opos=0;
  int last=0;
  int state=0;
  int count=0;
  final byte[] ENCODING_TABLE=!url ? FlexBase64.ENCODING_TABLE : FlexBase64.URL_ENCODING_TABLE;
  while (remaining > 0) {
    int b=source.get() & 0xFF;
    target[opos++]=(char)ENCODING_TABLE[b >>> 2];
    last=(b & 0x3) << 4;
    if (--remaining <= 0) {
      state=1;
      break;
    }
    b=source.get() & 0xFF;
    target[opos++]=(char)ENCODING_TABLE[last | (b >>> 4)];
    last=(b & 0x0F) << 2;
    if (--remaining <= 0) {
      state=2;
      break;
    }
    b=source.get() & 0xFF;
    target[opos++]=(char)ENCODING_TABLE[last | (b >>> 6)];
    target[opos++]=(char)ENCODING_TABLE[b & 0x3F];
    remaining--;
    if (wrap) {
      count+=4;
      if (count >= 76) {
        count=0;
        target[opos++]=0x0D;
        target[opos++]=0x0A;
      }
    }
  }
  complete(target,opos,state,last,wrap,url);
  try {
    if (STRING_CONSTRUCTOR != null) {
      return STRING_CONSTRUCTOR.newInstance(target,Boolean.TRUE);
    }
  }
 catch (  Exception e) {
  }
  return new String(target);
}
