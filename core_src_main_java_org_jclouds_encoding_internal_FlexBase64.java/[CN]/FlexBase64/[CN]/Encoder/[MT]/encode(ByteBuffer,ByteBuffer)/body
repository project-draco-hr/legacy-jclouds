{
  if (target == null)   throw new IllegalStateException();
  int last=this.last;
  int state=this.state;
  boolean wrap=this.wrap;
  int count=this.count;
  final byte[] ENCODING_TABLE=FlexBase64.ENCODING_TABLE;
  int remaining=source.remaining();
  while (remaining > 0) {
    int require=4 - state;
    require=wrap && (count >= 72) ? require + 2 : require;
    if (target.remaining() < require) {
      break;
    }
    int b=source.get() & 0xFF;
    if (state == 0) {
      target.put(ENCODING_TABLE[b >>> 2]);
      last=(b & 0x3) << 4;
      state++;
      if (--remaining <= 0) {
        break;
      }
      b=source.get() & 0xFF;
    }
    if (state == 1) {
      target.put(ENCODING_TABLE[last | (b >>> 4)]);
      last=(b & 0x0F) << 2;
      state++;
      if (--remaining <= 0) {
        break;
      }
      b=source.get() & 0xFF;
    }
    if (state == 2) {
      target.put(ENCODING_TABLE[last | (b >>> 6)]);
      target.put(ENCODING_TABLE[b & 0x3F]);
      last=state=0;
      remaining--;
    }
    if (wrap) {
      count+=4;
      if (count >= 76) {
        count=0;
        target.putShort((short)0x0D0A);
      }
    }
  }
  this.count=count;
  this.last=last;
  this.state=state;
  this.lastPos=source.position();
}
