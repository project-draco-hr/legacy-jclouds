{
  Properties props=loadJCloudsProperties();
  logger.trace("About to initialize members.");
  twitterClient=TwitterContextFactory.createContext(props,new GoogleAppEngineConfigurationModule()).getApi();
  container=checkNotNull(props.getProperty(PROPERTY_TWEETSTORE_CONTAINER),PROPERTY_TWEETSTORE_CONTAINER);
  ImmutableList<String> contextBuilderClassNames=ImmutableList.<String>of(checkNotNull(props.getProperty(PROPERTY_BLOBSTORE_CONTEXTBUILDERS),PROPERTY_BLOBSTORE_CONTEXTBUILDERS).split(","));
  providerTypeToBlobStoreMap=Maps.newHashMap();
  for (  String className : contextBuilderClassNames) {
    Class<BlobStoreContextBuilder<?,?>> builderClass;
    Constructor<BlobStoreContextBuilder<?,?>> constructor;
    String name;
    BlobStoreContext<?,?> context;
    try {
      builderClass=(Class<BlobStoreContextBuilder<?,?>>)Class.forName(className);
      name=builderClass.getSimpleName().replaceAll("BlobStoreContextBuilder","");
      constructor=builderClass.getConstructor(Properties.class);
      context=constructor.newInstance(props).withModules(new GoogleAppEngineConfigurationModule()).buildContext();
    }
 catch (    Exception e) {
      throw new RuntimeException("error instantiating " + className,e);
    }
    providerTypeToBlobStoreMap.put(name,context);
  }
  Queue queue=QueueFactory.getQueue("twitter");
  for (  String name : providerTypeToBlobStoreMap.keySet()) {
    queue.add(url("/store/do").header("context",name).method(Method.GET));
  }
  logger.trace("Members initialized. TwitterClient: '%s', container: '%s', provider types: '%s'",twitterClient,container,providerTypeToBlobStoreMap.keySet());
}
