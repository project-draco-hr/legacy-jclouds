{
  return Suppliers.memoize(Suppliers.compose(new Function<ComputeService,Template>(){
    @Override public Template apply(    ComputeService input){
      try {
        return input.templateBuilder().build();
      }
 catch (      IllegalStateException e) {
        Set<? extends NodeMetadata> nodes=Sets.filter(input.listNodesDetailsMatching(NodePredicates.all()),NodePredicates.inGroup(poolGroupPrefix));
        checkState(!nodes.isEmpty(),"service provided no template and no node was in this nodepool's group.");
        final NodeMetadata node=Iterables.get(nodes,0);
        final Image image=new ImageBuilder().id(node.getId()).location(node.getLocation()).operatingSystem(node.getOperatingSystem()).status(Status.AVAILABLE).description("physical node").build();
        final Hardware hardware=new HardwareBuilder().id(node.getId()).build();
        return new Template(){
          @Override public Image getImage(){
            return image;
          }
          @Override public Hardware getHardware(){
            return hardware;
          }
          @Override public Location getLocation(){
            return node.getLocation();
          }
          @Override public TemplateOptions getOptions(){
            return new TemplateOptions();
          }
          @Override public Template clone(){
            return this;
          }
        }
;
      }
    }
  }
,compute));
}
