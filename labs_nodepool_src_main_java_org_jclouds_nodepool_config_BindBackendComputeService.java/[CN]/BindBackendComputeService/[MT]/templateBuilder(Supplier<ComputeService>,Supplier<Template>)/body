{
  try {
    compute.get().templateBuilder().build();
    return compute.get().templateBuilder();
  }
 catch (  Exception e) {
    return new TemplateBuilder(){
      @Override public TemplateBuilder smallest(){
        return this;
      }
      @Override public TemplateBuilder osVersionMatches(      String osVersionRegex){
        return this;
      }
      @Override public TemplateBuilder osNameMatches(      String osNameRegex){
        return this;
      }
      @Override public TemplateBuilder osFamily(      OsFamily os){
        return this;
      }
      @Override public TemplateBuilder osDescriptionMatches(      String osDescriptionRegex){
        return this;
      }
      @Override public TemplateBuilder osArchMatches(      String architecture){
        return this;
      }
      @Override public TemplateBuilder os64Bit(      boolean is64bit){
        return this;
      }
      @Override public TemplateBuilder options(      TemplateOptions options){
        return this;
      }
      @Override public TemplateBuilder minRam(      int megabytes){
        return this;
      }
      @Override public TemplateBuilder minDisk(      double gigabytes){
        return this;
      }
      @Override public TemplateBuilder minCores(      double minCores){
        return this;
      }
      @Override public TemplateBuilder locationId(      String locationId){
        return this;
      }
      @Override public TemplateBuilder imageVersionMatches(      String imageVersionRegex){
        return this;
      }
      @Override public TemplateBuilder imageNameMatches(      String imageNameRegex){
        return this;
      }
      @Override public TemplateBuilder imageMatches(      Predicate<Image> condition){
        return this;
      }
      @Override public TemplateBuilder imageId(      String imageId){
        return this;
      }
      @Override public TemplateBuilder imageDescriptionMatches(      String imageDescriptionRegex){
        return this;
      }
      @Override public TemplateBuilder hypervisorMatches(      String hypervisorRegex){
        return this;
      }
      @Override public TemplateBuilder hardwareId(      String hardwareId){
        return this;
      }
      @Override public TemplateBuilder fromTemplate(      Template image){
        return this;
      }
      @Override public TemplateBuilder fromImage(      Image image){
        return this;
      }
      @Override public TemplateBuilder fromHardware(      Hardware hardware){
        return this;
      }
      @Override @Beta public TemplateBuilder from(      String spec){
        return this;
      }
      @Override @Beta public TemplateBuilder from(      TemplateBuilderSpec spec){
        return this;
      }
      @Override public TemplateBuilder fastest(){
        return this;
      }
      @Override public Template build(){
        return template.get();
      }
      @Override public TemplateBuilder biggest(){
        return this;
      }
      @Override public TemplateBuilder any(){
        return this;
      }
    }
;
  }
}
