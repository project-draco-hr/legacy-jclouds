{
  VApp remove=instantiateVApp();
  DeployVAppParams params=DeployVAppParams.builder().deploymentLeaseSeconds((int)TimeUnit.SECONDS.convert(1L,TimeUnit.HOURS)).notForceCustomization().powerOn().build();
  Task deployVApp=vAppApi.deploy(remove.getId(),params);
  assertTaskSucceedsLong(deployVApp);
  remove=vAppApi.get(remove.getId());
  List<Vm> vms=remove.getChildren().getVms();
  Vm temp=Iterables.get(vms,0);
  if (vms.size() == 1) {
    UndeployVAppParams undeployParams=UndeployVAppParams.builder().build();
    Task shutdownVapp=vAppApi.undeploy(remove.getId(),undeployParams);
    assertTaskSucceedsLong(shutdownVapp);
  }
 else {
    powerOffVm(temp.getId());
  }
  Task removeVm=vmApi.remove(temp.getId());
  assertTrue(retryTaskSuccess.apply(removeVm),String.format(TASK_COMPLETE_TIMELY,"removeVm"));
  Vm removed=vmApi.get(temp.getId());
  assertNull(removed,"The Vm " + temp.getName() + " should have been removed");
}
