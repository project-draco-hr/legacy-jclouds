{
  Map<ServerState,NodeState> serverStateToNodeState=createMock(Map.class);
  org.jclouds.compute.domain.Image jcImage=createMock(org.jclouds.compute.domain.Image.class);
  Option dc=new Option(1l,"US-West-1","US West 1 Datacenter");
  Option ram=new Option(1l,"512MB","Server with 512MB RAM");
  Set<? extends org.jclouds.compute.domain.Image> images=ImmutableSet.of(jcImage);
  Server server=createMock(Server.class);
  expect(server.getId()).andReturn(1000l).atLeastOnce();
  expect(server.getName()).andReturn("group-ff").atLeastOnce();
  expect(server.getState()).andReturn(ServerState.ON).atLeastOnce();
  expect(serverStateToNodeState.get(ServerState.ON)).andReturn(NodeState.RUNNING);
  Location location=new LocationBuilder().scope(LocationScope.ZONE).id("1").description("US-West-1").build();
  Set<? extends Location> locations=ImmutableSet.<Location>of(location);
  expect(server.getIp()).andReturn(new Ip("127.0.0.1"));
  ServerImage image=createMock(ServerImage.class);
  expect(server.getImage()).andReturn(image).atLeastOnce();
  expect(server.getRam()).andReturn(ram).atLeastOnce();
  expect(server.getDatacenter()).andReturn(dc).atLeastOnce();
  expect(image.getId()).andReturn(2000l).atLeastOnce();
  expect(jcImage.getProviderId()).andReturn("2000").atLeastOnce();
  expect(jcImage.getLocation()).andReturn(location).atLeastOnce();
  expect(jcImage.getOperatingSystem()).andReturn(createMock(OperatingSystem.class)).atLeastOnce();
  replay(serverStateToNodeState);
  replay(server);
  replay(image);
  replay(jcImage);
  ServerToNodeMetadata parser=new ServerToNodeMetadata(serverStateToNodeState,Suppliers.<Set<? extends Image>>ofInstance(images),Suppliers.<Set<? extends Hardware>>ofInstance(GoGridHardwareSupplier.H_ALL),Suppliers.<Set<? extends Location>>ofInstance(locations),namingConvention);
  NodeMetadata metadata=parser.apply(server);
  assertEquals(metadata.getLocation(),location);
  assertEquals(metadata.getImageId(),"2000");
  assertEquals(metadata.getGroup(),"group");
  verify(serverStateToNodeState);
  verify(image);
  verify(server);
  verify(jcImage);
}
