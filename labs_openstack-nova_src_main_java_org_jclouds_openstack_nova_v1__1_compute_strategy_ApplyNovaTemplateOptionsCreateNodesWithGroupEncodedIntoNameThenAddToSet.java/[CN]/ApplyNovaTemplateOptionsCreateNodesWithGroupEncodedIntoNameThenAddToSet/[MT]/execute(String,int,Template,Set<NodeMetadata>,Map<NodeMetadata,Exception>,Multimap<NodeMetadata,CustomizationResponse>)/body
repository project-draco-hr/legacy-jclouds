{
  Template mutableTemplate=templateBuilderProvider.get().fromTemplate(template).build();
  NovaTemplateOptions templateOptions=NovaTemplateOptions.class.cast(mutableTemplate.getOptions());
  String zone=mutableTemplate.getLocation().getId();
  if (templateOptions.shouldAutoAssignFloatingIp()) {
    checkArgument(novaClient.getFloatingIPExtensionForZone(zone).isPresent(),"Floating IPs are required by options, but the extension is not available! options: %s",templateOptions);
  }
  boolean keyPairExensionPresent=novaClient.getKeyPairExtensionForZone(zone).isPresent();
  if (templateOptions.shouldGenerateKeyPair()) {
    checkArgument(keyPairExensionPresent,"Key Pairs are required by options, but the extension is not available! options: %s",templateOptions);
    KeyPair keyPair=keyPairCache.getUnchecked(ZoneAndName.fromZoneAndName(zone,"jclouds_" + group));
    keyPairCache.asMap().put(ZoneAndName.fromZoneAndName(zone,keyPair.getName()),keyPair);
    templateOptions.keyPairName(keyPair.getName());
  }
 else   if (templateOptions.getKeyPairName() != null) {
    checkArgument(keyPairExensionPresent,"Key Pairs are required by options, but the extension is not available! options: %s",templateOptions);
    if (templateOptions.getLoginPrivateKey() != null) {
      String pem=templateOptions.getLoginPrivateKey();
      KeyPair keyPair=KeyPair.builder().name(templateOptions.getKeyPairName()).fingerprint(fingerprintPrivateKey(pem)).privateKey(pem).build();
      keyPairCache.asMap().put(ZoneAndName.fromZoneAndName(zone,keyPair.getName()),keyPair);
    }
  }
  boolean securityGroupExensionPresent=novaClient.getSecurityGroupExtensionForZone(zone).isPresent();
  List<Integer> inboundPorts=Ints.asList(templateOptions.getInboundPorts());
  if (templateOptions.getSecurityGroupNames().size() > 0) {
    checkArgument(novaClient.getSecurityGroupExtensionForZone(zone).isPresent(),"Security groups are required by options, but the extension is not available! options: %s",templateOptions);
  }
 else   if (securityGroupExensionPresent && inboundPorts.size() > 0) {
    String securityGroupName="jclouds_" + group;
    try {
      securityGroupCache.get(new ZoneSecurityGroupNameAndPorts(zone,securityGroupName,inboundPorts));
    }
 catch (    ExecutionException e) {
      throw Throwables.propagate(e.getCause());
    }
    templateOptions.securityGroupNames(securityGroupName);
  }
  return super.execute(group,count,mutableTemplate,goodNodes,badNodes,customizationResponses);
}
