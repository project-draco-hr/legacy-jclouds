{
  disconnect();
  JSch jsch=new JSch();
  session=null;
  try {
    session=jsch.getSession(username,host.getHostAddress(),port);
    if (timeout != 0)     session.setTimeout(timeout);
    logger.debug("%s@%s:%d: Session created.",username,host.getHostAddress(),port);
    if (password != null) {
      session.setPassword(password);
    }
 else {
      jsch.addIdentity(username,privateKey,null,emptyPassPhrase);
    }
  }
 catch (  JSchException e) {
    throw new SshException(String.format("%s@%s:%d: Error creating session.",username,host.getHostAddress(),port),e);
  }
  java.util.Properties config=new java.util.Properties();
  config.put("StrictHostKeyChecking","no");
  session.setConfig(config);
  RETRY_LOOP:   for (int i=0; i < sshRetries; i++) {
    try {
      session.connect();
      break RETRY_LOOP;
    }
 catch (    Exception from) {
      String rootMessage=Throwables.getRootCause(from).getMessage();
      if (i + 1 == sshRetries)       throw propagate(from);
      if (Iterables.size(Iterables.filter(Throwables.getCausalChain(from),ConnectException.class)) >= 1 || rootMessage.indexOf("Auth fail") != -1 || rootMessage.indexOf("invalid data") != -1 || rootMessage.indexOf("invalid privatekey") != -1) {
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          throw propagate(e);
        }
        continue;
      }
      throw propagate(from);
    }
  }
  logger.debug("%s@%s:%d: Session connected.",username,host.getHostAddress(),port);
}
