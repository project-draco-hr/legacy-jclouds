{
  Iterable<? extends Org> orgs=checkNotNull(orgMap.get().values(),"orgs");
  Iterable<? extends Iterable<? extends Image>> images=transformParallel(orgs,new Function<Org,ListenableFuture<? extends Iterable<? extends Image>>>(){
    @Override public ListenableFuture<Iterable<? extends Image>> apply(    final Org from){
      checkNotNull(from,"org");
      return userExecutor.submit(new Callable<Iterable<? extends Image>>(){
        @Override public Iterable<? extends Image> call() throws Exception {
          return imagesInOrg.apply(from);
        }
        @Override public String toString(){
          return "imagesInOrg(" + from.getHref() + ")";
        }
      }
);
    }
  }
,userExecutor,null,logger,"images in " + orgs);
  return newLinkedHashSet(concat(images));
}
