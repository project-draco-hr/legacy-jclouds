{
  ComputeServiceContext<?,?> context=null;
  try {
    String endpoint="file://" + getClass().getResource("/test_location.yaml").getPath();
    context=ContextBuilder.newBuilder(AnonymousProviderMetadata.forApiWithEndpoint(new BYONApiMetadata(),endpoint)).build();
    assertEquals(context.getProviderSpecificContext().getEndpoint(),URI.create(endpoint));
    @SuppressWarnings("unchecked") Supplier<LoadingCache<String,Node>> supplier=(Supplier<LoadingCache<String,Node>>)context.getProviderSpecificContext().getApi();
    assertEquals(supplier.get().size(),context.getComputeService().listNodes().size());
    assertEquals(supplier.get().asMap(),ImmutableMap.<String,Node>of(NodesFromYamlTest.TEST2.getId(),NodesFromYamlTest.TEST2,NodesFromYamlTest.TEST3.getId(),NodesFromYamlTest.TEST3));
    Location providerLocation=expectedProviderLocationFromResource(endpoint);
    Location virginia=zoneCalled("virginia",providerLocation);
    Location maryland=zoneCalled("maryland",providerLocation);
    assertEquals(context.getComputeService().listNodes().toString(),ImmutableSet.of(expectedNodeMetadataFromResource(1,endpoint,virginia),expectedNodeMetadataFromResource(2,endpoint,maryland,2022)).toString());
    assertEquals(NodeMetadata.class.cast(Iterables.get(context.getComputeService().listNodes(),0)).getCredentials(),LoginCredentials.builder().user("myUser").password("happy bear").authenticateSudo(true).privateKey("-----BEGIN RSA PRIVATE KEY-----\n" + "MIIEowIBAAKCAQEAuzaE6azgUxwESX1rCGdJ5xpdrc1XC311bOGZBCE8NA+CpFh2\n" + "u01Vfv68NC4u6LFgdXSY1vQt6hiA5TNqQk0TyVfFAunbXgTekF6XqDPQUf1nq9aZ\n"+ "lMvo4vlaLDKBkhG5HJE/pIa0iB+RMZLS0GhxsIWerEDmYdHKM25o\n"+ "-----END RSA PRIVATE KEY-----\n").build());
    assertEquals(context.getComputeService().listAssignableLocations(),ImmutableSet.of(virginia,maryland));
  }
  finally {
    if (context != null)     context.close();
  }
}
