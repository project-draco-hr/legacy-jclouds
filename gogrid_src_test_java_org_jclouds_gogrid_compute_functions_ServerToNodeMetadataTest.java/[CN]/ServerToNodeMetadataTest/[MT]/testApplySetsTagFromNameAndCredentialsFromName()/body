{
  GridServerClient client=createMock(GridServerClient.class);
  Map<String,NodeState> serverStateToNodeState=createMock(Map.class);
  org.jclouds.compute.domain.Image jcImage=createMock(org.jclouds.compute.domain.Image.class);
  Set<org.jclouds.compute.domain.Image> images=ImmutableSet.of(jcImage);
  Server server=createMock(Server.class);
  expect(server.getId()).andReturn(1000l).atLeastOnce();
  expect(server.getName()).andReturn("tag-ff").atLeastOnce();
  expect(server.getState()).andReturn(new Option("RUNNING")).atLeastOnce();
  expect(serverStateToNodeState.get("RUNNING")).andReturn(NodeState.RUNNING);
  Location location=new LocationImpl(LocationScope.ZONE,"sanfran","description",null);
  Map<String,Credentials> credentialsMap=createMock(Map.class);
  expect(client.getServerCredentialsList()).andReturn(credentialsMap);
  expect(credentialsMap.get("tag-ff")).andReturn(new Credentials("user","pass"));
  expect(server.getIp()).andReturn(new Ip("127.0.0.1"));
  ServerImage image=createMock(ServerImage.class);
  expect(server.getImage()).andReturn(image).atLeastOnce();
  expect(image.getId()).andReturn(2000l).atLeastOnce();
  expect(jcImage.getProviderId()).andReturn("2000").atLeastOnce();
  expect(jcImage.getLocation()).andReturn(location).atLeastOnce();
  replay(client);
  replay(serverStateToNodeState);
  replay(server);
  replay(image);
  replay(jcImage);
  replay(credentialsMap);
  ServerToNodeMetadata parser=new ServerToNodeMetadata(serverStateToNodeState,client,images,location);
  NodeMetadata metadata=parser.apply(server);
  assertEquals(metadata.getLocation(),location);
  assertEquals(metadata.getImage(),jcImage);
  assertEquals(metadata.getTag(),"tag");
  assertEquals(metadata.getCredentials(),new Credentials("user","pass"));
  verify(client);
  verify(serverStateToNodeState);
  verify(image);
  verify(credentialsMap);
  verify(server);
  verify(jcImage);
}
