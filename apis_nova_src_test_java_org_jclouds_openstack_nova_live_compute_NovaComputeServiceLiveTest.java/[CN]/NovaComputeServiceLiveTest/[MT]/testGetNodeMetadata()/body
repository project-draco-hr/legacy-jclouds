{
  Set<NodeMetadata> nodes=Sets.newHashSet(getDefaultNodeImmediately(group));
  Map<String,? extends NodeMetadata> metadataMap=newLinkedHashMap(uniqueIndex(filter(computeService.listNodesDetailsMatching(all()),and(inGroup(group),not(TERMINATED))),new Function<NodeMetadata,String>(){
    @Override public String apply(    NodeMetadata from){
      return from.getId();
    }
  }
));
  for (  NodeMetadata node : nodes) {
    awaitForStartup(node.getId());
    metadataMap.remove(node.getId());
    NodeMetadata nodeMetadata=computeService.getNodeMetadata(node.getId());
    assertEquals(parseGroupFromName(nodeMetadata.getName()),group);
    assertEquals(nodeMetadata.getProviderId(),node.getProviderId());
    assertEquals(nodeMetadata.getGroup(),node.getGroup());
    assertLocationSameOrChild(nodeMetadata.getLocation(),getDefaultTemplateBuilder().build().getLocation());
    assertEquals(nodeMetadata.getImageId(),getDefaultTemplateBuilder().build().getImage().getId());
    assertEquals(nodeMetadata.getState(),NodeState.RUNNING);
    assertTrue(nodeMetadata.getPrivateAddresses().size() > 0);
    assertTrue(nodeMetadata.getPublicAddresses().size() > 0);
  }
  assertNodeZero(metadataMap.values(),nodes);
}
