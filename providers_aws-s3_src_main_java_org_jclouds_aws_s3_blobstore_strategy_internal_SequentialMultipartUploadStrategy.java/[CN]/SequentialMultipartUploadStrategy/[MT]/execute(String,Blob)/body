{
  String key=blob.getMetadata().getName();
  calculateChunkSize(blob.getPayload().getContentMetadata().getContentLength());
  long parts=getParts();
  if (parts > 0) {
    AWSS3Client client=(AWSS3Client)ablobstore.getContext().getProviderSpecificContext().getApi();
    String uploadId=client.initiateMultipartUpload(container,ObjectMetadataBuilder.create().key(key).build());
    try {
      SortedMap<Integer,String> etags=Maps.newTreeMap();
      int part;
      while ((part=getNextPart()) <= getParts()) {
        String eTag=prepareUploadPart(client,container,key,uploadId,part,slicer.slice(blob.getPayload(),getNextChunkOffset(),chunkSize));
        etags.put(new Integer(part),eTag);
      }
      long remaining=getRemaining();
      if (remaining > 0) {
        String eTag=prepareUploadPart(client,container,key,uploadId,part,slicer.slice(blob.getPayload(),getNextChunkOffset(),remaining));
        etags.put(new Integer(part),eTag);
      }
      return client.completeMultipartUpload(container,key,uploadId,etags);
    }
 catch (    Exception ex) {
      RuntimeException rtex=Throwables2.getFirstThrowableOfType(ex,RuntimeException.class);
      if (rtex == null) {
        rtex=new RuntimeException(ex);
      }
      client.abortMultipartUpload(container,key,uploadId);
      throw rtex;
    }
  }
 else {
    return ablobstore.putBlob(container,blob);
  }
}
