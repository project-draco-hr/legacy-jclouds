{
  String key=blob.getMetadata().getName();
  Payload payload=blob.getPayload();
  MultipartUploadSlicingAlgorithm algorithm=new MultipartUploadSlicingAlgorithm();
  algorithm.calculateChunkSize(checkNotNull(payload.getContentMetadata().getContentLength(),"contentLength required on all uploads to amazon s3; please invoke payload.getContentMetadata().setContentLength(length) first"));
  int parts=algorithm.getParts();
  long chunkSize=algorithm.getChunkSize();
  if (parts > 0) {
    AWSS3Client client=(AWSS3Client)ablobstore.getContext().getProviderSpecificContext().getApi();
    String uploadId=client.initiateMultipartUpload(container,ObjectMetadataBuilder.create().key(key).build());
    try {
      SortedMap<Integer,String> etags=Maps.newTreeMap();
      int part;
      while ((part=algorithm.getNextPart()) <= parts) {
        prepareUploadPart(container,key,uploadId,part,payload,algorithm.getNextChunkOffset(),chunkSize,etags);
      }
      long remaining=algorithm.getRemaining();
      if (remaining > 0) {
        prepareUploadPart(container,key,uploadId,part,payload,algorithm.getNextChunkOffset(),remaining,etags);
      }
      return client.completeMultipartUpload(container,key,uploadId,etags);
    }
 catch (    Exception ex) {
      RuntimeException rtex=Throwables2.getFirstThrowableOfType(ex,RuntimeException.class);
      if (rtex == null) {
        rtex=new RuntimeException(ex);
      }
      client.abortMultipartUpload(container,key,uploadId);
      throw rtex;
    }
  }
 else {
    return ablobstore.putBlob(container,blob,PutOptions.NONE);
  }
}
