{
  NodeMetadataBuilder builder=new NodeMetadataBuilder();
  builder.ids(from.getId());
  builder.name(from.getName());
  builder.group(nodeNamingConvention.groupInUniqueNameOrNull(from.getName()));
  if (from.getStatus() == null)   System.out.println("status null for: " + from.getId() + ": "+ from.getName());
  builder.status(vServerToStatus.get(from.getStatus()));
  builder.privateAddresses(ImmutableSet.<String>of());
  builder.publicAddresses(ImmutableSet.<String>of());
  if (from.getServer() != null) {
    builder.imageId(from.getServer().getDiskimageId());
    builder.hardware(parseHardware(from.getServer().getType()));
    LoginCredentials.Builder credentialsBuilder=LoginCredentials.builder().password(from.getInitialPassword());
    Image image=parseImage(from.getServer());
    if (image != null) {
      builder.operatingSystem(image.getOperatingSystem());
      String user=image.getDefaultCredentials().getUser();
      credentialsBuilder.identity(user);
    }
    builder.credentials(credentialsBuilder.build());
    if (from.getServer() instanceof VServerWithVNICs) {
      VServerWithVNICs server=(VServerWithVNICs)from.getServer();
      builder.location(parseLocation(server));
      List<String> ips=Lists.newArrayList();
      if (server.getVnics() != null && server.getVnics().iterator().next().getPrivateIp() != null) {
        ips.add(server.getVnics().iterator().next().getPrivateIp());
      }
      builder.privateAddresses(ips);
    }
  }
  if (from.getTemplate() != null) {
    builder.location(from.getTemplate().getLocation());
  }
  return builder.build();
}
