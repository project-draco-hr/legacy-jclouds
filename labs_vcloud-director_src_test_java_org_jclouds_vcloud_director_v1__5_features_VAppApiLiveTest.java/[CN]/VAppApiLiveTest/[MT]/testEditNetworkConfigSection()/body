{
  NetworkConfigSection oldSection=vAppApi.getNetworkConfigSection(vAppUrn);
  Network network=lazyGetNetwork();
  tryFindBridgedNetworkInOrg();
  IpRange ipRange=ipRange();
  NetworkConfiguration newConfiguration=NetworkConfiguration.builder().ipScope(ipScope(ipRange)).parentNetwork(Reference.builder().fromEntity(network).build()).fenceMode(FenceMode.NAT_ROUTED).retainNetInfoAcrossDeployments(false).syslogServerSettings(SyslogServerSettings.builder().syslogServerIp1("192.168.14.27").build()).features(NetworkFeatures.builder().service(DhcpService.builder().ipRange(ipRange).build()).service(FirewallService.builder().logDefaultAction(false).defaultAction("drop").build()).service(NatService.builder().natType("portForwarding").enabled(false).build()).build()).build();
  final String networkName=name("vAppNetwork-");
  VAppNetworkConfiguration newVAppNetworkConfiguration=VAppNetworkConfiguration.builder().networkName(networkName).description(name("description-")).configuration(newConfiguration).build();
  NetworkConfigSection newSection=oldSection.toBuilder().networkConfigs(ImmutableSet.of(newVAppNetworkConfiguration)).build();
  Task editNetworkConfigSection=vAppApi.editNetworkConfigSection(vAppUrn,newSection);
  assertTrue(retryTaskSuccess.apply(editNetworkConfigSection),String.format(TASK_COMPLETE_TIMELY,"editNetworkConfigSection"));
  NetworkConfigSection modified=vAppApi.getNetworkConfigSection(vAppUrn);
  checkNetworkConfigSection(modified);
  Optional<VAppNetworkConfiguration> modifiedOptionalVAppNetwork=Iterables.tryFind(modified.getNetworkConfigs(),new IsVAppNetworkNamed(networkName));
  if (!modifiedOptionalVAppNetwork.isPresent())   fail(String.format("Could not find vApp network named %s",networkName));
  Optional<VAppNetworkConfiguration> newOptionalVAppNetwork=Iterables.tryFind(newSection.getNetworkConfigs(),new IsVAppNetworkNamed(networkName));
  if (!newOptionalVAppNetwork.isPresent())   fail(String.format("Could not find vApp network named %s",networkName));
  assertEquals(modifiedOptionalVAppNetwork.get().getNetworkName(),newOptionalVAppNetwork.get().getNetworkName(),String.format(ENTITY_EQUAL,"NetworkName"));
  assertEquals(modifiedOptionalVAppNetwork.get().getConfiguration().getFenceMode(),newOptionalVAppNetwork.get().getConfiguration().getFenceMode(),String.format(ENTITY_EQUAL,"FenceMode"));
  assertEquals(modifiedOptionalVAppNetwork.get().getConfiguration().getIpScope(),newOptionalVAppNetwork.get().getConfiguration().getIpScope(),String.format(ENTITY_EQUAL,"IpScope"));
  assertEquals(modifiedOptionalVAppNetwork.get().getConfiguration().getNetworkFeatures(),newOptionalVAppNetwork.get().getConfiguration().getNetworkFeatures(),String.format(ENTITY_EQUAL,"NetworkFeatures"));
}
