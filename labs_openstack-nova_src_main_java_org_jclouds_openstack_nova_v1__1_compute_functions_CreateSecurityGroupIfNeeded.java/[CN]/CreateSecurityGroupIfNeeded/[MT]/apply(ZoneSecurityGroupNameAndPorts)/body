{
  checkNotNull(zoneSecurityGroupNameAndPorts,"zoneSecurityGroupNameAndPorts");
  String zoneId=zoneSecurityGroupNameAndPorts.getZone();
  Optional<SecurityGroupClient> client=novaClient.getSecurityGroupExtensionForZone(zoneId);
  checkArgument(client.isPresent(),"Security groups are required, but the extension is not available!");
  logger.debug(">> creating securityGroup %s",zoneSecurityGroupNameAndPorts);
  try {
    SecurityGroup securityGroup=client.get().createSecurityGroupWithNameAndDescription(zoneSecurityGroupNameAndPorts.getName(),zoneSecurityGroupNameAndPorts.getName());
    logger.debug("<< created securityGroup(%s)",securityGroup);
    for (    int port : zoneSecurityGroupNameAndPorts.getPorts()) {
      authorizeGroupToItselfAndAllIPsToTCPPort(client.get(),securityGroup,port);
    }
    return new SecurityGroupInZone(client.get().getSecurityGroup(securityGroup.getId()),zoneId);
  }
 catch (  IllegalStateException e) {
    logger.trace("<< trying to find securityGroup(%s): %s",zoneSecurityGroupNameAndPorts,e.getMessage());
    SecurityGroup group=find(client.get().listSecurityGroups(),nameEquals(zoneSecurityGroupNameAndPorts.getName()));
    logger.debug("<< reused securityGroup(%s)",group.getId());
    return new SecurityGroupInZone(group,zoneId);
  }
}
