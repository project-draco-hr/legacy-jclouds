{
  Injector injector=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      bind(URI.class).annotatedWith(CloudServers.class).toInstance(URI.create("http://localhost:8080"));
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_IO_WORKER_THREADS)).to("1");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_USER_THREADS)).to("1");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_MAX_CONNECTIONS_PER_CONTEXT)).to("0");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_MAX_CONNECTIONS_PER_HOST)).to("1");
      bind(Logger.LoggerFactory.class).toInstance(new LoggerFactory(){
        public Logger getLogger(        String category){
          return Logger.NULL;
        }
      }
);
    }
    @SuppressWarnings("unused") @Provides @Authentication public Supplier<String> getAuthToken(){
      return new Supplier<String>(){
        public String get(){
          return "testtoken";
        }
      }
;
    }
    @SuppressWarnings("unused") @Provides @TimeStamp public Supplier<Date> getDate(){
      return new Supplier<Date>(){
        public Date get(){
          return new Date();
        }
      }
;
    }
  }
,new RestModule(),new ExecutorServiceModule(Executors.sameThreadExecutor(),Executors.sameThreadExecutor()),new JavaUrlHttpCommandExecutorServiceModule());
  processor=injector.getInstance(Key.get(new TypeLiteral<RestAnnotationProcessor<CloudServersAsyncClient>>(){
  }
));
}
