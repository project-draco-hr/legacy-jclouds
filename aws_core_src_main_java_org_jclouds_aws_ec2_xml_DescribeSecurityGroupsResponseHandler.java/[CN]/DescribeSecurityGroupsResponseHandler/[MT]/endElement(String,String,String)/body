{
  if (qName.equals("groupName")) {
    if (!inGroups)     this.groupName=currentText.toString().trim();
 else     this.userIdGroupName=currentText.toString().trim();
  }
 else   if (qName.equals("ownerId")) {
    this.ownerId=currentText.toString().trim();
  }
 else   if (qName.equals("userId")) {
    this.userId=currentText.toString().trim();
  }
 else   if (qName.equals("groupDescription")) {
    this.groupDescription=currentText.toString().trim();
  }
 else   if (qName.equals("ipProtocol")) {
    this.ipProtocol=IpProtocol.fromValue(currentText.toString().trim());
  }
 else   if (qName.equals("fromPort")) {
    this.fromPort=Integer.parseInt(currentText.toString().trim());
  }
 else   if (qName.equals("toPort")) {
    this.toPort=Integer.parseInt(currentText.toString().trim());
  }
 else   if (qName.equals("cidrIp")) {
    this.ipRanges.add(currentText.toString().trim());
  }
 else   if (qName.equals("ipPermissions")) {
    inIpPermissions=false;
  }
 else   if (qName.equals("ipRanges")) {
    inIpRanges=false;
  }
 else   if (qName.equals("groups")) {
    inGroups=false;
  }
 else   if (qName.equals("item")) {
    if (inIpPermissions && !inIpRanges && !inGroups) {
      ipPermissions.add(new IpPermission(fromPort,toPort,groups,ipProtocol,ipRanges));
      this.fromPort=-1;
      this.toPort=-1;
      this.groups=Sets.newLinkedHashSet();
      this.ipProtocol=null;
      this.ipRanges=Sets.newLinkedHashSet();
    }
 else     if (inIpPermissions && !inIpRanges && inGroups) {
      this.groups.add(new UserIdGroupPair(userId,userIdGroupName));
      this.userId=null;
      this.userIdGroupName=null;
    }
 else     if (!inIpPermissions && !inIpRanges && !inGroups) {
      String region=EC2Utils.findRegionInArgsOrNull((GeneratedHttpRequest<?>)request);
      if (region == null)       region=defaultRegion;
      securtyGroups.add(new SecurityGroup(region,groupName,ownerId,groupDescription,ipPermissions));
      this.groupName=null;
      this.ownerId=null;
      this.groupDescription=null;
      this.ipPermissions=Sets.newLinkedHashSet();
    }
  }
  currentText=new StringBuilder();
}
