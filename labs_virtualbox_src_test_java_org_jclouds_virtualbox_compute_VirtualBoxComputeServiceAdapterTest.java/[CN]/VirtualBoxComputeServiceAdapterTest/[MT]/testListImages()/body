{
  VirtualBoxManager manager=createNiceMock(VirtualBoxManager.class);
  IVirtualBox vBox=createNiceMock(IVirtualBox.class);
  IGuestOSType osType=createNiceMock(IGuestOSType.class);
  List<IMachine> machines=new ArrayList<IMachine>();
  IMachine imageMachine=createNiceMock(IMachine.class);
  IMachine clonedMachine=createNiceMock(IMachine.class);
  machines.add(imageMachine);
  machines.add(clonedMachine);
  expect(clonedMachine.getName()).andReturn("My Linux Node");
  expect(clonedMachine.getDescription()).andReturn("My Linux Node");
  expect(imageMachine.getName()).andReturn(VIRTUALBOX_IMAGE_PREFIX + "ubuntu-10.04");
  expect(imageMachine.getDescription()).andReturn(VIRTUALBOX_IMAGE_PREFIX + "ubuntu-10.04");
  expect(manager.getVBox()).andReturn(vBox).anyTimes();
  expect(vBox.getMachines()).andReturn(machines).anyTimes();
  expect(vBox.getGuestOSType(EasyMock.<String>anyObject())).andReturn(osType).anyTimes();
  expect(osType.getDescription()).andReturn("Ubuntu 10.04").anyTimes();
  expect(osType.getIs64Bit()).andReturn(true).anyTimes();
  replay(manager,vBox,clonedMachine,imageMachine,osType);
  Function<IMachine,Image> iMachineToImage=new IMachineToImage(Suppliers.ofInstance(manager),osMap);
  VirtualBoxComputeServiceAdapter adapter=new VirtualBoxComputeServiceAdapter(Suppliers.ofInstance(manager),iMachineToImage,new ImageFromYamlString(),new Supplier<String>(){
    @Override public String get(){
      return "images:\n" + "    - id: myTestId\n" + "      name: ubuntu-11.04-server-i386\n"+ "      description: ubuntu 11.04 server (i386)\n"+ "      os_arch: x86\n"+ "      os_family: ubuntu\n"+ "      os_description: ubuntu\n"+ "      os_version: 11.04\n"+ "      iso: http://releases.ubuntu.com/11.04/ubuntu-11.04-server-i386.iso";
    }
  }
);
  Iterator<Image> iterator=adapter.listImages().iterator();
  Image image=Iterators.getOnlyElement(iterator);
  assertEquals(image.getDescription(),"ubuntu 11.04 server (i386)");
}
