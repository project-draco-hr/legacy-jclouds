{
  FieldNamingStrategy serializationPolicy=new AnnotationOrNameFieldNamingStrategy(ImmutableSet.of(new ExtractSerializedName(),new ExtractNamed()));
  GsonBuilder builder=new GsonBuilder().setFieldNamingStrategy(serializationPolicy).setExclusionStrategies(exclusionStrategy);
  builder.registerTypeAdapter(Properties.class,propertiesAdapter.nullSafe());
  builder.registerTypeAdapter(Date.class,adapter.nullSafe());
  builder.registerTypeAdapter(byte[].class,byteArrayAdapter.nullSafe());
  builder.registerTypeAdapter(JsonBall.class,jsonAdapter.nullSafe());
  builder.registerTypeAdapterFactory(optional);
  builder.registerTypeAdapterFactory(iterable);
  builder.registerTypeAdapterFactory(collection);
  builder.registerTypeAdapterFactory(list);
  builder.registerTypeAdapter(new TypeToken<List<Byte>>(){
  }
.getType(),byteListAdapter.nullSafe());
  builder.registerTypeAdapterFactory(immutableList);
  builder.registerTypeAdapterFactory(set);
  builder.registerTypeAdapterFactory(immutableSet);
  builder.registerTypeAdapterFactory(map);
  builder.registerTypeAdapterFactory(multimap);
  builder.registerTypeAdapterFactory(fluentIterable);
  AnnotationConstructorNamingStrategy deserializationPolicy=new AnnotationConstructorNamingStrategy(ImmutableSet.of(ConstructorProperties.class,Inject.class),ImmutableSet.of(new ExtractNamed()));
  builder.registerTypeAdapterFactory(new DeserializationConstructorAndReflectiveTypeAdapterFactory(new ConstructorConstructor(),serializationPolicy,Excluder.DEFAULT,deserializationPolicy));
  builder.registerTypeHierarchyAdapter(Enum.class,new EnumTypeAdapterThatReturnsFromValue());
  for (  Map.Entry<Type,Object> binding : bindings.getBindings().entrySet()) {
    builder.registerTypeAdapter(binding.getKey(),binding.getValue());
  }
  for (  TypeAdapterFactory factory : bindings.getFactories()) {
    builder.registerTypeAdapterFactory(factory);
  }
  return builder.create();
}
