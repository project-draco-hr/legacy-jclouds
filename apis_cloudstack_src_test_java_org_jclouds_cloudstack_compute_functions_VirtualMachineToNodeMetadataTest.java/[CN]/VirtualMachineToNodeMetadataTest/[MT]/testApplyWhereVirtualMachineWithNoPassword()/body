{
  Supplier<Set<? extends Location>> locationSupplier=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(ZoneToLocationTest.one,ZoneToLocationTest.two));
  Supplier<Set<? extends Image>> imageSupplier=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of(TemplateToImageTest.one,TemplateToImageTest.two));
  VirtualMachineToNodeMetadata parser=new VirtualMachineToNodeMetadata(locationSupplier,imageSupplier,CacheBuilder.newBuilder().<String,Set<IPForwardingRule>>build(new CacheLoader<String,Set<IPForwardingRule>>(){
    @Override public Set<IPForwardingRule> load(    String arg0) throws Exception {
      throw new ResourceNotFoundException("no ip forwarding rule for: " + arg0);
    }
  }
),namingConvention);
  VirtualMachine guest=Iterables.get(new ListVirtualMachinesResponseTest().expected(),0);
  NodeMetadata node=parser.apply(guest);
  assertEquals(node.toString(),new NodeMetadataBuilder().id("54").providerId("54").name("i-3-54-VM").group("i-3-54").location(ZoneToLocationTest.one).status(Status.PENDING).hostname("i-3-54-VM").privateAddresses(ImmutableSet.of("10.1.1.18")).hardware(addHypervisor(ServiceOfferingToHardwareTest.one,"XenServer")).imageId(TemplateToImageTest.one.getId()).operatingSystem(TemplateToImageTest.one.getOperatingSystem()).build().toString());
}
