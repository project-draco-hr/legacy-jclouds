{
  Supplier<Set<? extends Location>> locationSupplier=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(ZoneToLocationTest.one,ZoneToLocationTest.two));
  Supplier<Set<? extends Hardware>> hardwareSupplier=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(ServiceOfferingToHardwareTest.one,ServiceOfferingToHardwareTest.two));
  Supplier<Set<? extends Image>> imageSupplier=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of(TemplateToImageTest.one,TemplateToImageTest.two));
  VirtualMachineToNodeMetadata parser=new VirtualMachineToNodeMetadata(new FindLocationForVirtualMachine(locationSupplier),new FindHardwareForVirtualMachine(hardwareSupplier),new FindImageForVirtualMachine(imageSupplier),CacheBuilder.newBuilder().<Long,IPForwardingRule>build(new CacheLoader<Long,IPForwardingRule>(){
    @Override public IPForwardingRule load(    Long arg0) throws Exception {
      return IPForwardingRule.builder().id(1234l).IPAddress("1.1.1.1").build();
    }
  }
));
  VirtualMachine guest=Iterables.get(new ListVirtualMachinesResponseTest().expected(),0);
  NodeMetadata node=parser.apply(guest);
  assertEquals(node.toString(),new NodeMetadataBuilder().id("54").providerId("54").name("i-3-54-VM").group("i-3").location(ZoneToLocationTest.one).state(NodeState.PENDING).privateAddresses(ImmutableSet.of("10.1.1.18")).publicAddresses(ImmutableSet.of("1.1.1.1")).hardware(ServiceOfferingToHardwareTest.one).imageId(TemplateToImageTest.one.getId()).operatingSystem(TemplateToImageTest.one.getOperatingSystem()).build().toString());
}
