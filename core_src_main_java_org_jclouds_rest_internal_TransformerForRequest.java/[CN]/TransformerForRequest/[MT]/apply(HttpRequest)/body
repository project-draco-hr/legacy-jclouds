{
  GeneratedHttpRequest request=GeneratedHttpRequest.class.cast(in);
  Function<HttpResponse,?> transformer;
  Class<? extends HandlerWithResult<?>> handler=getSaxResponseParserClassOrNull(request.getInvocation().getInvokable());
  if (handler != null) {
    transformer=parserFactory.create(injector.getInstance(handler));
  }
 else {
    transformer=getTransformerForMethod(request.getInvocation(),injector);
  }
  if (transformer instanceof InvocationContext<?>) {
    InvocationContext.class.cast(transformer).setContext(request);
  }
  if (request.getInvocation().getInvokable().isAnnotationPresent(Transform.class)) {
    Function<?,?> wrappingTransformer=injector.getInstance(request.getInvocation().getInvokable().getAnnotation(Transform.class).value());
    if (wrappingTransformer instanceof InvocationContext<?>) {
      ((InvocationContext<?>)wrappingTransformer).setContext(request);
    }
    transformer=compose(Function.class.cast(wrappingTransformer),transformer);
  }
  return transformer;
}
