{
  super.configure();
  bind(new TypeLiteral<ComputeServiceAdapter<IMachine,Hardware,Image,Location>>(){
  }
).to(VirtualBoxComputeServiceAdapter.class);
  bind(new TypeLiteral<Function<IMachine,NodeMetadata>>(){
  }
).to(IMachineToNodeMetadata.class);
  bind(new TypeLiteral<Function<Location,Location>>(){
  }
).to(Class.class.cast(IdentityFunction.class));
  bind(new TypeLiteral<Function<Hardware,Hardware>>(){
  }
).to(Class.class.cast(IdentityFunction.class));
  bind(new TypeLiteral<Function<Image,Image>>(){
  }
).to(Class.class.cast(IdentityFunction.class));
  bind(new TypeLiteral<Function<IMachine,Hardware>>(){
  }
).to(IMachineToHardware.class);
  bind(new TypeLiteral<Function<IMachine,Image>>(){
  }
).to(IMachineToImage.class);
  bind(new TypeLiteral<CacheLoader<IsoSpec,URI>>(){
  }
).to(Class.class.cast(PreseedCfgServer.class));
  bind(new TypeLiteral<Function<URI,File>>(){
  }
).to(Class.class.cast(FileDownloadFromURI.class));
  bind(new TypeLiteral<Supplier<VirtualBoxManager>>(){
  }
).to(Class.class.cast(StartVBoxIfNotAlreadyRunning.class));
  bind(new TypeLiteral<Supplier<Map<Image,YamlImage>>>(){
  }
).to(Class.class.cast(ImagesToYamlImagesFromYamlDescriptor.class));
  bind(YamlImagesFromFileConfig.class);
  bind(new TypeLiteral<LoadingCache<Image,Master>>(){
  }
).to(MastersLoadingCache.class);
  bind(new TypeLiteral<ImageExtension>(){
  }
).to(VirtualBoxImageExtension.class);
  bind(new TypeLiteral<Function<MasterSpec,IMachine>>(){
  }
).to(Class.class.cast(CreateAndInstallVm.class));
  bind(new TypeLiteral<Function<NodeSpec,NodeAndInitialCredentials<IMachine>>>(){
  }
).to(Class.class.cast(NodeCreator.class));
  bind(new TypeLiteral<Function<CloneSpec,IMachine>>(){
  }
).to(Class.class.cast(CloneAndRegisterMachineFromIMachineIfNotAlreadyExists.class));
  bind(new TypeLiteral<Server>(){
  }
).to(Class.class.cast(PreseedCfgServer.class)).asEagerSingleton();
  bind(new TypeLiteral<Function<IMachine,SshClient>>(){
  }
).to(IMachineToSshClient.class);
  bind(ExecutionType.class).toInstance(ExecutionType.HEADLESS);
  bind(LockType.class).toInstance(LockType.Write);
}
