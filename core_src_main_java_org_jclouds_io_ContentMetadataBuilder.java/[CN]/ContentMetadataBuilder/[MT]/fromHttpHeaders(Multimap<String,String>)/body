{
  boolean chunked=any(headers.entries(),new Predicate<Entry<String,String>>(){
    @Override public boolean apply(    Entry<String,String> input){
      return "Transfer-Encoding".equalsIgnoreCase(input.getKey()) && "chunked".equalsIgnoreCase(input.getValue());
    }
  }
);
  for (  Entry<String,String> header : headers.entries()) {
    if (!chunked && CONTENT_LENGTH.equalsIgnoreCase(header.getKey())) {
      contentLength(new Long(header.getValue()));
    }
 else     if ("Content-MD5".equalsIgnoreCase(header.getKey())) {
      contentMD5(CryptoStreams.base64(header.getValue()));
    }
 else     if (CONTENT_TYPE.equalsIgnoreCase(header.getKey())) {
      contentType(header.getValue());
    }
 else     if ("Content-Disposition".equalsIgnoreCase(header.getKey())) {
      contentDisposition(header.getValue());
    }
 else     if ("Content-Encoding".equalsIgnoreCase(header.getKey())) {
      contentEncoding(header.getValue());
    }
 else     if ("Content-Language".equalsIgnoreCase(header.getKey())) {
      contentLanguage(header.getValue());
    }
 else     if ("Expires".equalsIgnoreCase(header.getKey())) {
      expires(header.getValue());
    }
  }
  return this;
}
