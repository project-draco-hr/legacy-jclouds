{
  assertEquals(injector.getInstance(Key.get(new TypeLiteral<Supplier<Set<String>>>(){
  }
,Region.class)).get(),ImmutableSet.<String>of("eucalyptus"));
  assertEquals(injector.getInstance(Key.get(new TypeLiteral<Supplier<Set<String>>>(){
  }
,Zone.class)).get(),ImmutableSet.<String>of("partner01"));
  Map<String,Supplier<URI>> regionToURISupplier=injector.getInstance(Key.get(new TypeLiteral<Supplier<Map<String,Supplier<URI>>>>(){
  }
,Region.class)).get();
  assertEquals(regionToURISupplier.get("eucalyptus").get(),URI.create("http://eucalyptus.partner.eucalyptus.com:8773/services/Eucalyptus"));
  Map<String,Supplier<Set<String>>> regionToZoneIdSupplier=injector.getInstance(Key.get(new TypeLiteral<Supplier<Map<String,Supplier<Set<String>>>>>(){
  }
,Zone.class)).get();
  assertEquals(regionToZoneIdSupplier.get("eucalyptus").get(),ImmutableSet.of("partner01"));
  Map<String,Supplier<URI>> zoneToURISupplier=injector.getInstance(Key.get(new TypeLiteral<Supplier<Map<String,Supplier<URI>>>>(){
  }
,Zone.class)).get();
  assertEquals(zoneToURISupplier.get("partner01").get(),URI.create("http://eucalyptus.partner.eucalyptus.com:8773/services/Eucalyptus"));
}
