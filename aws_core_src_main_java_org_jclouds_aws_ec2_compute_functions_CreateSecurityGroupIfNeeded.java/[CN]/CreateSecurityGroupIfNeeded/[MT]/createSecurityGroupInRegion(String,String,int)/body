{
  checkNotNull(region,"region");
  checkNotNull(name,"name");
  logger.debug(">> creating securityGroup region(%s) name(%s)",region,name);
  try {
    ec2Client.getSecurityGroupServices().createSecurityGroupInRegion(region,name,name);
    logger.debug("<< created securityGroup(%s)",name);
    for (    int port : ports) {
      logger.debug(">> authorizing securityGroup region(%s) name(%s) port(%s)",region,name,port);
      ec2Client.getSecurityGroupServices().authorizeSecurityGroupIngressInRegion(region,name,IpProtocol.TCP,port,port,"0.0.0.0/0");
      logger.debug("<< authorized securityGroup(%s)",name);
    }
    logger.debug(">> authorizing securityGroup region(%s) name(%s) permission to itself",region,name);
    String myOwnerId=Iterables.get(ec2Client.getSecurityGroupServices().describeSecurityGroupsInRegion(region),0).getOwnerId();
    ec2Client.getSecurityGroupServices().authorizeSecurityGroupIngressInRegion(region,name,new UserIdGroupPair(myOwnerId,name));
    logger.debug("<< authorized securityGroup(%s)",name);
  }
 catch (  AWSResponseException e) {
    if (e.getError().getCode().equals("InvalidGroup.Duplicate")) {
      logger.debug("<< reused securityGroup(%s)",name);
    }
 else {
      throw e;
    }
  }
}
