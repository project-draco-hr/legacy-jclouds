{
  final long minimumTTL=60 * 60;
  final String containerNameWithCDN=bucketPrefix + ".testCDNOperationsContainerWithCDN";
  final String containerNameWithoutCDN=bucketPrefix + ".testCDNOperationsContainerWithoutCDN";
  assertTrue(filesConnection.createContainer(containerNameWithCDN).get(10,TimeUnit.SECONDS));
  assertTrue(filesConnection.createContainer(containerNameWithoutCDN).get(10,TimeUnit.SECONDS));
  ContainerCDNMetadata cdnMetadata=null;
  final String cdnUri=cdnConnection.enableCDN(containerNameWithCDN);
  assertTrue(cdnUri != null);
  assertTrue(cdnUri.startsWith("http://"));
  cdnMetadata=cdnConnection.getCDNMetadata(containerNameWithCDN);
  assertTrue(cdnMetadata.isCdnEnabled());
  assertEquals(cdnMetadata.getCdnUri(),cdnUri);
  final long initialTTL=cdnMetadata.getTtl();
  cdnMetadata=cdnConnection.getCDNMetadata(containerNameWithoutCDN);
  assertEquals(cdnMetadata,null);
  cdnMetadata=cdnConnection.getCDNMetadata("DoesNotExist");
  assertEquals(cdnMetadata,null);
  List<ContainerCDNMetadata> cdnMetadataList=cdnConnection.listCDNContainers();
  assertTrue(cdnMetadataList.size() >= 1);
  assertTrue(Iterables.any(cdnMetadataList,new Predicate<ContainerCDNMetadata>(){
    public boolean apply(    ContainerCDNMetadata cdnMetadata){
      return (cdnMetadata.getName().equals(containerNameWithCDN) && cdnMetadata.isCdnEnabled() && cdnMetadata.getTtl() == initialTTL && cdnMetadata.getCdnUri().equals(cdnUri));
    }
  }
));
  cdnMetadataList=cdnConnection.listCDNContainers(ListCdnContainerOptions.Builder.enabledOnly());
  assertTrue(Iterables.all(cdnMetadataList,new Predicate<ContainerCDNMetadata>(){
    public boolean apply(    ContainerCDNMetadata cdnMetadata){
      return cdnMetadata.isCdnEnabled();
    }
  }
));
  cdnMetadataList=cdnConnection.listCDNContainers(ListCdnContainerOptions.Builder.afterMarker(containerNameWithCDN.substring(0,containerNameWithCDN.length() - 1)).maxResults(1));
  assertEquals(cdnMetadataList.size(),1);
  assertEquals(cdnMetadataList.get(0).getName(),containerNameWithCDN);
  long ttl=4000;
  cdnConnection.enableCDN(containerNameWithCDN,ttl);
  cdnMetadata=cdnConnection.getCDNMetadata(containerNameWithCDN);
  assertTrue(cdnMetadata.isCdnEnabled());
  assertEquals(cdnMetadata.getTtl(),ttl);
  ttl=minimumTTL;
  cdnConnection.updateCDN(containerNameWithCDN,minimumTTL);
  cdnMetadata=cdnConnection.getCDNMetadata(containerNameWithCDN);
  assertTrue(cdnMetadata.isCdnEnabled());
  assertEquals(cdnMetadata.getTtl(),minimumTTL);
  cdnConnection.updateCDN(containerNameWithCDN,3599L);
  cdnMetadata=cdnConnection.getCDNMetadata(containerNameWithCDN);
  assertEquals(cdnMetadata.getTtl(),minimumTTL);
  assertTrue(cdnConnection.disableCDN(containerNameWithCDN));
  cdnMetadata=cdnConnection.getCDNMetadata(containerNameWithCDN);
  assertEquals(cdnMetadata.isCdnEnabled(),false);
  assertTrue(filesConnection.deleteContainer(containerNameWithCDN).get(10,TimeUnit.SECONDS));
  assertTrue(filesConnection.deleteContainer(containerNameWithoutCDN).get(10,TimeUnit.SECONDS));
}
