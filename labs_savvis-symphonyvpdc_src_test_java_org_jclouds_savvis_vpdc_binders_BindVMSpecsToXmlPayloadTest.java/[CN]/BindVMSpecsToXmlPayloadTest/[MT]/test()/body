{
  CIMOperatingSystem os=Iterables.find(new Gson().<Set<CIMOperatingSystem>>fromJson(Strings2.toStringAndClose(getClass().getResourceAsStream("/savvis-symphonyvpdc/predefined_operatingsystems.json")),new TypeLiteral<Set<CIMOperatingSystem>>(){
  }
.getType()),new Predicate<CIMOperatingSystem>(){
    @Override public boolean apply(    CIMOperatingSystem arg0){
      return arg0.getOsType() == OSType.RHEL_64;
    }
  }
);
  String expected=Strings2.toStringAndClose(getClass().getResourceAsStream("/vm-multiple-default.xml"));
  VMSpec spec=VMSpec.builder().name("Test VM").operatingSystem(os).networkTierName("VM Tier01").build();
  assertEquals(new BindVMSpecsToXmlPayload().generateXml(ImmutableSet.of(spec)),expected);
}
