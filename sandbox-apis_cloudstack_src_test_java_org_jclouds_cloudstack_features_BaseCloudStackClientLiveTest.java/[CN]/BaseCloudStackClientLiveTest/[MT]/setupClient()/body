{
  setupCredentials();
  Properties overrides=setupProperties();
  context=new RestContextFactory().createContext(provider,ImmutableSet.<Module>of(new Log4JLoggingModule()),overrides);
  client=context.getApi();
  Iterable<User> users=Iterables.concat(client.getAccountClient().listAccounts());
  User currentUser=Iterables.find(users,UserPredicates.apiKeyEquals(identity));
  if (currentUser.getAccountType() != Account.Type.USER)   throw new IllegalArgumentException(String.format("invalid account type: %s, please specify an apiKey of a USER, for example: %s",currentUser.getAccountType(),Iterables.filter(users,UserPredicates.isUserAccount())));
  injector=Guice.createInjector(new SshjSshClientModule(),new Log4JLoggingModule());
  sshFactory=injector.getInstance(SshClient.Factory.class);
  socketTester=new RetryablePredicate<IPSocket>(new InetSocketAddressConnect(),180,1,1,TimeUnit.SECONDS);
  injector.injectMembers(socketTester);
  jobComplete=new RetryablePredicate<Long>(new JobComplete(client),1200,1,5,TimeUnit.SECONDS);
  injector.injectMembers(jobComplete);
  virtualMachineRunning=new RetryablePredicate<VirtualMachine>(new VirtualMachineRunning(client),600,5,5,TimeUnit.SECONDS);
  injector.injectMembers(virtualMachineRunning);
  virtualMachineDestroyed=new RetryablePredicate<VirtualMachine>(new VirtualMachineDestroyed(client),600,5,5,TimeUnit.SECONDS);
  injector.injectMembers(virtualMachineDestroyed);
  reuseOrAssociate=new ReuseOrAssociateNewPublicIPAddress(client,jobComplete);
  injector.injectMembers(reuseOrAssociate);
}
