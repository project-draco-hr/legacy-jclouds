{
  Iterable<? extends Org> orgs=checkNotNull(orgMap.get().values(),"orgs");
  Iterable<? extends Iterable<? extends Hardware>> sizes=transformParallel(orgs,new Function<Org,Future<? extends Iterable<? extends Hardware>>>(){
    @Override public Future<Iterable<? extends Hardware>> apply(    final Org from){
      checkNotNull(from,"org");
      return executor.submit(new Callable<Iterable<? extends Hardware>>(){
        @Override public Iterable<? extends Hardware> call() throws Exception {
          return sizesInOrg.apply(from);
        }
        @Override public String toString(){
          return "sizesInOrg(" + from.getHref() + ")";
        }
      }
);
    }
  }
,executor,null,logger,"sizes in " + orgs);
  return newLinkedHashSet(concat(sizes));
}
