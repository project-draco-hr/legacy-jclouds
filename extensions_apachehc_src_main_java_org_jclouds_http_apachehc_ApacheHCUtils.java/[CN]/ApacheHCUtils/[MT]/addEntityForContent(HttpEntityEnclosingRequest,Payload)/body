{
  payload=payload instanceof DelegatingPayload ? DelegatingPayload.class.cast(payload).getDelegate() : payload;
  if (payload instanceof StringPayload) {
    StringEntity nStringEntity=null;
    try {
      nStringEntity=new StringEntity((String)payload.getRawContent());
    }
 catch (    UnsupportedEncodingException e) {
      throw new UnsupportedOperationException("Encoding not supported",e);
    }
    nStringEntity.setContentType(payload.getContentType());
    apacheRequest.setEntity(nStringEntity);
  }
 else   if (payload instanceof FilePayload) {
    apacheRequest.setEntity(new FileEntity((File)payload.getRawContent(),payload.getContentType()));
  }
 else   if (payload instanceof ByteArrayPayload) {
    ByteArrayEntity Entity=new ByteArrayEntity((byte[])payload.getRawContent());
    Entity.setContentType(payload.getContentType());
    apacheRequest.setEntity(Entity);
  }
 else {
    InputStream inputStream=payload.getInput();
    if (payload.getContentLength() == null)     throw new IllegalArgumentException("you must specify size when content is an InputStream");
    InputStreamEntity Entity=new InputStreamEntity(inputStream,payload.getContentLength());
    Entity.setContentType(payload.getContentType());
    apacheRequest.setEntity(Entity);
  }
  if (payload.getContentDisposition() != null)   apacheRequest.addHeader("Content-Disposition",payload.getContentDisposition());
  if (payload.getContentEncoding() != null)   apacheRequest.addHeader("Content-Encoding",payload.getContentEncoding());
  if (payload.getContentLanguage() != null)   apacheRequest.addHeader("Content-Language",payload.getContentLanguage());
  assert(apacheRequest.getEntity() != null);
}
