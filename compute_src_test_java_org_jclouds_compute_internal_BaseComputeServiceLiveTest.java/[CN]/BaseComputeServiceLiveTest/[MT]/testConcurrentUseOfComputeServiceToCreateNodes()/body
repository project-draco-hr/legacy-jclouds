{
  final long timeoutMs=20 * 60 * 1000;
  List<String> groups=Lists.newArrayList();
  List<ListenableFuture<NodeMetadata>> futures=Lists.newArrayList();
  ListeningExecutorService executor=MoreExecutors.listeningDecorator(context.utils().userExecutor());
  try {
    for (int i=0; i < 2; i++) {
      final int groupNum=i;
      final String group="twin" + groupNum;
      groups.add(group);
      ListenableFuture<NodeMetadata> future=executor.submit(new Callable<NodeMetadata>(){
        public NodeMetadata call() throws Exception {
          NodeMetadata node=getOnlyElement(client.createNodesInGroup(group,1,inboundPorts(22,8080).blockOnPort(22,300 + groupNum)));
          getAnonymousLogger().info("Started node " + node.getId());
          return node;
        }
      }
);
      futures.add(future);
    }
    ListenableFuture<List<NodeMetadata>> compoundFuture=Futures.allAsList(futures);
    compoundFuture.get(timeoutMs,TimeUnit.MILLISECONDS);
  }
  finally {
    for (    String group : groups) {
      client.destroyNodesMatching(inGroup(group));
    }
  }
}
