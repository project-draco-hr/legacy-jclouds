{
  ImmutableMap<String,String> userMetadata=ImmutableMap.<String,String>of("test",group);
  ImmutableSet<String> tags=ImmutableSet.of(group);
  Stopwatch watch=new Stopwatch().start();
  NodeMetadata node=getOnlyElement(client.createNodesInGroup(group,1,inboundPorts(22,8080).blockOnPort(22,300).userMetadata(userMetadata).tags(tags)));
  long createSeconds=watch.elapsedTime(TimeUnit.SECONDS);
  final String nodeId=node.getId();
  checkUserMetadataContains(node,userMetadata);
  checkTagsInNodeEquals(node,tags);
  getAnonymousLogger().info(format("<< available node(%s) os(%s) in %ss",node.getId(),node.getOperatingSystem(),createSeconds));
  watch.reset().start();
  client.runScriptOnNode(nodeId,JettyStatements.install(),nameTask("configure-jetty"));
  long configureSeconds=watch.elapsedTime(TimeUnit.SECONDS);
  getAnonymousLogger().info(format("<< configured node(%s) with %s and jetty %s in %ss",nodeId,exec(nodeId,"java -fullversion"),exec(nodeId,JettyStatements.version()),configureSeconds));
  trackAvailabilityOfProcessOnNode(JettyStatements.start(),"start jetty",node);
  client.runScriptOnNode(nodeId,JettyStatements.stop(),runAsRoot(false).wrapInInitScript(false));
  trackAvailabilityOfProcessOnNode(JettyStatements.start(),"start jetty",node);
}
