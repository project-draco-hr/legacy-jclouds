{
  return new AbstractModule(){
    @Override protected void configure(){
      Properties props=new Properties();
      props.put(PROPERTY_VCLOUD_DEFAULT_NETWORK,"https://vcloud.safesecureweb.com/network/1990");
      Jsr330.bindProperties(binder(),checkNotNull(new TerremarkVCloudPropertiesBuilder(props).build(),"properties"));
      bind(URI.class).annotatedWith(Catalog.class).toInstance(URI.create("http://catalog"));
      bind(String.class).annotatedWith(CatalogItemRoot.class).toInstance("http://catalogItem");
      bind(URI.class).annotatedWith(VCloudApi.class).toInstance(URI.create("http://vcloud"));
      bind(String.class).annotatedWith(VAppRoot.class).toInstance("http://vapp");
      bind(URI.class).annotatedWith(VDC.class).toInstance(URI.create("http://vdc"));
      bind(URI.class).annotatedWith(Network.class).toInstance(URI.create("http://network"));
      bind(SetVCloudTokenCookie.class).toInstance(new SetVCloudTokenCookie(new Provider<String>(){
        public String get(){
          return "token";
        }
      }
));
      bind(Logger.LoggerFactory.class).toInstance(new LoggerFactory(){
        public Logger getLogger(        String category){
          return Logger.NULL;
        }
      }
);
    }
    @SuppressWarnings("unused") @Singleton @Provides @Named("CreateInternetService") String provideCreateInternetService() throws IOException {
      return Utils.toStringAndClose(getClass().getResourceAsStream("/terremark/CreateInternetService.xml"));
    }
    @SuppressWarnings("unused") @Singleton @Provides @Named("CreateNodeService") String provideCreateNodeService() throws IOException {
      return Utils.toStringAndClose(getClass().getResourceAsStream("/terremark/CreateNodeService.xml"));
    }
  }
;
}
