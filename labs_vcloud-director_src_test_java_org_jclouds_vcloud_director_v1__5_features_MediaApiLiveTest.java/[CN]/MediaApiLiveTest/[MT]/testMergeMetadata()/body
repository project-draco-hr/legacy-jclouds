{
  Set<MetadataEntry> inputEntries=ImmutableSet.of(MetadataEntry.builder().entry("testKey","testValue").build());
  Metadata inputMetadata=Metadata.builder().entries(inputEntries).build();
  Task mergeMetadata=mediaApi.getMetadataApi().merge(media.getHref(),inputMetadata);
  Checks.checkTask(mergeMetadata);
  assertTrue(retryTaskSuccess.apply(mergeMetadata),String.format(TASK_COMPLETE_TIMELY,"mergeMetadata(new)"));
  metadata=mediaApi.getMetadataApi().get(media.getHref());
  Checks.checkMetadataFor(MEDIA,metadata);
  checkMetadataContainsEntries(metadata,inputEntries);
  media=mediaApi.getMedia(media.getHref());
  Checks.checkMediaFor(MEDIA,media);
  inputEntries=ImmutableSet.of(MetadataEntry.builder().entry("testKey","new testValue").build());
  inputMetadata=Metadata.builder().entries(inputEntries).build();
  mergeMetadata=mediaApi.getMetadataApi().merge(media.getHref(),inputMetadata);
  Checks.checkTask(mergeMetadata);
  assertTrue(retryTaskSuccess.apply(mergeMetadata),String.format(TASK_COMPLETE_TIMELY,"mergeMetadata(edit)"));
  metadata=mediaApi.getMetadataApi().get(media.getHref());
  Checks.checkMetadataFor(MEDIA,metadata);
  checkMetadataContainsEntries(metadata,inputEntries);
  media=mediaApi.getMedia(media.getHref());
  Checks.checkMediaFor(MEDIA,media);
}
