{
  install(new ComputeServiceTimeoutsModule());
  bind(AddNodeWithTagStrategy.class).to(TerremarkVCloudAddNodeWithTagStrategy.class);
  bind(new TypeLiteral<ComputeServiceContext>(){
  }
).to(new TypeLiteral<ComputeServiceContextImpl<VCloudExpressClient,VCloudExpressAsyncClient>>(){
  }
).in(Scopes.SINGLETON);
  bind(RunNodesAndAddToSetStrategy.class).to(TerremarkEncodeTagIntoNameRunNodesAndAddToSetStrategy.class);
  bind(ListNodesStrategy.class).to(VCloudExpressListNodesStrategy.class);
  bind(new TypeLiteral<Function<VCloudExpressVApp,NodeMetadata>>(){
  }
).to(TerremarkVCloudExpressVAppToNodeMetadata.class);
  bind(GetNodeMetadataStrategy.class).to(VCloudExpressGetNodeMetadataStrategy.class);
  bind(RebootNodeStrategy.class).to(VCloudExpressRebootNodeStrategy.class);
  bind(DestroyNodeStrategy.class).to(VCloudExpressDestroyNodeStrategy.class);
  bindLoadBalancer();
  bind(new TypeLiteral<Function<NodeMetadata,OrgAndName>>(){
  }
).to(new TypeLiteral<NodeMetadataToOrgAndName>(){
  }
);
  bind(TemplateOptions.class).to(TerremarkVCloudTemplateOptions.class);
  bind(ComputeService.class).to(TerremarkVCloudComputeService.class);
  bind(VCloudExpressComputeClient.class).to(TerremarkVCloudComputeClient.class);
  bind(PopulateDefaultLoginCredentialsForImageStrategy.class).to(ParseVAppTemplateDescriptionToGetDefaultLoginCredentials.class);
  bind(SecureRandom.class).toInstance(new SecureRandom());
}
