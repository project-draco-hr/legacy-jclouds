{
  HttpRequest runInstancesRequest=formSigner.filter(HttpRequest.builder().method("POST").endpoint("https://ec2." + region + ".amazonaws.com/").addHeader("Host","ec2." + region + ".amazonaws.com").addFormParam("Action","RunInstances").addFormParam("IamInstanceProfile.Name","Webserver").addFormParam("ImageId","ami-be3adfd7").addFormParam("InstanceType","m1.small").addFormParam("MaxCount","1").addFormParam("MinCount","1").addFormParam("SecurityGroup.1","jclouds#test").addFormParam("UserData","I2Nsb3VkLWNvbmZpZwpyZXBvX3VwZ3JhZGU6IG5vbmUK").build());
  Builder<HttpRequest,HttpResponse> requestResponseMap=ImmutableMap.<HttpRequest,HttpResponse>builder();
  requestResponseMap.put(describeRegionsRequest,describeRegionsResponse);
  requestResponseMap.put(describeAvailabilityZonesRequest,describeAvailabilityZonesResponse);
  requestResponseMap.put(describeImagesRequest,describeImagesResponse);
  requestResponseMap.put(createKeyPairRequest,createKeyPairResponse);
  requestResponseMap.put(createSecurityGroupRequest,createSecurityGroupResponse);
  requestResponseMap.put(describeSecurityGroupRequest,describeSecurityGroupResponse);
  requestResponseMap.put(authorizeSecurityGroupIngressRequest22,authorizeSecurityGroupIngressResponse);
  requestResponseMap.put(authorizeSecurityGroupIngressRequestGroup,authorizeSecurityGroupIngressResponse);
  requestResponseMap.put(runInstancesRequest,runInstancesResponse);
  requestResponseMap.put(describeInstanceRequest,describeInstanceResponse);
  requestResponseMap.put(describeImageRequest,describeImagesResponse);
  ComputeService apiThatCreatesNode=requestsSendResponses(requestResponseMap.build());
  NodeMetadata node=Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup("test",1,blockUntilRunning(false).iamInstanceProfileName("Webserver").noKeyPair()));
  assertEquals(node.getId(),"us-east-1/i-2baa5550");
}
