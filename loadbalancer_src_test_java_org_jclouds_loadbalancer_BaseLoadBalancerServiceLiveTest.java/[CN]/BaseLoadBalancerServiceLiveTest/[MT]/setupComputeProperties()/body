{
  Properties overrides=new Properties();
  overrides.setProperty(Constants.PROPERTY_TRUST_ALL_CERTS,"true");
  overrides.setProperty(Constants.PROPERTY_RELAX_HOSTNAME,"true");
  computeProvider=setIfTestSystemPropertyPresent(overrides,provider + ".compute.provider");
  computeIdentity=setIfTestSystemPropertyPresent(overrides,provider + ".compute.identity");
  computeCredential=setIfTestSystemPropertyPresent(overrides,provider + ".compute.credential");
  computeEndpoint=setIfTestSystemPropertyPresent(overrides,provider + ".compute.endpoint");
  computeApiversion=setIfTestSystemPropertyPresent(overrides,provider + ".compute.api-version");
  computeBuildversion=setIfTestSystemPropertyPresent(overrides,provider + ".compute.build-version");
  String spec=setIfTestSystemPropertyPresent(overrides,provider + ".compute.template");
  if (spec != null) {
    template=TemplateBuilderSpec.parse(spec);
    if (template.getLoginUser() != null) {
      Iterable<String> userPass=Splitter.on(':').split(template.getLoginUser());
      Builder loginCredentialsBuilder=LoginCredentials.builder();
      loginCredentialsBuilder.user(Iterables.get(userPass,0));
      if (Iterables.size(userPass) == 2)       loginCredentialsBuilder.password(Iterables.get(userPass,1));
      if (template.getAuthenticateSudo() != null)       loginCredentialsBuilder.authenticateSudo(template.getAuthenticateSudo());
      loginCredentials=loginCredentialsBuilder.build();
    }
  }
  return overrides;
}
