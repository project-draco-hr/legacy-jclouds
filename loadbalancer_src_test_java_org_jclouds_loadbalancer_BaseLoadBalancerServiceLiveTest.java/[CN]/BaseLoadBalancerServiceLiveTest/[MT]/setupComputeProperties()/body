{
  Properties overrides=new Properties();
  overrides.setProperty(Constants.PROPERTY_TRUST_ALL_CERTS,"true");
  overrides.setProperty(Constants.PROPERTY_RELAX_HOSTNAME,"true");
  computeProvider=setIfTestSystemPropertyPresent(overrides,provider + ".compute.provider");
  computeIdentity=setIfTestSystemPropertyPresent(overrides,provider + ".compute.identity");
  computeCredential=setIfTestSystemPropertyPresent(overrides,provider + ".compute.credential");
  computeEndpoint=setIfTestSystemPropertyPresent(overrides,provider + ".compute.endpoint");
  computeApiversion=setIfTestSystemPropertyPresent(overrides,provider + ".compute.api-version");
  computeBuildversion=setIfTestSystemPropertyPresent(overrides,provider + ".compute.build-version");
  imageId=setIfTestSystemPropertyPresent(overrides,provider + ".compute.image-id");
  loginUser=setIfTestSystemPropertyPresent(overrides,provider + ".compute.image.login-user");
  authenticateSudo=setIfTestSystemPropertyPresent(overrides,provider + ".compute.image.authenticate-sudo");
  if (loginUser != null) {
    Iterable<String> userPass=Splitter.on(':').split(loginUser);
    Builder loginCredentialsBuilder=LoginCredentials.builder();
    loginCredentialsBuilder.user(Iterables.get(userPass,0));
    if (Iterables.size(userPass) == 2)     loginCredentialsBuilder.password(Iterables.get(userPass,1));
    if (authenticateSudo != null)     loginCredentialsBuilder.authenticateSudo(Boolean.valueOf(authenticateSudo));
    loginCredentials=loginCredentialsBuilder.build();
  }
  return overrides;
}
