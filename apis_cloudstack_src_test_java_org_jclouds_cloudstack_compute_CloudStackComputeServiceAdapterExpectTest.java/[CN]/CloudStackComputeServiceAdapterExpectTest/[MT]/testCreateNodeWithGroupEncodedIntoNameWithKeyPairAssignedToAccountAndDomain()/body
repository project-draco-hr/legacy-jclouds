{
  HttpRequest deployVM=HttpRequest.builder().method("GET").endpoint("http://localhost:8080/client/api").addQueryParam("response","json").addQueryParam("command","deployVirtualMachine").addQueryParam("zoneid","1").addQueryParam("serviceofferingid","1").addQueryParam("templateid","4").addQueryParam("displayname","test-e92").addQueryParam("name","test-e92").addQueryParam("account","account").addQueryParam("domainid","domainId").addQueryParam("networkids","204").addQueryParam("keypair","mykeypair").addQueryParam("apiKey","APIKEY").addQueryParam("signature","ly5Pip8ICOoVTmNLdDBTc3gbKlA%3D").addHeader("Accept","application/json").build();
  Map<HttpRequest,HttpResponse> requestResponseMap=ImmutableMap.<HttpRequest,HttpResponse>builder().put(listTemplates,listTemplatesResponse).put(listOsTypes,listOsTypesResponse).put(listOsCategories,listOsCategoriesResponse).put(listZones,listZonesResponse).put(listServiceOfferings,listServiceOfferingsResponse).put(listAccounts,listAccountsResponse).put(listNetworks,listNetworksResponse).put(getZone,getZoneResponse).put(deployVM,deployVMResponse).put(queryAsyncJobResult,queryAsyncJobResultResponse).build();
  Injector forKeyPair=requestsSendResponses(requestResponseMap);
  Template template=forKeyPair.getInstance(TemplateBuilder.class).osFamily(OsFamily.CENTOS).build();
  template.getOptions().as(CloudStackTemplateOptions.class).keyPair("mykeypair").account("account").domainId("domainId").setupStaticNat(false);
  CloudStackComputeServiceAdapter adapter=forKeyPair.getInstance(CloudStackComputeServiceAdapter.class);
  NodeAndInitialCredentials<VirtualMachine> server=adapter.createNodeWithGroupEncodedIntoName("test","test-e92",template);
  assertNotNull(server);
  assertEquals(server.getCredentials(),LoginCredentials.builder().password("dD7jwajkh").build());
}
