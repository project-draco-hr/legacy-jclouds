{
  final String group1Name=PREFIX + "ingress11";
  String group2Name=PREFIX + "ingress12";
  cleanupAndSleep(group2Name);
  cleanupAndSleep(group1Name);
  try {
    String group1Id=AWSSecurityGroupClient.class.cast(client).createSecurityGroupInRegionAndReturnId(null,group1Name,group1Name);
    String group2Id=AWSSecurityGroupClient.class.cast(client).createSecurityGroupInRegionAndReturnId(null,group2Name,group2Name);
    Thread.sleep(100);
    ensureGroupsExist(group1Name,group2Name);
    AWSSecurityGroupClient.class.cast(client).authorizeSecurityGroupIngressInRegion(null,group1Id,IpPermissions.permit(IpProtocol.TCP).port(80));
    assertEventually(new GroupHasPermission(client,group1Name,new TCPPort80AllIPs()));
    Set<SecurityGroup> oneResult=client.describeSecurityGroupsInRegion(null,group1Name);
    assertNotNull(oneResult);
    assertEquals(oneResult.size(),1);
    final SecurityGroup group=oneResult.iterator().next();
    assertEquals(group.getName(),group1Name);
    IpPermissions group2CanHttpGroup1=IpPermissions.permit(IpProtocol.TCP).fromPort(80).originatingFromSecurityGroupId(group1Id);
    AWSSecurityGroupClient.class.cast(client).authorizeSecurityGroupIngressInRegion(null,group2Id,group2CanHttpGroup1);
    assertEventually(new GroupHasPermission(client,group2Name,new Predicate<IpPermission>(){
      @Override public boolean apply(      IpPermission arg0){
        return arg0.getUserIdGroupPairs().equals(ImmutableMultimap.of(group.getOwnerId(),group1Name)) && arg0.getFromPort() == 80 && arg0.getToPort() == 80 && arg0.getIpProtocol() == IpProtocol.TCP;
      }
    }
));
    AWSSecurityGroupClient.class.cast(client).revokeSecurityGroupIngressInRegion(null,group2Id,group2CanHttpGroup1);
    assertEventually(new GroupHasNoPermissions(client,group2Name));
  }
  finally {
    client.deleteSecurityGroupInRegion(null,group2Name);
    client.deleteSecurityGroupInRegion(null,group1Name);
  }
}
