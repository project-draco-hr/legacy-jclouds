{
  method=annotationProcessor.getDelegateOrNull(method);
  logger.trace("Converting %s.%s",declaring.getSimpleName(),method.getName());
  Function<Exception,?> exceptionParser=annotationProcessor.createExceptionParserOrThrowResourceNotFoundOn404IfNoAnnotation(method);
  if (exceptionParser instanceof InvocationContext) {
    ((InvocationContext)exceptionParser).setContext((HttpRequest)null);
  }
  ListenableFuture<?> result;
  try {
    GeneratedHttpRequest request=annotationProcessor.createRequest(method,args);
    if (exceptionParser instanceof InvocationContext) {
      ((InvocationContext)exceptionParser).setContext(request);
    }
    logger.trace("Converted %s.%s to %s",declaring.getSimpleName(),method.getName(),request.getRequestLine());
    Function<HttpResponse,?> transformer=annotationProcessor.createResponseParser(method,request);
    logger.trace("Response from %s.%s is parsed by %s",declaring.getSimpleName(),method.getName(),transformer.getClass().getSimpleName());
    logger.debug("Invoking %s.%s",declaring.getSimpleName(),method.getName());
    result=commandFactory.create(request,transformer).execute();
  }
 catch (  RuntimeException e) {
    AuthorizationException aex=Throwables2.getFirstThrowableOfType(e,AuthorizationException.class);
    if (aex != null)     e=aex;
    if (exceptionParser != null) {
      try {
        return Futures.immediateFuture(exceptionParser.apply(e));
      }
 catch (      Exception ex) {
        return Futures.immediateFailedFuture(ex);
      }
    }
    return Futures.immediateFailedFuture(e);
  }
  if (exceptionParser != null) {
    logger.trace("Exceptions from %s.%s are parsed by %s",declaring.getSimpleName(),method.getName(),exceptionParser.getClass().getSimpleName());
    result=new ExceptionParsingListenableFuture(result,exceptionParser);
  }
  return result;
}
