{
  method=annotationProcessor.getDelegateOrNull(method);
  logger.trace("Converting %s.%s",declaring.getSimpleName(),method.getName());
  FutureFallback<?> fallback=fallbacks.getUnchecked(method);
  if (fallback instanceof InvocationContext) {
    InvocationContext.class.cast(fallback).setContext((HttpRequest)null);
  }
  ListenableFuture<?> result;
  try {
    GeneratedHttpRequest request=annotationProcessor.createRequest(method,args);
    if (fallback instanceof InvocationContext) {
      InvocationContext.class.cast(fallback).setContext(request);
    }
    logger.trace("Converted %s.%s to %s",declaring.getSimpleName(),method.getName(),request.getRequestLine());
    Function<HttpResponse,?> transformer=annotationProcessor.createResponseParser(method,request);
    logger.trace("Response from %s.%s is parsed by %s",declaring.getSimpleName(),method.getName(),transformer.getClass().getSimpleName());
    logger.debug("Invoking %s.%s",declaring.getSimpleName(),method.getName());
    result=commandFactory.create(request,transformer).execute();
  }
 catch (  RuntimeException e) {
    AuthorizationException aex=Throwables2.getFirstThrowableOfType(e,AuthorizationException.class);
    if (aex != null)     e=aex;
    try {
      return fallback.create(e);
    }
 catch (    Exception ex) {
      return immediateFailedFuture(ex);
    }
  }
  logger.trace("Exceptions from %s.%s are parsed by %s",declaring.getSimpleName(),method.getName(),fallback.getClass().getSimpleName());
  return withFallback(result,fallback);
}
