{
  Set<? extends NodeMetadata> deadNodesGroup1=(Set)ImmutableSet.builder().add(new IdAndGroupOnlyNodeMetadata("a","1",NodeMetadata.Status.TERMINATED)).build();
  Set<? extends NodeMetadata> deadNodesGroup2=(Set)ImmutableSet.builder().add(new IdAndGroupOnlyNodeMetadata("b","2",NodeMetadata.Status.RUNNING)).build();
  Set<? extends NodeMetadata> allDeadNodes=Sets.union(deadNodesGroup1,deadNodesGroup2);
  ComputeService mock=createMock(ComputeService.class);
  expect(mock.listNodesDetailsMatching(EasyMock.<Predicate<ComputeMetadata>>anyObject())).andReturn((Set)deadNodesGroup1).once();
  expect(mock.listNodesDetailsMatching(EasyMock.<Predicate<ComputeMetadata>>anyObject())).andReturn((Set)deadNodesGroup2).once();
  replay(mock);
  OrphanedGroupsFromDeadNodes orphanedGroupsFromDeadNodes=new OrphanedGroupsFromDeadNodes(new AllNodesInGroupTerminated(mock));
  Set<String> orphanedGroups=orphanedGroupsFromDeadNodes.apply(allDeadNodes);
  assertSame(orphanedGroups.size(),1);
  assertTrue(orphanedGroups.contains("1"));
}
