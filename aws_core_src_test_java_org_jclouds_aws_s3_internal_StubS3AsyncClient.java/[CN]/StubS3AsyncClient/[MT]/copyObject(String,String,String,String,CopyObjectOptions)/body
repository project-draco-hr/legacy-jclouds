{
  final CopyObjectOptions options=(nullableOptions.length == 0) ? new CopyObjectOptions() : nullableOptions[0];
  ConcurrentMap<String,Blob> source=blobStore.getContainerToBlobs().get(sourceBucket);
  ConcurrentMap<String,Blob> dest=blobStore.getContainerToBlobs().get(destinationBucket);
  if (source.containsKey(sourceObject)) {
    Blob object=source.get(sourceObject);
    if (options.getIfMatch() != null) {
      if (!object.getMetadata().getETag().equals(options.getIfMatch()))       return immediateFailedFuture(blobStore.returnResponseException(412));
    }
    if (options.getIfNoneMatch() != null) {
      if (object.getMetadata().getETag().equals(options.getIfNoneMatch()))       return immediateFailedFuture(blobStore.returnResponseException(412));
    }
    if (options.getIfModifiedSince() != null) {
      Date modifiedSince=dateService.rfc822DateParse(options.getIfModifiedSince());
      if (modifiedSince.after(object.getMetadata().getLastModified()))       return immediateFailedFuture(blobStore.returnResponseException(412));
    }
    if (options.getIfUnmodifiedSince() != null) {
      Date unmodifiedSince=dateService.rfc822DateParse(options.getIfUnmodifiedSince());
      if (unmodifiedSince.before(object.getMetadata().getLastModified()))       return immediateFailedFuture(blobStore.returnResponseException(412));
    }
    Blob sourceS3=source.get(sourceObject);
    MutableBlobMetadata newMd=blobStore.copy(sourceS3.getMetadata(),destinationObject);
    if (options.getAcl() != null)     keyToAcl.put(destinationBucket + "/" + destinationObject,options.getAcl());
    newMd.setLastModified(new Date());
    Blob newBlob=blobProvider.create(newMd);
    newBlob.setPayload(sourceS3.getContent());
    dest.put(destinationObject,newBlob);
    return immediateFuture((ObjectMetadata)blob2ObjectMetadata.apply(blobStore.copy(newMd)));
  }
  return immediateFailedFuture(new KeyNotFoundException(sourceBucket,sourceObject));
}
