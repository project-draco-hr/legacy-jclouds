{
  ComputeService compute=requestsSendResponses(ImmutableMap.<HttpRequest,HttpResponse>builder().put(versionsRequest,versionsResponseFromVCD1_5).put(version1_0LoginRequest,successfulVersion1_0LoginResponseFromVCD1_5WithSingleOrg).put(version1_0GetOrgRequest,successfulVersion1_0GetOrgResponseFromVCD1_5WithSingleTasksListVDCAndNetwork).put(version1_0GetCatalogRequest,successfulVersion1_0GetCatalogResponseFromVCD1_5WithSingleTemplate).put(version1_0GetCatalogItemRequest,successfulVersion1_0GetCatalogItemResponseFromVCD1_5ForTemplate).put(version1_0GetVDCRequest,successfulVersion1_0GetVDCResponseFromVCD1_5WithSingleTemplateAndNetwork).put(version1_0GetVAppTemplateRequest,successfulVersion1_0GetVAppTemplateResponseFromVCD1_5WithSingleVMAndVDCParent).put(version1_0GetOVFForVAppTemplateRequest,successfulVersion1_0GetOVFForVAppTemplateResponseFromVCD1_5WithSingleVM).build());
  VCloudComputeServiceAdapter adapter=compute.getContext().utils().injector().getInstance(VCloudComputeServiceAdapter.class);
  Iterable<VAppTemplate> hardwareProfiles=adapter.listHardwareProfiles();
  Iterable<URI> hardwareProfileRefs=Iterables.transform(ImmutableList.copyOf(hardwareProfiles),new Function<VAppTemplate,URI>(){
    @Override public URI apply(    VAppTemplate input){
      return input.getHref();
    }
  }
);
  assertEquals(ImmutableSet.copyOf(hardwareProfileRefs),ImmutableSet.of(URI.create("https://zone.myvcloud.com/api/v1.0/vAppTemplate/vappTemplate-51891b97-c5dd-47dc-a687-aabae354f728")));
}
