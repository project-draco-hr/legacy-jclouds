{
  boolean is64Bit=and(not(containsPattern("32bit")),or(containsPattern("64bit"),not(containsPattern("Windows")))).apply(input);
  if (input.contains("Windows")) {
    String version=null;
    Matcher matcher=Pattern.compile(".*(20[01][0-9] R[1-9]).*").matcher(input);
    if (matcher.find()) {
      version=matcher.group(1);
    }
 else {
      matcher=Pattern.compile(".*(20[01][0-9]).*").matcher(input);
      if (matcher.find())       version=matcher.group(1);
    }
    return new OsFamilyVersion64Bit(OsFamily.WINDOWS,osVersionMap.get(OsFamily.WINDOWS).get(version),is64Bit);
  }
 else {
    Matcher matcher=PATTERN.matcher(input);
    if (matcher.find()) {
      OsFamily fam=OsFamily.fromValue(matcher.group(1).toLowerCase());
switch (fam) {
case UNRECOGNIZED:
        return new OsFamilyVersion64Bit(OsFamily.UNRECOGNIZED,null,is64Bit);
    }
    return new OsFamilyVersion64Bit(fam,ComputeServiceUtils.parseVersionOrReturnEmptyString(fam,matcher.group(2),osVersionMap),is64Bit);
  }
 else {
    return new OsFamilyVersion64Bit(OsFamily.UNRECOGNIZED,null,is64Bit);
  }
}
}
