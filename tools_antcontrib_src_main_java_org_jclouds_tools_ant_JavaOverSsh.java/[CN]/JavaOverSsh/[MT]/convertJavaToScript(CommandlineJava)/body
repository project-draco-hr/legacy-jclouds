{
  checkNotNull(jvm,"jvm must be set");
  checkNotNull(localDirectory,"dir must be set");
  checkNotNull(remoteDirectory,"remotedir must be set");
  List<Statement> statements=Lists.newArrayList();
  String[] environment=env.getVariables();
  if (environment != null) {
    for (int i=0; i < environment.length; i++) {
      log("Setting environment variable: " + environment[i],Project.MSG_VERBOSE);
      statements.add(exec("{export} " + environment[i]));
    }
  }
  statements.add(exec("{cd} " + remoteDirectory));
  statements.add(exec("jar -xf cwd.zip"));
  StringBuilder commandBuilder=new StringBuilder(jvm);
  if (commandLine.getBootclasspath() != null && commandLine.getBootclasspath().list().length > 0) {
    commandBuilder.append(" -Xbootclasspath:boot-classpath.jar");
  }
  if (commandLine.getVmCommand().getArguments() != null && commandLine.getVmCommand().getArguments().length > 0) {
    commandBuilder.append(" ");
    String[] variables=commandLine.getVmCommand().getArguments();
    for (int i=0; i < variables.length; i++) {
      commandBuilder.append(variables[i]);
      if (i + 1 < variables.length)       commandBuilder.append(" ");
    }
  }
  if (commandLine.getClasspath() != null && commandLine.getClasspath().list().length > 0) {
    commandBuilder.append(" -cp classpath.jar");
  }
  if (commandLine.getSystemProperties() != null && commandLine.getSystemProperties().getVariables() != null && commandLine.getSystemProperties().getVariables().length > 0) {
    commandBuilder.append(" ");
    String[] variables=commandLine.getSystemProperties().getVariables();
    for (int i=0; i < variables.length; i++) {
      commandBuilder.append(variables[i]);
      if (i + 1 < variables.length)       commandBuilder.append(" ");
    }
  }
  commandBuilder.append(" ").append(commandLine.getClassname());
  if (commandLine.getJavaCommand().getArguments() != null && commandLine.getJavaCommand().getArguments().length > 0) {
    commandBuilder.append(" ");
    String[] variables=commandLine.getJavaCommand().getArguments();
    for (int i=0; i < variables.length; i++) {
      commandBuilder.append(variables[i]);
      if (i + 1 < variables.length)       commandBuilder.append(" ");
    }
  }
  statements.add(exec(commandBuilder.toString()));
  String command=new StatementList(statements).render(osFamily);
  return command;
}
