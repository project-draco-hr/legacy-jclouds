{
  List<Statement> statements=Lists.newArrayList();
  String[] environment=env.getVariables();
  if (environment != null) {
    for (int i=0; i < environment.length; i++) {
      log("Setting environment variable: " + environment[i],Project.MSG_VERBOSE);
      String[] keyValue=environment[i].split("=");
      statements.add(exec(String.format("{export} %s={vq}%s{vq}",keyValue[0],keyValue[1])));
    }
  }
  statements.add(exec("{cd} " + remoteDirectory));
  StringBuilder commandBuilder=new StringBuilder(jvm);
  if (getCommandLine().getBootclasspath() != null) {
    commandBuilder.append(" -Xbootclasspath:bootclasspath");
    resetPathToUnderPrefixIfExistsAndIsFileIfNotExistsAddAsIs(commandLine.getBootclasspath(),"bootclasspath",commandBuilder);
  }
  if (commandLine.getVmCommand().getArguments() != null && commandLine.getVmCommand().getArguments().length > 0) {
    commandBuilder.append(" ").append(Joiner.on(' ').join(commandLine.getVmCommand().getArguments()));
  }
  commandBuilder.append(" -cp classpath");
  resetPathToUnderPrefixIfExistsAndIsFileIfNotExistsAddAsIs(commandLine.getClasspath(),"classpath",commandBuilder);
  if (commandLine.getSystemProperties() != null && commandLine.getSystemProperties().getVariables() != null && commandLine.getSystemProperties().getVariables().length > 0) {
    commandBuilder.append(" ").append(Joiner.on(' ').join(commandLine.getSystemProperties().getVariables()));
  }
  commandBuilder.append(" ").append(commandLine.getClassname());
  if (commandLine.getJavaCommand().getArguments() != null && commandLine.getJavaCommand().getArguments().length > 0) {
    commandBuilder.append(" ").append(Joiner.on(' ').join(commandLine.getJavaCommand().getArguments()));
  }
  statements.add(exec(commandBuilder.toString()));
  String command=new StatementList(statements).render(osFamily);
  return command;
}
