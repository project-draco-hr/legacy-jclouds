{
  return new FutureBase<S3Bucket>(){
    public S3Bucket get() throws InterruptedException, ExecutionException {
      final Map<String,S3Object> realContents=bucketToContents.get(name);
      if (realContents == null)       return S3Bucket.NOT_FOUND;
      SortedSet<S3Object.Metadata> contents=Sets.newTreeSet(Iterables.transform(realContents.keySet(),new Function<String,S3Object.Metadata>(){
        public S3Object.Metadata apply(        String key){
          return realContents.get(key).getMetadata();
        }
      }
));
      S3Bucket returnVal=new S3Bucket(name);
      final String marker=getFirstQueryOrNull(S3Constants.MARKER,options);
      if (marker != null) {
        S3Object.Metadata lastMarkerMetadata=Iterables.find(contents,new Predicate<S3Object.Metadata>(){
          public boolean apply(          S3Object.Metadata metadata){
            return metadata.getKey().equals(marker);
          }
        }
);
        contents=contents.tailSet(lastMarkerMetadata);
        contents.remove(lastMarkerMetadata);
        returnVal.setMarker(marker);
      }
      final String prefix=getFirstQueryOrNull(S3Constants.PREFIX,options);
      if (prefix != null) {
        contents=Sets.newTreeSet(Iterables.filter(contents,new Predicate<S3Object.Metadata>(){
          public boolean apply(          S3Object.Metadata o){
            return (o != null && o.getKey().startsWith(prefix));
          }
        }
));
        returnVal.setPrefix(prefix);
      }
      final String delimiter=getFirstQueryOrNull(S3Constants.DELIMITER,options);
      if (delimiter != null) {
        Iterable<String> iterable=Iterables.transform(contents,new CommonPrefixes(prefix != null ? prefix : null,delimiter));
        SortedSet<String> commonPrefixes=iterable != null ? Sets.newTreeSet(iterable) : new TreeSet<String>();
        commonPrefixes.remove(CommonPrefixes.NO_PREFIX);
        contents=Sets.newTreeSet(Iterables.filter(contents,new DelimiterFilter(prefix != null ? prefix : null,delimiter)));
        returnVal.setCommonPrefixes(commonPrefixes);
        returnVal.setDelimiter(delimiter);
      }
      final String maxKeysString=getFirstQueryOrNull(S3Constants.MAX_KEYS,options);
      if (maxKeysString != null) {
        int maxKeys=Integer.parseInt(maxKeysString);
        SortedSet<S3Object.Metadata> contentsSlice=firstSliceOfSize(contents,maxKeys);
        returnVal.setMaxKeys(maxKeys);
        if (!contentsSlice.contains(contents.last())) {
          returnVal.setTruncated(true);
          returnVal.setMarker(contentsSlice.last().getKey());
        }
 else {
          returnVal.setTruncated(false);
          returnVal.setMarker(null);
        }
        contents=contentsSlice;
      }
      returnVal.setContents(contents);
      return returnVal;
    }
  }
;
}
