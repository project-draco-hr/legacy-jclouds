{
  final ListBucketOptions options=(optionsList.length == 0) ? new ListBucketOptions() : optionsList[0];
  return new FutureBase<ListBucketResponse>(){
    public ListBucketResponse get() throws InterruptedException, ExecutionException {
      final Map<String,S3Object> realContents=getContainerToBlobs().get(name);
      if (realContents == null)       throw new ContainerNotFoundException("name");
      SortedSet<ObjectMetadata> contents=Sets.newTreeSet(Iterables.transform(realContents.keySet(),new Function<String,ObjectMetadata>(){
        public ObjectMetadata apply(        String key){
          return realContents.get(key).getMetadata();
        }
      }
));
      String marker=getFirstQueryOrNull(S3Constants.MARKER,options);
      if (marker != null) {
        final String finalMarker=marker;
        ObjectMetadata lastMarkerMetadata=Iterables.find(contents,new Predicate<ObjectMetadata>(){
          public boolean apply(          ObjectMetadata metadata){
            return metadata.getName().equals(finalMarker);
          }
        }
);
        contents=contents.tailSet(lastMarkerMetadata);
        contents.remove(lastMarkerMetadata);
      }
      final String prefix=getFirstQueryOrNull(S3Constants.PREFIX,options);
      if (prefix != null) {
        contents=Sets.newTreeSet(Iterables.filter(contents,new Predicate<ObjectMetadata>(){
          public boolean apply(          ObjectMetadata o){
            return (o != null && o.getName().startsWith(prefix));
          }
        }
));
      }
      final String delimiter=getFirstQueryOrNull(S3Constants.DELIMITER,options);
      SortedSet<String> commonPrefixes=null;
      if (delimiter != null) {
        Iterable<String> iterable=Iterables.transform(contents,new CommonPrefixes(prefix != null ? prefix : null,delimiter));
        commonPrefixes=iterable != null ? Sets.newTreeSet(iterable) : new TreeSet<String>();
        commonPrefixes.remove(CommonPrefixes.NO_PREFIX);
        contents=Sets.newTreeSet(Iterables.filter(contents,new DelimiterFilter(prefix != null ? prefix : null,delimiter)));
      }
      final String maxKeysString=getFirstQueryOrNull(S3Constants.MAX_KEYS,options);
      int maxResults=contents.size();
      boolean truncated=false;
      if (maxKeysString != null) {
        int maxKeys=Integer.parseInt(maxKeysString);
        SortedSet<ObjectMetadata> contentsSlice=firstSliceOfSize(contents,maxKeys);
        maxResults=maxKeys;
        if (!contentsSlice.contains(contents.last())) {
          truncated=true;
          marker=contentsSlice.last().getName();
        }
 else {
          marker=null;
        }
        contents=contentsSlice;
      }
      return new TreeSetListBucketResponse(name,contents,prefix,marker,maxResults,delimiter,truncated,commonPrefixes);
    }
  }
;
}
