{
  if (!bucketToContents.containsKey(bucketName)) {
    new RuntimeException("bucketName not found: " + bucketName);
  }
  try {
    S3Object.Metadata newMd=copy(object.getMetadata());
    newMd.setLastModified(new DateTime());
    byte[] data=toByteArray(object.getData());
    final byte[] eTag=HttpUtils.eTag(data);
    newMd.setETag(eTag);
    newMd.setContentType(object.getMetadata().getContentType());
    if (options.getAcl() != null)     keyToAcl.put(bucketName + "/" + object.getKey(),options.getAcl());
    bucketToContents.get(bucketName).put(object.getKey(),new S3Object(newMd,data));
    newMd.getAllHeaders().put(HttpHeaders.LAST_MODIFIED,dateService.rfc822DateFormat(newMd.getLastModified()));
    newMd.getAllHeaders().put(HttpHeaders.ETAG,HttpUtils.toHexString(eTag));
    newMd.getAllHeaders().put(HttpHeaders.CONTENT_TYPE,newMd.getContentType());
    newMd.getAllHeaders().put(HttpHeaders.CONTENT_LENGTH,newMd.getSize() + "");
    for (    Entry<String,String> userMD : newMd.getUserMetadata().entries()) {
      newMd.getAllHeaders().put(userMD.getKey(),userMD.getValue());
    }
    return new FutureBase<byte[]>(){
      public byte[] get() throws InterruptedException, ExecutionException {
        return eTag;
      }
    }
;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
