{
  return new FutureBase<S3Object>(){
    public S3Object get() throws InterruptedException, ExecutionException {
      if (!bucketToContents.containsKey(bucketName))       return S3Object.NOT_FOUND;
      Map<String,S3Object> realContents=bucketToContents.get(bucketName);
      if (!realContents.containsKey(key))       return S3Object.NOT_FOUND;
      S3Object object=realContents.get(key);
      if (options.getIfMatch() != null) {
        if (!Arrays.equals(object.getMetadata().getMd5(),S3Utils.fromHexString(options.getIfMatch().replaceAll("\"",""))))         throwResponseException(412);
      }
      if (options.getIfNoneMatch() != null) {
        if (Arrays.equals(object.getMetadata().getMd5(),S3Utils.fromHexString(options.getIfNoneMatch().replaceAll("\"",""))))         throwResponseException(304);
      }
      if (options.getIfModifiedSince() != null) {
        DateTime modifiedSince=dateService.rfc822DateParse(options.getIfModifiedSince());
        if (object.getMetadata().getLastModified().isBefore(modifiedSince))         throw new ExecutionException(new RuntimeException(String.format("%1$s is before %2$s",object.getMetadata().getLastModified(),modifiedSince)));
      }
      if (options.getIfUnmodifiedSince() != null) {
        DateTime unmodifiedSince=dateService.rfc822DateParse(options.getIfUnmodifiedSince());
        if (object.getMetadata().getLastModified().isAfter(unmodifiedSince))         throw new ExecutionException(new RuntimeException(String.format("%1$s is after %2$s",object.getMetadata().getLastModified(),unmodifiedSince)));
      }
      S3Object returnVal=new S3Object(copy(object.getMetadata()),object.getData());
      if (options.getRange() != null) {
        byte[] data=(byte[])returnVal.getData();
        ByteArrayOutputStream out=new ByteArrayOutputStream();
        for (        String s : options.getRange().replaceAll("bytes=","").split(",")) {
          if (s.startsWith("-")) {
            int length=Integer.parseInt(s.replaceAll("\\-",""));
            out.write(data,data.length - length,length);
          }
 else           if (s.endsWith("-")) {
            int offset=Integer.parseInt(s.replaceAll("\\-",""));
            out.write(data,offset,data.length - offset);
          }
 else           if (s.contains("-")) {
            String[] firstLast=s.split("\\-");
            int offset=Integer.parseInt(firstLast[0]);
            int last=Integer.parseInt(firstLast[1]);
            int length=(last < data.length) ? last + 1 : data.length - offset;
            out.write(data,offset,length);
          }
 else {
            throw new IllegalArgumentException("first and last were null!");
          }
        }
        returnVal.setData(out.toByteArray());
        returnVal.setContentLength(out.size());
        returnVal.getMetadata().setSize(data.length);
      }
      returnVal.setData(new ByteArrayInputStream((byte[])returnVal.getData()));
      return returnVal;
    }
  }
;
}
