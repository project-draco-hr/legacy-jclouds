{
  HttpResponse response=null;
  for (; ; ) {
    HttpRequest request=command.getRequest();
    Q nativeRequest=null;
    try {
      for (      HttpRequestFilter filter : request.getFilters()) {
        filter.filter(request);
      }
      checkRequestHasContentLengthOrChunkedEncoding(request,"After filtering, the request has niether chunked encoding nor content length: " + request);
      logger.debug("Sending request %s: %s",request.hashCode(),request.getRequestLine());
      wirePayloadIfEnabled(wire,request);
      nativeRequest=convert(request);
      utils.logRequest(headerLog,request,">>");
      response=invoke(nativeRequest);
      logger.debug("Receiving response %s: %s",request.hashCode(),response.getStatusLine());
      utils.logResponse(headerLog,response,"<<");
      if (response.getPayload() != null && wire.enabled())       wire.input(response);
      int statusCode=response.getStatusCode();
      if (statusCode >= 300) {
        if (shouldContinue(response))         continue;
 else         break;
      }
 else {
        break;
      }
    }
 catch (    Exception e) {
      IOException ioe=getFirstThrowableOfType(e,IOException.class);
      if (ioe != null && ioRetryHandler.shouldRetryRequest(command,ioe)) {
        continue;
      }
 else {
        command.setException(new HttpResponseException(e.getMessage() + " connecting to " + command.getRequest().getRequestLine(),command,null,e));
        break;
      }
    }
 finally {
      cleanup(nativeRequest);
    }
  }
  if (command.getException() != null)   throw command.getException();
  return response;
}
