{
  if (qName.equals("ID")) {
    currentOwner=new CanonicalUser(currentText.toString().trim());
  }
 else   if (qName.equals("DisplayName")) {
    currentOwner.setDisplayName(currentText.toString().trim());
  }
 else   if (qName.equals("Key")) {
    currentKey=currentText.toString().trim();
  }
 else   if (qName.equals("LastModified")) {
    currentLastModified=dateParser.iso8601DateParse(currentText.toString().trim());
  }
 else   if (qName.equals("ETag")) {
    currentETag=currentText.toString().trim();
    currentMD5=CryptoStreams.hex(Utils.replaceAll(currentETag,'"',""));
  }
 else   if (qName.equals("Size")) {
    currentSize=new Long(currentText.toString().trim());
  }
 else   if (qName.equals("Owner")) {
  }
 else   if (qName.equals("StorageClass")) {
    currentStorageClass=ObjectMetadata.StorageClass.valueOf(currentText.toString().trim());
  }
 else   if (qName.equals("Contents")) {
    contents.add(new BucketListObjectMetadata(currentKey,currentLastModified,currentETag,currentMD5,currentSize,currentOwner,currentStorageClass));
  }
 else   if (qName.equals("Name")) {
    this.bucketName=currentText.toString().trim();
  }
 else   if (qName.equals("Prefix")) {
    String prefix=currentText.toString().trim();
    if (inCommonPrefixes)     commonPrefixes.add(prefix);
 else     this.prefix=prefix;
  }
 else   if (qName.equals("Delimiter")) {
    if (!currentText.toString().equals(""))     this.delimiter=currentText.toString().trim();
  }
 else   if (qName.equals("Marker")) {
    if (!currentText.toString().equals(""))     this.marker=currentText.toString().trim();
  }
 else   if (qName.equals("NextMarker")) {
    if (!currentText.toString().equals(""))     this.nextMarker=currentText.toString().trim();
  }
 else   if (qName.equals("MaxKeys")) {
    this.maxResults=Integer.parseInt(currentText.toString().trim());
  }
 else   if (qName.equals("IsTruncated")) {
    this.isTruncated=Boolean.parseBoolean(currentText.toString().trim());
  }
  currentText=new StringBuilder();
}
