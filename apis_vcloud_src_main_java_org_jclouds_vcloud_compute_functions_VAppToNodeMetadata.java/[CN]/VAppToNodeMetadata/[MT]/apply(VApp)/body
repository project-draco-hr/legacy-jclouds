{
  NodeMetadataBuilder builder=new NodeMetadataBuilder();
  builder.ids(from.getHref().toASCIIString());
  builder.uri(from.getHref());
  builder.name(from.getName());
  if (!isNullOrEmpty(from.getDescription()) && from.getDescription().indexOf('=') != -1 && from.getDescription().indexOf('\n') != -1) {
    try {
      addMetadataAndParseTagsFromCommaDelimitedValue(builder,Splitter.on('\n').withKeyValueSeparator("=").split(from.getDescription()));
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  builder.hostname(from.getName());
  builder.location(findLocationForResourceInVDC.apply(from.getVDC()));
  builder.group(nodeNamingConvention.groupInUniqueNameOrNull(from.getName()));
  builder.operatingSystem(toComputeOs(from,null));
  builder.hardware(hardwareForVApp.apply(from));
  builder.status(vAppStatusToNodeStatus.get(from.getStatus()));
  Set<String> addresses=getIpsFromVApp(from);
  builder.publicAddresses(filter(addresses,not(IsPrivateIPAddress.INSTANCE)));
  builder.privateAddresses(filter(addresses,IsPrivateIPAddress.INSTANCE));
  Credentials fromApi=getCredentialsFrom(from);
  if (fromApi != null && !credentialStore.containsKey("node#" + from.getHref().toASCIIString()))   credentialStore.put("node#" + from.getHref().toASCIIString(),fromApi);
  return builder.build();
}
