{
  Set<Hardware> sizes=newHashSet();
  for (  String ccAmi : ccAmis) {
    final String region=ccAmi.split("/")[0];
    Location location=find(locations.get(),new Predicate<Location>(){
      @Override public boolean apply(      Location input){
        return input.getScope() == LocationScope.REGION && input.getId().equals(region);
      }
    }
);
    sizes.add(new EC2Hardware(location,InstanceType.CC1_4XLARGE,ImmutableList.of(new Processor(4.0,4.0),new Processor(4.0,4.0)),23 * 1024,ImmutableList.of(new VolumeImpl(10.0f,"/dev/sda1",true,false),new VolumeImpl(840.0f,"/dev/sdb",false,false),new VolumeImpl(840.0f,"/dev/sdc",false,false)),ccAmis));
  }
  sizes.addAll(ImmutableSet.<Hardware>of(EC2Hardware.T1_MICRO,EC2Hardware.C1_MEDIUM,EC2Hardware.C1_XLARGE,EC2Hardware.M1_LARGE,"eucalyptus".equals(providerName) ? EC2Hardware.M1_SMALL_EUCALYPTUS : EC2Hardware.M1_SMALL,EC2Hardware.M1_XLARGE,EC2Hardware.M2_XLARGE,EC2Hardware.M2_2XLARGE,EC2Hardware.M2_4XLARGE));
  return sizes;
}
