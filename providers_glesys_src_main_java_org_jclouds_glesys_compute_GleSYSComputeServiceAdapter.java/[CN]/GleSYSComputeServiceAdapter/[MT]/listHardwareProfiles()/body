{
  Set<? extends Location> locationsSet=locations.get();
  ImmutableSet.Builder<Hardware> hardwareToReturn=ImmutableSet.builder();
  Set<OSTemplate> images=listImages();
  for (  Entry<String,AllowedArgumentsForCreateServer> platformToArgs : api.getServerApi().getAllowedArgumentsForCreateByPlatform().entrySet())   for (  String datacenter : platformToArgs.getValue().getDataCenters())   for (  int diskSizeGB : platformToArgs.getValue().getDiskSizesInGB().getAllowedUnits())   for (  int cpuCores : platformToArgs.getValue().getCpuCoreOptions().getAllowedUnits())   for (  int memorySizeMB : platformToArgs.getValue().getMemorySizesInMB().getAllowedUnits()) {
    ImmutableSet.Builder<String> templatesSupportedBuilder=ImmutableSet.builder();
    for (    OSTemplate template : images) {
      if (template.getPlatform().equals(platformToArgs.getKey()) && diskSizeGB >= template.getMinDiskSize() && memorySizeMB >= template.getMinMemSize())       templatesSupportedBuilder.add(template.getName());
    }
    ImmutableSet<String> templatesSupported=templatesSupportedBuilder.build();
    if (templatesSupported.size() > 0)     hardwareToReturn.add(new HardwareBuilder().ids(String.format("datacenter(%s)platform(%s)cpuCores(%d)memorySizeMB(%d)diskSizeGB(%d)",datacenter,platformToArgs.getKey(),cpuCores,memorySizeMB,diskSizeGB)).ram(memorySizeMB).processors(ImmutableList.of(new Processor(cpuCores,1.0))).volumes(ImmutableList.<Volume>of(new VolumeImpl((float)diskSizeGB,true,true))).hypervisor(platformToArgs.getKey()).location(Iterables.find(locationsSet,LocationPredicates.idEquals(datacenter))).supportsImage(ImagePredicates.idIn(templatesSupported)).build());
  }
  return hardwareToReturn.build();
}
