{
  KeyStore keyStore=KeyStore.getInstance("PKCS12");
  File certFile=new File(checkNotNull(cert));
  if (certFile.isFile()) {
    keyStore.load(new FileInputStream(certFile),keyStorePassword.toCharArray());
  }
 else {
    int privateKeyBeginIdx=cert.indexOf("-----BEGIN PRIVATE KEY");
    int privateKeyEndIdx=cert.indexOf("-----END PRIVATE KEY");
    String pemPrivateKey=cert.substring(privateKeyBeginIdx,privateKeyEndIdx + 26);
    String pemCerts="";
    int certsBeginIdx=0;
    do {
      certsBeginIdx=cert.indexOf("-----BEGIN CERTIFICATE",certsBeginIdx);
      if (certsBeginIdx >= 0) {
        int certsEndIdx=cert.indexOf("-----END CERTIFICATE",certsBeginIdx) + 26;
        pemCerts+=cert.substring(certsBeginIdx,certsEndIdx);
        certsBeginIdx=certsEndIdx;
      }
    }
 while (certsBeginIdx != -1);
    KeySpec keySpec=Pems.privateKeySpec(InputSuppliers.of(pemPrivateKey));
    PrivateKey privateKey=crypto.rsaKeyFactory().generatePrivate(keySpec);
    CertificateFactory cf=CertificateFactory.getInstance("X.509");
    @SuppressWarnings("unchecked") Collection<Certificate> certs=(Collection<Certificate>)cf.generateCertificates(new ByteArrayInputStream(pemCerts.getBytes("UTF-8")));
    keyStore.load(null);
    keyStore.setKeyEntry("dummy",privateKey,keyStorePassword.toCharArray(),certs.toArray(new java.security.cert.Certificate[0]));
  }
  return keyStore;
}
