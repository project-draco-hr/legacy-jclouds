{
  return createClient(new Function<HttpRequest,HttpResponse>(){
    @Override public HttpResponse apply(    HttpRequest input){
      HttpRequest matchedRequest=null;
      HttpResponse response=null;
      for (      Map.Entry<HttpRequest,HttpResponse> entry : requestToResponse.entrySet()) {
        HttpRequest request=entry.getKey();
        if (httpRequestsAreEqual(input,request)) {
          matchedRequest=request;
          response=entry.getValue();
        }
      }
      if (response == null) {
        StringBuilder payload=new StringBuilder("\n");
        payload.append("the following request is not configured:\n");
        payload.append("----------------------------------------\n");
        payload.append(renderRequest(input));
        payload.append("----------------------------------------\n");
        payload.append("configured requests:\n");
        for (        HttpRequest request : requestToResponse.keySet()) {
          payload.append("----------------------------------------\n");
          payload.append(renderRequest(request));
        }
        response=HttpResponse.builder().statusCode(500).message("no response configured for request").payload(Payloads.newStringPayload(payload.toString())).build();
      }
 else       if (compareHttpRequestAsType(input) == HttpRequestComparisonType.DEFAULT) {
        assertEquals(renderRequest(input),renderRequest(matchedRequest));
      }
      return response;
    }
  }
,module,props);
}
