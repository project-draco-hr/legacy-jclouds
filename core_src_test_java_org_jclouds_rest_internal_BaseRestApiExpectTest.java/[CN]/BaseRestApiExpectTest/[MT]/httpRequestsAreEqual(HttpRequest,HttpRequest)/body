{
  try {
    if (a == null || b == null || !Objects.equal(a.getRequestLine(),b.getRequestLine()) || !Objects.equal(a.getHeaders(),b.getHeaders())) {
      return false;
    }
    if (a.getPayload() == null || b.getPayload() == null) {
      return Objects.equal(a,b);
    }
switch (compareHttpRequestAsType(a)) {
case XML:
{
        Diff diff=XMLUnit.compareXML(Strings2.toString(a.getPayload()),Strings2.toString(b.getPayload()));
        diff.overrideDifferenceListener(new DifferenceListener(){
          @Override public int differenceFound(          Difference diff){
            if (diff.getId() == DifferenceConstants.SCHEMA_LOCATION_ID || diff.getId() == DifferenceConstants.NAMESPACE_PREFIX_ID) {
              return RETURN_IGNORE_DIFFERENCE_NODES_IDENTICAL;
            }
            if (diff.getId() == DifferenceConstants.TEXT_VALUE_ID) {
              for (              NodeDetail detail : ImmutableSet.of(diff.getControlNodeDetail(),diff.getTestNodeDetail())) {
                if (detail.getNode().getParentNode().getChildNodes().getLength() < 2 || !detail.getValue().trim().isEmpty()) {
                  return RETURN_ACCEPT_DIFFERENCE;
                }
              }
              return RETURN_IGNORE_DIFFERENCE_NODES_IDENTICAL;
            }
            return RETURN_ACCEPT_DIFFERENCE;
          }
          @Override public void skippedComparison(          Node node,          Node node1){
          }
        }
);
        return diff.identical();
      }
case JSON:
{
      JsonParser parser=new JsonParser();
      JsonElement payloadA=parser.parse(Strings2.toString(a.getPayload()));
      JsonElement payloadB=parser.parse(Strings2.toString(b.getPayload()));
      return Objects.equal(payloadA,payloadB);
    }
default :
{
    return Objects.equal(a,b);
  }
}
}
 catch (Exception e) {
throw Throwables.propagate(e);
}
}
