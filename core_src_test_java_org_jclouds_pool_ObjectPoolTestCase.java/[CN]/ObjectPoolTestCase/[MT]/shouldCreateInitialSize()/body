{
  final CountDownLatch objectCreation=new CountDownLatch(2);
  final CountDownLatch objectDestruction=new CountDownLatch(2);
  Creator<HeavyObject> creator=new Creator<HeavyObject>(){
    public void destroy(    HeavyObject object){
      objectDestruction.countDown();
    }
    public HeavyObject create(){
      return new HeavyObject();
    }
  }
;
  ObjectPool<HeavyObject> pool=new ObjectPool<HeavyObject>(creator,2,UsedObjectStrategy.REUSE,new ObjectPool.PoolListener<HeavyObject>(){
    public void added(    HeavyObject object){
      objectCreation.countDown();
    }
  }
);
  try {
    if (!objectCreation.await(2,TimeUnit.SECONDS)) {
      Assert.fail("ObjectCreation did not happen");
    }
    Assert.assertEquals(2,pool.currentSize());
    PooledObject<HeavyObject> object=pool.get();
    Assert.assertEquals(1,pool.currentSize());
    PooledObject<HeavyObject> object2=pool.get();
    Assert.assertEquals(0,pool.currentSize());
    object.close();
    Assert.assertEquals(1,pool.currentSize());
    object2.close();
    Assert.assertEquals(2,pool.currentSize());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    pool.shutdown();
    Assert.assertEquals(0,pool.currentSize());
    if (!objectDestruction.await(1,TimeUnit.SECONDS)) {
      Assert.fail("objectDestruction did not happen");
    }
  }
}
