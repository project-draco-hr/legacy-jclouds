{
  Properties unexpanded=currentStateToUnexpandedProperties();
  Set<String> keysToResolve=ImmutableSet.of(PROPERTY_IDENTITY,PROPERTY_CREDENTIAL,PROPERTY_ENDPOINT,PROPERTY_API,PROPERTY_API_VERSION,PROPERTY_BUILD_VERSION);
  Set<String> optionalKeys;
  if (credentialsSupplierOption.isPresent()) {
    optionalKeys=ImmutableSet.of(PROPERTY_IDENTITY,PROPERTY_CREDENTIAL);
  }
 else   if (!apiMetadata.getCredentialName().isPresent()) {
    optionalKeys=ImmutableSet.of(PROPERTY_CREDENTIAL);
  }
 else {
    optionalKeys=ImmutableSet.of();
  }
  Properties resolved=resolveProperties(unexpanded,providerId,keysToResolve,optionalKeys);
  Properties expanded=expandProperties(resolved);
  Supplier<Credentials> credentialsSupplier=buildCredentialsSupplier(expanded);
  ProviderMetadata providerMetadata=new UpdateProviderMetadataFromProperties(apiMetadata,this.providerMetadata).apply(expanded);
  return buildInjector(name.or(String.valueOf(Objects.hashCode(providerMetadata.getId(),providerMetadata.getEndpoint(),providerMetadata.getApiMetadata().getVersion(),credentialsSupplier))),providerMetadata,credentialsSupplier,modules);
}
