{
  return new AbstractModule(){
    @Override protected void configure(){
      bind(AdminAccess.Configuration.class).toInstance(new Configuration(){
        @Override public Supplier<String> defaultAdminUsername(){
          return Suppliers.ofInstance("defaultAdminUsername");
        }
        @Override public Supplier<Map<String,String>> defaultAdminSshKeys(){
          return Suppliers.<Map<String,String>>ofInstance(ImmutableMap.of("public","publicKey","private","privateKey"));
        }
        @Override public Function<String,String> cryptFunction(){
          return new Function<String,String>(){
            @Override public String apply(            String input){
              return String.format("crypt(%s)",input);
            }
          }
;
        }
        public Supplier<String> passwordGenerator(){
          return Suppliers.ofInstance("randompassword");
        }
      }
);
      SshClient.Factory factory=createMock(SshClient.Factory.class);
      SshClient client1=createMock(SshClient.class);
      SshClient client2=createMock(SshClient.class);
      SshClient client3=createMock(SshClient.class);
      SshClient client4=createMock(SshClient.class);
      SshClient client5=createMock(SshClient.class);
      expect(factory.create(new IPSocket("144.175.1.1",22),new Credentials("root","password1"))).andReturn(client1);
      runScriptAndService(client1,1);
      expect(factory.create(new IPSocket("144.175.1.2",22),new Credentials("root","password2"))).andReturn(client2).times(4);
      expect(factory.create(new IPSocket("144.175.1.2",22),new Credentials("root","romeo"))).andThrow(new SshException("Auth fail"));
      client2.connect();
      expect(client2.exec("echo hello\n")).andReturn(new ExecResponse("hello\n","",0));
      client2.disconnect();
      client2.connect();
      expect(client2.exec("echo hello\n")).andReturn(new ExecResponse("hello\n","",0));
      client2.disconnect();
      client2.connect();
      try {
        runScript(client2,"runScriptWithCreds",Strings2.toStringAndClose(StubComputeServiceIntegrationTest.class.getResourceAsStream("/runscript.sh")),2);
      }
 catch (      IOException e) {
        Throwables.propagate(e);
      }
      client2.disconnect();
      expect(factory.create(new IPSocket("144.175.1.3",22),new Credentials("root","password3"))).andReturn(client3).times(2);
      expect(factory.create(new IPSocket("144.175.1.4",22),new Credentials("root","password4"))).andReturn(client4).times(2);
      expect(factory.create(new IPSocket("144.175.1.5",22),new Credentials("root","password5"))).andReturn(client5).times(2);
      runScriptAndInstallSsh(client3,"bootstrap",3);
      runScriptAndInstallSsh(client4,"bootstrap",4);
      runScriptAndInstallSsh(client5,"bootstrap",5);
      expect(factory.create(eq(new IPSocket("144.175.1.1",22)),eq(new Credentials("defaultAdminUsername","privateKey")))).andReturn(client1);
      expect(factory.create(eq(new IPSocket("144.175.1.2",22)),eq(new Credentials("defaultAdminUsername","privateKey")))).andReturn(client2);
      expect(factory.create(eq(new IPSocket("144.175.1.3",22)),eq(new Credentials("defaultAdminUsername","privateKey")))).andReturn(client3);
      expect(factory.create(eq(new IPSocket("144.175.1.4",22)),eq(new Credentials("defaultAdminUsername","privateKey")))).andReturn(client4);
      expect(factory.create(eq(new IPSocket("144.175.1.5",22)),eq(new Credentials("defaultAdminUsername","privateKey")))).andReturn(client5);
      helloAndJava(client2);
      helloAndJava(client3);
      helloAndJava(client4);
      helloAndJava(client5);
      replay(factory);
      replay(client1);
      replay(client2);
      replay(client3);
      replay(client4);
      replay(client5);
      bind(SshClient.Factory.class).toInstance(factory);
    }
    private void runScriptAndService(    SshClient client,    int nodeId){
      client.connect();
      try {
        runScript(client,"jboss",Strings2.toStringAndClose(StubComputeServiceIntegrationTest.class.getResourceAsStream("/initscript_with_jboss.sh")),nodeId);
      }
 catch (      IOException e) {
        Throwables.propagate(e);
      }
      client.disconnect();
    }
    private void runScriptAndInstallSsh(    SshClient client,    String scriptName,    int nodeId){
      client.connect();
      try {
        runScript(client,scriptName,Strings2.toStringAndClose(StubComputeServiceIntegrationTest.class.getResourceAsStream("/initscript_with_java.sh")),nodeId);
      }
 catch (      IOException e) {
        Throwables.propagate(e);
      }
      client.disconnect();
    }
    private void runScript(    SshClient client,    String scriptName,    String script,    int nodeId){
      client.put(scriptName,script);
      expect(client.exec("chmod 755 " + scriptName + "")).andReturn(EXEC_GOOD);
      expect(client.getUsername()).andReturn("root").atLeastOnce();
      expect(client.getHostAddress()).andReturn(nodeId + "").atLeastOnce();
      expect(client.exec("./" + scriptName + " init")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " start")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " status")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " status")).andReturn(EXEC_BAD);
      expect(client.exec("./" + scriptName + " tail")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " tailerr")).andReturn(EXEC_GOOD);
    }
    private void helloAndJava(    SshClient client){
      client.connect();
      expect(client.exec("echo hello")).andReturn(new ExecResponse("hello","",0));
      expect(client.exec("java -version")).andReturn(new ExecResponse("","1.6",0));
      client.disconnect();
    }
  }
;
}
