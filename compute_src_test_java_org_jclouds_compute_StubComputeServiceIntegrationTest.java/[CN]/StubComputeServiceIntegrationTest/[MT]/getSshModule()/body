{
  return new AbstractModule(){
    @Override protected void configure(){
      SshClient.Factory factory=createMock(SshClient.Factory.class);
      SshClient client1=createMock(SshClient.class);
      SshClient client2=createMock(SshClient.class);
      SshClient client3=createMock(SshClient.class);
      SshClient client4=createMock(SshClient.class);
      expect(factory.create(new IPSocket("144.175.1.1",22),"root","romeo")).andThrow(new SshException("Auth fail"));
      expect(factory.create(new IPSocket("144.175.1.1",22),"root","password1")).andReturn(client1).atLeastOnce();
      client1.connect();
      runScript(client1,"computeserv",1);
      client1.disconnect();
      expect(factory.create(new IPSocket("144.175.1.2",22),"root","password2")).andReturn(client2).atLeastOnce();
      expect(factory.create(new IPSocket("144.175.1.3",22),"root","password3")).andReturn(client3).atLeastOnce();
      expect(factory.create(new IPSocket("144.175.1.4",22),"root","password4")).andReturn(client4).atLeastOnce();
      runScriptAndInstallSsh(client2,"runscript",2);
      runScriptAndInstallSsh(client3,"runscript",3);
      runScriptAndInstallSsh(client4,"runscript",4);
      replay(factory);
      replay(client1);
      replay(client2);
      replay(client3);
      replay(client4);
      bind(SshClient.Factory.class).toInstance(factory);
    }
    private void runScriptAndInstallSsh(    SshClient client,    String scriptName,    int nodeId){
      client.connect();
      runScript(client,scriptName,nodeId);
      expect(client.exec("mkdir .ssh")).andReturn(EXEC_GOOD);
      expect(client.exec("cat .ssh/id_rsa.pub >> .ssh/authorized_keys")).andReturn(EXEC_GOOD);
      expect(client.exec("chmod 600 .ssh/authorized_keys")).andReturn(EXEC_GOOD);
      client.put(eq(".ssh/id_rsa.pub"),isEq(keyPair.get("public")));
      expect(client.exec("mkdir .ssh")).andReturn(EXEC_GOOD);
      client.put(eq(".ssh/id_rsa"),isEq(keyPair.get("private")));
      expect(client.exec("chmod 600 .ssh/id_rsa")).andReturn(EXEC_GOOD);
      client.disconnect();
      client.disconnect();
    }
    private void runScript(    SshClient client,    String scriptName,    int nodeId){
      client.put(eq("" + scriptName + ""),isEq(initScript(scriptName,buildScript(OsFamily.UBUNTU))));
      expect(client.exec("chmod 755 " + scriptName + "")).andReturn(EXEC_GOOD);
      expect(client.getUsername()).andReturn("root").atLeastOnce();
      expect(client.getHostAddress()).andReturn(nodeId + "").atLeastOnce();
      expect(client.exec("./" + scriptName + " init")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " start")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " status")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " status")).andReturn(EXEC_BAD);
      expect(client.exec("./" + scriptName + " tail")).andReturn(EXEC_GOOD);
      expect(client.exec("./" + scriptName + " tailerr")).andReturn(EXEC_GOOD);
    }
  }
;
}
