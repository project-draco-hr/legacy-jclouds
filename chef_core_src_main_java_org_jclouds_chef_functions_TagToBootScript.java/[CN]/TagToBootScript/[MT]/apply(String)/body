{
  checkNotNull(tag,"tag");
  Client client=tagToClient.get(tag);
  checkState(client != null,"could not get a client for tag %s",tag);
  checkState(client.getClientname() != null,"clientname null for %s",client);
  checkState(client.getPrivateKey() != null,"privatekey null for %s",client);
  List<String> runList=runListForTag.get(tag);
  checkState(runList != null,"runList for %s was not found",tag);
  checkState(runList.size() > 0,"runList for %s was empty",tag);
  String chefConfigDir="{root}etc{fs}chef";
  Statement createChefConfigDir=exec("{md} " + chefConfigDir);
  Statement createClientRb=createFile(chefConfigDir + "{fs}client.rb",ImmutableList.of("require 'rubygems'","require 'ohai'","o = Ohai::System.new","o.all_plugins",String.format("node_name \"%s-\" + o[:ipaddress]",tag),"log_level :info","log_location STDOUT",String.format("validation_client_name \"%s\"",client.getClientname()),String.format("chef_server_url \"%s\"",endpoint)));
  Statement createValidationPem=createFile(chefConfigDir + "{fs}validation.pem",Splitter.on('\n').split(Pems.pem(client.getPrivateKey())));
  String chefBootFile=chefConfigDir + "{fs}first-boot.json";
  Statement createFirstBoot=createFile(chefBootFile,Collections.singleton(json.toJson(ImmutableMap.<String,List<String>>of("run_list",runList),RUN_LIST_TYPE)));
  Statement runChef=exec("chef-client -j " + chefBootFile);
  Statement bootstrapAndRunChef=newStatementList(installChefGems,createChefConfigDir,createClientRb,createValidationPem,createFirstBoot,runChef);
  String runScript=bootstrapAndRunChef.render(OsFamily.UNIX);
  return newStringPayload(runScript);
}
