{
  HttpRequest request=command.getRequest();
  Exception exception=new HttpResponseException(command,response);
  try {
    VCloudError error=null;
    String message=null;
    if (response.getPayload() != null) {
      String contentType=response.getPayload().getContentMetadata().getContentType();
      if (VCloudMediaType.ERROR_XML.equals(contentType)) {
        error=utils.parseErrorFromContent(request,response);
        if (error != null) {
          message=error.getMessage();
          exception=new VCloudResponseException(command,response,error);
        }
      }
 else {
        try {
          message=Utils.toStringAndClose(response.getPayload().getInput());
        }
 catch (        IOException e) {
        }
      }
    }
    message=message != null ? message : String.format("%s -> %s",request.getRequestLine(),response.getStatusLine());
switch (response.getStatusCode()) {
case 400:
      if (error != null && error.getMinorErrorCode() != null && error.getMinorErrorCode() == MinorCode.BUSY_ENTITY)       exception=new IllegalStateException(message,exception);
 else       exception=new IllegalArgumentException(message,exception);
    break;
case 401:
case 403:
  exception=new AuthorizationException(command.getRequest(),message);
break;
case 404:
if (!command.getRequest().getMethod().equals("DELETE")) {
String path=command.getRequest().getEndpoint().getPath();
Matcher matcher=RESOURCE_PATTERN.matcher(path);
if (matcher.find()) {
  message=String.format("%s %s not found",matcher.group(1),matcher.group(2));
}
 else {
  message=path;
}
exception=new ResourceNotFoundException(message);
}
break;
}
}
  finally {
releasePayload(response);
command.setException(exception);
}
}
