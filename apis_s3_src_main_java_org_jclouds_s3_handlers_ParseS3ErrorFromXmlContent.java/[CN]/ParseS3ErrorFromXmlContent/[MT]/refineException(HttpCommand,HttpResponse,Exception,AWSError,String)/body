{
switch (response.getStatusCode()) {
case 404:
    if (!command.getCurrentRequest().getMethod().equals("DELETE")) {
      URI defaultS3Endpoint=URI.create(new S3ApiMetadata().getDefaultEndpoint().get());
      URI requestEndpoint=command.getCurrentRequest().getEndpoint();
      boolean wasPathBasedRequest=requestEndpoint.getHost().contains(defaultS3Endpoint.getHost()) && requestEndpoint.getHost().equals(defaultS3Endpoint.getHost());
      exception=new ResourceNotFoundException(message,exception);
      if (isVhostStyle && !wasPathBasedRequest) {
        String container=command.getCurrentRequest().getEndpoint().getHost();
        String key=command.getCurrentRequest().getEndpoint().getPath();
        if (key == null || key.equals("/"))         exception=new ContainerNotFoundException(container,message);
 else         exception=new KeyNotFoundException(container,key,message);
      }
 else       if (command.getCurrentRequest().getEndpoint().getPath().indexOf(servicePath.equals("/") ? "/" : servicePath + "/") == 0) {
        String path=command.getCurrentRequest().getEndpoint().getPath().substring(servicePath.length());
        List<String> parts=newArrayList(filter(Splitter.on('/').split(path),not(equalTo(""))));
        if (parts.size() == 1) {
          exception=new ContainerNotFoundException(parts.get(0),message);
        }
 else         if (parts.size() > 1) {
          exception=new KeyNotFoundException(parts.remove(0),Joiner.on('/').join(parts),message);
        }
      }
    }
  return exception;
default :
return super.refineException(command,response,exception,error,message);
}
}
