{
  Supplier<Set<? extends Location>> locationSupplier=new Supplier<Set<? extends Location>>(){
    @Override public Set<? extends Location> get(){
      return locations;
    }
  }
;
  Supplier<Set<? extends Hardware>> hardwareSupplier=new Supplier<Set<? extends Hardware>>(){
    @Override public Set<? extends Hardware> get(){
      return hardware;
    }
  }
;
  GroupNamingConvention.Factory namingConvention=Guice.createInjector(new AbstractModule(){
    @Override protected void configure(){
      Names.bindProperties(binder(),new EC2ApiMetadata().getDefaultProperties());
    }
  }
).getInstance(GroupNamingConvention.Factory.class);
  RunningInstanceToNodeMetadata parser=new RunningInstanceToNodeMetadata(instanceToNodeState,credentialStore,Suppliers.<LoadingCache<RegionAndName,? extends Image>>ofInstance(instanceToImage),locationSupplier,hardwareSupplier,namingConvention);
  return parser;
}
