{
  Map<String,String> envVariables=Maps.newHashMap();
  String[] environment=env.getVariables();
  if (environment != null) {
    for (int i=0; i < environment.length; i++) {
      log("Setting environment variable: " + environment[i],Project.MSG_DEBUG);
      String[] keyValue=environment[i].split("=");
      envVariables.put(keyValue[0],reprefix(keyValue[1]));
    }
  }
  StringBuilder commandBuilder=new StringBuilder(commandLine.getVmCommand().getExecutable());
  if (commandLine.getBootclasspath() != null) {
    commandBuilder.append(" -Xbootclasspath:bootclasspath");
    resetPathToUnderPrefixIfExistsAndIsFileIfNotExistsAddAsIs(commandLine.getBootclasspath(),"bootclasspath",commandBuilder);
  }
  if (commandLine.getVmCommand().getArguments() != null && commandLine.getVmCommand().getArguments().length > 0) {
    reprefixArgs(commandLine.getVmCommand().getArguments(),commandBuilder);
  }
  commandBuilder.append(" -cp classpath");
  resetPathToUnderPrefixIfExistsAndIsFileIfNotExistsAddAsIs(commandLine.getClasspath(),"classpath",commandBuilder);
  if (commandLine.getSystemProperties() != null && commandLine.getSystemProperties().getVariables() != null && commandLine.getSystemProperties().getVariables().length > 0) {
    reprefixValues(commandLine.getSystemProperties().getVariables(),commandBuilder);
  }
  commandBuilder.append(" ").append(commandLine.getClassname());
  if (commandLine.getJavaCommand().getArguments() != null && commandLine.getJavaCommand().getArguments().length > 0) {
    reprefixArgs(commandLine.getJavaCommand().getArguments(),commandBuilder);
  }
  InitBuilder testInitBuilder=new InitBuilder(id,basedir,basedir,envVariables,commandBuilder.toString());
  return testInitBuilder.build(osFamily);
}
