{
  if (!getContainerToBlobs().containsKey(bucketName))   return immediateFailedFuture(new ContainerNotFoundException(bucketName));
  Map<String,Blob> realContents=getContainerToBlobs().get(bucketName);
  if (!realContents.containsKey(key))   return immediateFuture(null);
  Blob object=realContents.get(key);
  if (options.getIfMatch() != null) {
    if (!object.getMetadata().getETag().equals(options.getIfMatch()))     return immediateFailedFuture(returnResponseException(412));
  }
  if (options.getIfNoneMatch() != null) {
    if (object.getMetadata().getETag().equals(options.getIfNoneMatch()))     return immediateFailedFuture(returnResponseException(304));
  }
  if (options.getIfModifiedSince() != null) {
    Date modifiedSince=options.getIfModifiedSince();
    if (object.getMetadata().getLastModified().before(modifiedSince)) {
      HttpResponse response=new HttpResponse();
      response.setStatusCode(304);
      return immediateFailedFuture(new HttpResponseException(String.format("%1$s is before %2$s",object.getMetadata().getLastModified(),modifiedSince),null,response));
    }
  }
  if (options.getIfUnmodifiedSince() != null) {
    Date unmodifiedSince=options.getIfUnmodifiedSince();
    if (object.getMetadata().getLastModified().after(unmodifiedSince)) {
      HttpResponse response=new HttpResponse();
      response.setStatusCode(412);
      return immediateFailedFuture(new HttpResponseException(String.format("%1$s is after %2$s",object.getMetadata().getLastModified(),unmodifiedSince),null,response));
    }
  }
  Blob returnVal=copyBlob(object);
  if (options.getRanges() != null && options.getRanges().size() > 0) {
    byte[] data;
    try {
      data=ByteStreams.toByteArray(returnVal.getPayload().getContent());
    }
 catch (    IOException e) {
      return immediateFailedFuture(new RuntimeException(e));
    }
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    for (    String s : options.getRanges()) {
      if (s.startsWith("-")) {
        int length=Integer.parseInt(s.substring(1));
        out.write(data,data.length - length,length);
      }
 else       if (s.endsWith("-")) {
        int offset=Integer.parseInt(s.substring(0,s.length() - 1));
        out.write(data,offset,data.length - offset);
      }
 else       if (s.contains("-")) {
        String[] firstLast=s.split("\\-");
        int offset=Integer.parseInt(firstLast[0]);
        int last=Integer.parseInt(firstLast[1]);
        int length=(last < data.length) ? last + 1 : data.length - offset;
        out.write(data,offset,length);
      }
 else {
        return immediateFailedFuture(new IllegalArgumentException("first and last were null!"));
      }
    }
    returnVal.setPayload(out.toByteArray());
    returnVal.setContentLength(out.size());
    returnVal.getMetadata().setSize(new Long(data.length));
  }
  if (returnVal.getContentLength() == 0) {
    returnVal.setPayload(Payloads.NULL_PAYLOAD);
    returnVal.getMetadata().setSize(0);
  }
  return immediateFuture(returnVal);
}
