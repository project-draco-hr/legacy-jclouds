{
  EC2Client client=createMock(EC2Client.class);
  EC2ComputeService service=new EC2ComputeService(createMock(ComputeServiceContext.class),createMock(Map.class),createMock(Supplier.class),createMock(Supplier.class),createMock(Supplier.class),createMock(ListNodesStrategy.class),createMock(GetNodeMetadataStrategy.class),createMock(RunNodesAndAddToSetStrategy.class),createMock(RebootNodeStrategy.class),createMock(DestroyNodeStrategy.class),createMock(ResumeNodeStrategy.class),createMock(SuspendNodeStrategy.class),createMock(Provider.class),createMock(Provider.class),createMock(Predicate.class),createMock(Predicate.class),createMock(Predicate.class),createMock(ComputeUtils.class),createMock(Timeouts.class),createMock(ExecutorService.class),client,createMock(Map.class),createMock(Map.class),createMock(Map.class),createMock(Predicate.class));
  PlacementGroupClient placementClient=createMock(PlacementGroupClient.class);
  expect(client.getPlacementGroupServices()).andReturn(placementClient).atLeastOnce();
  expect(placementClient.describePlacementGroupsInRegion("us-west-1","jclouds#tag#us-west-1")).andThrow(new UnsupportedOperationException());
  replay(client);
  replay(placementClient);
  service.deletePlacementGroup("us-west-1","tag");
  verify(client);
  verify(placementClient);
}
