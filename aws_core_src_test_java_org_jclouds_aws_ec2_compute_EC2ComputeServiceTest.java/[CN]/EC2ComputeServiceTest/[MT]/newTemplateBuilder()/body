{
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  TemplateOptions defaultOptions=createMock(TemplateOptions.class);
  expect(optionsProvider.get()).andReturn(defaultOptions);
  Image image=new ImageImpl("cc-image","image","us-east-1/cc-image",location,null,Maps.<String,String>newHashMap(),new OperatingSystem(OsFamily.UBUNTU,null,"1.0",null,"ubuntu",true),"description","1.0",new Credentials("root",null));
  replay(optionsProvider);
  replay(templateBuilderProvider);
  Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(location));
  Supplier<Set<? extends Image>> images=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of(image));
  Supplier<Set<? extends Hardware>> sizes=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(EC2Hardware.T1_MICRO,EC2Hardware.C1_MEDIUM,EC2Hardware.C1_XLARGE,EC2Hardware.M1_LARGE,EC2Hardware.M1_SMALL,EC2Hardware.M1_XLARGE,EC2Hardware.M2_XLARGE,EC2Hardware.M2_2XLARGE,EC2Hardware.M2_4XLARGE,CC1_4XLARGE));
  return new TemplateBuilderImpl(locations,images,sizes,Suppliers.ofInstance(location),optionsProvider,templateBuilderProvider){
  }
;
}
