{
  String identity=checkNotNull(System.getProperty("test.softlayer.identity"),"test.softlayer.identity");
  String credential=checkNotNull(System.getProperty("test.softlayer.credential"),"test.softlayer.credential");
  computeContext=new ComputeServiceContextFactory().createContext("softlayer",identity,credential,ImmutableSet.<Module>of(new Log4JLoggingModule(),new SshjSshClientModule()));
  context=computeContext.getProviderSpecificContext();
  module=new AbstractModule(){
    @Override protected void configure(){
      bindProperties(binder(),new SoftLayerPropertiesBuilder(new Properties()).build());
      bind(SoftLayerClient.class).toInstance(context.getApi());
    }
    @SuppressWarnings("unused") @Provides @Singleton @Memoized public Supplier<ProductPackage> getProductPackage(    SoftLayerClient client,    @Named(PROPERTY_SOFTLAYER_VIRTUALGUEST_PACKAGE_NAME) String virtualGuestPackageName){
      return new SoftLayerComputeServiceContextModule().getProductPackage(30,client,virtualGuestPackageName);
    }
    @SuppressWarnings("unused") @Provides @Singleton public Iterable<ProductItemPrice> prices(    @Named(PROPERTY_SOFTLAYER_VIRTUALGUEST_PRICES) String prices){
      return new SoftLayerComputeServiceContextModule().prices(prices);
    }
  }
;
}
