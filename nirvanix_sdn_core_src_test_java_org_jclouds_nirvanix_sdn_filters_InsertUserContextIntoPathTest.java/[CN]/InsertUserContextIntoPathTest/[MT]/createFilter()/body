{
  injector=Guice.createInjector(new RestModule(),new ExecutorServiceModule(sameThreadExecutor(),sameThreadExecutor()),new JavaUrlHttpCommandExecutorServiceModule(),new AbstractModule(){
    protected void configure(){
      RuntimeDelegate.setInstance(new RuntimeDelegateImpl());
      bind(Logger.LoggerFactory.class).toInstance(new LoggerFactory(){
        public Logger getLogger(        String category){
          return Logger.NULL;
        }
      }
);
      AddSessionTokenToRequest sessionManager=createMock(AddSessionTokenToRequest.class);
      expect(sessionManager.getSessionToken()).andReturn("token").anyTimes();
      replay(sessionManager);
      bind(AddSessionTokenToRequest.class).toInstance(sessionManager);
      bindConstant().annotatedWith(Jsr330.named(SDNConstants.PROPERTY_SDN_APPKEY)).to("appKey");
      bindConstant().annotatedWith(Jsr330.named(SDNConstants.PROPERTY_SDN_USERNAME)).to("username");
      bindConstant().annotatedWith(Jsr330.named(SDNConstants.PROPERTY_SDN_APPNAME)).to("appname");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_IO_WORKER_THREADS)).to("1");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_USER_THREADS)).to("1");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_MAX_CONNECTIONS_PER_CONTEXT)).to("0");
      bindConstant().annotatedWith(Jsr330.named(Constants.PROPERTY_MAX_CONNECTIONS_PER_HOST)).to("1");
    }
  }
);
  filter=injector.getInstance(InsertUserContextIntoPath.class);
  factory=injector.getInstance(Key.get(new TypeLiteral<RestAnnotationProcessor<TestService>>(){
  }
));
  method=TestService.class.getMethod("foo",URI.class);
}
