{
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  FlexBase64.DecoderOutputStream stream=FlexBase64.createDecoderOutputStream(baos);
  byte[] towel=TOWEL_BASE64.getBytes("US-ASCII");
  byte[] towelStrip=TOWEL_BASE64.replace("\r\n","").getBytes("US-ASCII");
  stream.write(towel);
  stream.close();
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
  baos.reset();
  stream=FlexBase64.createDecoderOutputStream(baos);
  stream.write(towelStrip);
  stream.close();
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
  baos.reset();
  stream=FlexBase64.createDecoderOutputStream(baos);
  chunkWrite(stream,towel);
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
  baos.reset();
  stream=FlexBase64.createDecoderOutputStream(baos);
  chunkWrite(stream,towelStrip);
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
  baos.reset();
  stream=FlexBase64.createDecoderOutputStream(baos);
  oneByteWrite(stream,towel);
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
  baos.reset();
  stream=FlexBase64.createDecoderOutputStream(baos);
  oneByteWrite(stream,towelStrip);
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
  baos.reset();
  stream=FlexBase64.createDecoderOutputStream(baos,10);
  chunkWrite(stream,towelStrip);
  Assert.assertEquals(Bytes.asList(TOWEL.getBytes("US-ASCII")),Bytes.asList(baos.toByteArray()));
}
