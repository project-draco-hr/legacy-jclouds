{
  container=checkNotNull(System.getProperty(PROPERTY_GETPATH_CONTAINER));
  path=checkNotNull(System.getProperty(PROPERTY_GETPATH_PATH));
  BlobStoreContext s3Context=S3ContextFactory.createContext(checkNotNull(System.getProperty(PROPERTY_AWS_ACCESSKEYID),PROPERTY_AWS_ACCESSKEYID),System.getProperty(PROPERTY_AWS_SECRETACCESSKEY,PROPERTY_AWS_SECRETACCESSKEY),new Log4JLoggingModule());
  urisToTest.add(String.format("blobstore://%s:%s@%s/%s/%s",System.getProperty(PROPERTY_AWS_ACCESSKEYID),System.getProperty(PROPERTY_AWS_SECRETACCESSKEY),"s3",container,path));
  BlobStoreContext cfContext=CloudFilesContextFactory.createContext(checkNotNull(System.getProperty(PROPERTY_RACKSPACE_USER),PROPERTY_RACKSPACE_USER),System.getProperty(PROPERTY_RACKSPACE_KEY,PROPERTY_RACKSPACE_KEY),new Log4JLoggingModule());
  urisToTest.add(String.format("blobstore://%s:%s@%s/%s/%s",System.getProperty(PROPERTY_RACKSPACE_USER),System.getProperty(PROPERTY_RACKSPACE_KEY),"cloudfiles",container,path));
  BlobStoreContext azContext=AzureBlobContextFactory.createContext(checkNotNull(System.getProperty(PROPERTY_AZURESTORAGE_ACCOUNT),PROPERTY_AZURESTORAGE_ACCOUNT),System.getProperty(PROPERTY_AZURESTORAGE_KEY,PROPERTY_AZURESTORAGE_KEY),new Log4JLoggingModule());
  urisToTest.add(String.format("blobstore://%s:%s@%s/%s/%s",System.getProperty(PROPERTY_AZURESTORAGE_ACCOUNT),System.getProperty(PROPERTY_AZURESTORAGE_KEY),"azureblob",container,path));
  this.contexts=ImmutableSet.of(s3Context,cfContext,azContext);
  boolean deleted=false;
  for (  BlobStoreContext context : contexts) {
    if (context.getBlobStore().containerExists(container)) {
      System.err.printf("deleting container %s at %s%n",container,context.getProviderSpecificContext().getEndPoint());
      context.getBlobStore().deleteContainer(container);
      deleted=true;
    }
  }
  if (deleted) {
    System.err.println("sleeping 30 seconds to allow containers to clear");
    Thread.sleep(30000);
  }
  for (  BlobStoreContext context : contexts) {
    System.err.printf("creating container %s at %s%n",container,context.getProviderSpecificContext().getEndPoint());
    context.getBlobStore().createContainerInLocation("default",container);
  }
  if (deleted) {
    System.err.println("sleeping 5 seconds to allow containers to create");
    Thread.sleep(30000);
  }
  for (  BlobStoreContext context : contexts) {
    System.err.printf("creating directory %s in container %s at %s%n",container,path,context.getProviderSpecificContext().getEndPoint());
    context.getBlobStore().createDirectory(container,path);
  }
}
