{
  InputStream is=getClass().getResourceAsStream("/ec2/nova_images.xml");
  Set<Image> result=parseImages(is);
  assertEquals(result.size(),19);
  ImageParser parser=new ImageParser(new EC2PopulateDefaultLoginCredentialsForImageStrategy(),Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(defaultLocation)),Suppliers.ofInstance(defaultLocation),"nebula");
  org.jclouds.compute.domain.Image image=parser.apply(Iterables.get(result,0));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"nasacms/image.manifest.xml");
  assertEquals(image.getId(),"us-east-1/ami-h30p5im0");
  assertEquals(image.getProviderId(),"ami-h30p5im0");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"nasacms/image.manifest.xml");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","foo","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  assertEquals(parser.apply(Iterables.get(result,1)),null);
  image=parser.apply(Iterables.get(result,2));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"nebula/tiny");
  assertEquals(image.getId(),"us-east-1/ami-tiny");
  assertEquals(image.getProviderId(),"ami-tiny");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"nebula/tiny");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","vishvananda","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,3));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"demos/mediawiki");
  assertEquals(image.getId(),"us-east-1/ami-630A130F");
  assertEquals(image.getProviderId(),"ami-630A130F");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"demos/mediawiki");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","admin","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  assertEquals(parser.apply(Iterables.get(result,4)),null);
  assertEquals(parser.apply(Iterables.get(result,5)),null);
  assertEquals(parser.apply(Iterables.get(result,6)),null);
  image=parser.apply(Iterables.get(result,7));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"pinglet/instances");
  assertEquals(image.getId(),"us-east-1/ami-pinginst");
  assertEquals(image.getProviderId(),"ami-pinginst");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"pinglet/instances");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","admin","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,8));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"bucket/testbuntu.manifest.xml");
  assertEquals(image.getId(),"us-east-1/ami-alqbihe2");
  assertEquals(image.getProviderId(),"ami-alqbihe2");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"bucket/testbuntu.manifest.xml");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","rkumar2","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,9));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"gfortran-bucket/gfortran.manifest.xml");
  assertEquals(image.getId(),"us-east-1/ami-i0aemtfp");
  assertEquals(image.getProviderId(),"ami-i0aemtfp");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"gfortran-bucket/gfortran.manifest.xml");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","ykliu","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  assertEquals(parser.apply(Iterables.get(result,10)),null);
  image=parser.apply(Iterables.get(result,11));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"grinder/grinder-analyzer.manifest.xml");
  assertEquals(image.getId(),"us-east-1/ami-2ig7w1bh");
  assertEquals(image.getProviderId(),"ami-2ig7w1bh");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"grinder/grinder-analyzer.manifest.xml");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","foo","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  assertEquals(parser.apply(Iterables.get(result,12)),null);
  image=parser.apply(Iterables.get(result,13));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"nebula/lucid");
  assertEquals(image.getId(),"us-east-1/ami-lucid");
  assertEquals(image.getProviderId(),"ami-lucid");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"10.04");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"nebula/lucid");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","vishvananda","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,14));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"nebula/karmic-large");
  assertEquals(image.getId(),"us-east-1/ami-karmiclg");
  assertEquals(image.getProviderId(),"ami-karmiclg");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"9.10");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"nebula/karmic-large");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","admin","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,15));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"jo/qa-grinder.manifest.xml");
  assertEquals(image.getId(),"us-east-1/ami-8jen8kdn");
  assertEquals(image.getProviderId(),"ami-8jen8kdn");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"jo/qa-grinder.manifest.xml");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","jyothi","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,16));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"nebula/lucid-large");
  assertEquals(image.getId(),"us-east-1/ami-lucidlg");
  assertEquals(image.getProviderId(),"ami-lucidlg");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"10.04");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"nebula/lucid-large");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","vishvananda","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,17));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"demos/wordpress");
  assertEquals(image.getId(),"us-east-1/ami-6CD61336");
  assertEquals(image.getProviderId(),"ami-6CD61336");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"demos/wordpress");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","admin","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
  image=parser.apply(Iterables.get(result,18));
  assertEquals(image.getOperatingSystem().is64Bit(),true);
  assertEquals(image.getDescription(),"nebula/ubuntu-karmic");
  assertEquals(image.getId(),"us-east-1/ami-25CB1213");
  assertEquals(image.getProviderId(),"ami-25CB1213");
  assertEquals(image.getLocation(),defaultLocation);
  assertEquals(image.getName(),null);
  assertEquals(image.getOperatingSystem().getName(),null);
  assertEquals(image.getOperatingSystem().getVersion(),"9.10");
  assertEquals(image.getOperatingSystem().getArch(),"paravirtual");
  assertEquals(image.getOperatingSystem().getDescription(),"nebula/ubuntu-karmic");
  assertEquals(image.getOperatingSystem().getFamily(),OsFamily.UBUNTU);
  assertEquals(image.getUserMetadata(),ImmutableMap.<String,String>of("owner","admin","rootDeviceType","instance-store"));
  assertEquals(image.getVersion(),null);
}
