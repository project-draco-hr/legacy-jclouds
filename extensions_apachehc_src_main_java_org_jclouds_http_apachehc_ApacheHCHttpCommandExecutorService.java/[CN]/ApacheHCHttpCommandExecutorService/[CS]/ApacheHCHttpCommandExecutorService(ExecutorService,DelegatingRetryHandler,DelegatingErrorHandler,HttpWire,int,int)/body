{
  super(ioWorkerExecutor,retryHandler,errorHandler,wire);
  checkArgument(globalMaxConnections > 0,Constants.PROPERTY_MAX_CONNECTIONS_PER_CONTEXT + " must be greater than zero");
  checkArgument(globalMaxConnectionsPerHost > 0,Constants.PROPERTY_MAX_CONNECTIONS_PER_HOST + " must be greater than zero");
  poolMap=new MapMaker().makeComputingMap(new Function<URI,HttpClient>(){
    public HttpClient apply(    URI endPoint){
      checkArgument(endPoint.getHost() != null,String.format("endPoint.getHost() is null for %s",endPoint));
      HttpParams params=new BasicHttpParams();
      try {
        ConnManagerParams.setMaxTotalConnections(params,globalMaxConnections);
        ConnPerRoute connectionsPerRoute=new ConnPerRouteBean(globalMaxConnectionsPerHost);
        ConnManagerParams.setMaxConnectionsPerRoute(params,connectionsPerRoute);
        HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
        SchemeRegistry schemeRegistry=new SchemeRegistry();
        if (endPoint.getScheme().equals("http"))         schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));
 else         schemeRegistry.register(new Scheme("https",SSLSocketFactory.getSocketFactory(),443));
        ClientConnectionManager cm=new ThreadSafeClientConnManager(params,schemeRegistry);
        return new DefaultHttpClient(cm,params);
      }
 catch (      RuntimeException e) {
        logger.error(e,"error creating entry for %s",endPoint);
        throw e;
      }
    }
  }
);
}
