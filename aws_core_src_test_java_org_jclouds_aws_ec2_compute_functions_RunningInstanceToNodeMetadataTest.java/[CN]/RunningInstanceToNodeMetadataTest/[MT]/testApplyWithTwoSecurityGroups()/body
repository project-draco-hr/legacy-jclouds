{
  AMIClient amiClient=createMock(AMIClient.class);
  Map<RegionAndName,KeyPair> credentialsMap=createMock(Map.class);
  PopulateDefaultLoginCredentialsForImageStrategy credentialProvider=createMock(PopulateDefaultLoginCredentialsForImageStrategy.class);
  RunningInstance instance=createMock(RunningInstance.class);
  Image image=createMock(Image.class);
  expect(instance.getId()).andReturn("id").atLeastOnce();
  expect(instance.getGroupIds()).andReturn(ImmutableSet.of("jclouds#tag","jclouds#tag2")).atLeastOnce();
  expect(instance.getKeyName()).andReturn("jclouds#keyName").atLeastOnce();
  expect(instance.getInstanceState()).andReturn(InstanceState.RUNNING);
  Location location=new LocationImpl(LocationScope.ZONE,"us-east-1a","description",null);
  Set<Location> locations=ImmutableSet.<Location>of(location);
  org.jclouds.compute.domain.Image jcImage=createMock(org.jclouds.compute.domain.Image.class);
  Set<org.jclouds.compute.domain.Image> images=ImmutableSet.<org.jclouds.compute.domain.Image>of(jcImage);
  expect(instance.getIpAddress()).andReturn(InetAddress.getByAddress(new byte[]{12,10,10,1}));
  expect(instance.getPrivateIpAddress()).andReturn(InetAddress.getByAddress(new byte[]{10,10,10,1}));
  expect(instance.getRegion()).andReturn(Region.US_EAST_1).atLeastOnce();
  expect(instance.getImageId()).andReturn("imageId").atLeastOnce();
  expect(jcImage.getId()).andReturn("imageId").atLeastOnce();
  expect(jcImage.getLocation()).andReturn(location).atLeastOnce();
  expect(amiClient.describeImagesInRegion(Region.US_EAST_1,imageIds("imageId"))).andReturn(ImmutableSet.<Image>of(image));
  expect(credentialProvider.execute(image)).andReturn(new Credentials("user","pass"));
  expect(credentialsMap.get(new RegionAndName(Region.US_EAST_1,"jclouds#keyName"))).andReturn(new KeyPair(Region.US_EAST_1,"jclouds#keyName","keyFingerprint","pass"));
  expect(instance.getAvailabilityZone()).andReturn(AvailabilityZone.US_EAST_1A).atLeastOnce();
  expect(instance.getInstanceType()).andReturn(InstanceType.C1_XLARGE).atLeastOnce();
  replay(amiClient);
  replay(credentialsMap);
  replay(credentialProvider);
  replay(instance);
  replay(jcImage);
  RunningInstanceToNodeMetadata parser=new RunningInstanceToNodeMetadata(amiClient,credentialsMap,credentialProvider,images,locations,new RunningInstanceToStorageMappingUnix());
  NodeMetadata metadata=parser.apply(instance);
  assertEquals(metadata.getTag(),"NOTAG-id");
  assertEquals(metadata.getLocation(),location);
  assertEquals(metadata.getImage(),jcImage);
  assertEquals(metadata.getCredentials(),new Credentials("user","pass"));
  verify(jcImage);
  verify(amiClient);
  verify(credentialsMap);
  verify(credentialProvider);
  verify(instance);
}
