{
  AMIClient amiClient=createMock(AMIClient.class);
  Map<RegionTag,KeyPair> credentialsMap=createMock(Map.class);
  Map<String,org.jclouds.compute.domain.Image> images=createMock(Map.class);
  Map<String,Location> locations=createMock(Map.class);
  PopulateDefaultLoginCredentialsForImageStrategy credentialProvider=createMock(PopulateDefaultLoginCredentialsForImageStrategy.class);
  RunningInstance instance=createMock(RunningInstance.class);
  expect(instance.getId()).andReturn("id").atLeastOnce();
  expect(instance.getKeyName()).andReturn(null).atLeastOnce();
  expect(instance.getInstanceState()).andReturn(InstanceState.RUNNING);
  Location location=new LocationImpl(LocationScope.ZONE,"us-east-1a","description",null);
  expect(locations.get("us-east-1a")).andReturn(location);
  org.jclouds.compute.domain.Image jcImage=createNiceMock(org.jclouds.compute.domain.Image.class);
  expect(images.get("imageId")).andReturn(jcImage);
  expect(instance.getIpAddress()).andReturn(InetAddress.getByAddress(new byte[]{12,10,10,1}));
  expect(instance.getPrivateIpAddress()).andReturn(InetAddress.getByAddress(new byte[]{10,10,10,1}));
  expect(instance.getAvailabilityZone()).andReturn(AvailabilityZone.US_EAST_1A).atLeastOnce();
  expect(instance.getImageId()).andReturn("imageId").atLeastOnce();
  expect(instance.getInstanceType()).andReturn(InstanceType.C1_XLARGE).atLeastOnce();
  replay(amiClient);
  replay(credentialsMap);
  replay(credentialProvider);
  replay(instance);
  replay(images);
  replay(locations);
  RunningInstanceToNodeMetadata parser=new RunningInstanceToNodeMetadata(amiClient,credentialsMap,credentialProvider,images,locations,new RunningInstanceToStorageMappingUnix());
  NodeMetadata metadata=parser.apply(instance);
  assertEquals(metadata.getLocation(),location);
  assertEquals(metadata.getImage(),jcImage);
  assertEquals(metadata.getTag(),"NOTAG-id");
  assertEquals(metadata.getCredentials(),null);
  verify(amiClient);
  verify(credentialsMap);
  verify(credentialProvider);
  verify(instance);
  verify(images);
  verify(locations);
}
