{
  EC2Client client=createMock(EC2Client.class);
  AMIClient amiClient=createMock(AMIClient.class);
  expect(client.getAMIServices()).andReturn(amiClient).atLeastOnce();
  Map<RegionAndName,KeyPair> credentialsMap=createMock(Map.class);
  ConcurrentMap<RegionAndName,org.jclouds.compute.domain.Image> imageMap=createMock(ConcurrentMap.class);
  Supplier<Set<? extends Hardware>> hardwares=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(EC2Hardware.M1_SMALL));
  PopulateDefaultLoginCredentialsForImageStrategy credentialProvider=createMock(PopulateDefaultLoginCredentialsForImageStrategy.class);
  RunningInstance instance=createMock(RunningInstance.class);
  Image image=createMock(Image.class);
  expect(instance.getId()).andReturn("i-3d640055").atLeastOnce();
  expect(instance.getGroupIds()).andReturn(ImmutableSet.<String>of()).atLeastOnce();
  expect(instance.getKeyName()).andReturn("nebulatanimislam").atLeastOnce();
  expect(instance.getInstanceState()).andReturn(InstanceState.RUNNING);
  Location region=new LocationImpl(LocationScope.REGION,"us-east-1","description",null);
  Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(region));
  org.jclouds.compute.domain.Image jcImage=createMock(org.jclouds.compute.domain.Image.class);
  expect(instance.getIpAddress()).andReturn(null);
  expect(instance.getPrivateIpAddress()).andReturn("10.202.117.241");
  expect(instance.getRegion()).andReturn(Region.US_EAST_1).atLeastOnce();
  expect(jcImage.getOperatingSystem()).andReturn(createMock(OperatingSystem.class)).atLeastOnce();
  expect(instance.getImageId()).andReturn("ami-1515f07c").atLeastOnce();
  expect(imageMap.get(new RegionAndName(Region.US_EAST_1,"ami-1515f07c"))).andReturn(jcImage);
  expect(amiClient.describeImagesInRegion(Region.US_EAST_1,imageIds("ami-1515f07c"))).andReturn((Set)ImmutableSet.<Image>of(image));
  expect(credentialProvider.execute(image)).andReturn(new Credentials("user","pass"));
  expect(credentialsMap.get(new RegionAndName(Region.US_EAST_1,"nebulatanimislam"))).andReturn(null);
  expect(instance.getAvailabilityZone()).andReturn(null).atLeastOnce();
  expect(instance.getInstanceType()).andReturn("hhttpp").atLeastOnce();
  replay(imageMap);
  replay(client);
  replay(amiClient);
  replay(credentialsMap);
  replay(credentialProvider);
  replay(instance);
  replay(jcImage);
  RunningInstanceToNodeMetadata parser=new RunningInstanceToNodeMetadata(client,credentialsMap,credentialProvider,imageMap,locations,hardwares);
  NodeMetadata metadata=parser.apply(instance);
  assertEquals(metadata.getTag(),"NOTAG-i-3d640055");
  assertEquals(metadata.getLocation(),region);
  assertEquals(metadata.getImageId(),"us-east-1/ami-1515f07c");
  assertEquals(metadata.getHardware(),null);
  assertEquals(metadata.getCredentials(),new Credentials("user",null));
  verify(imageMap);
  verify(jcImage);
  verify(client);
  verify(amiClient);
  verify(credentialsMap);
  verify(credentialProvider);
  verify(instance);
}
