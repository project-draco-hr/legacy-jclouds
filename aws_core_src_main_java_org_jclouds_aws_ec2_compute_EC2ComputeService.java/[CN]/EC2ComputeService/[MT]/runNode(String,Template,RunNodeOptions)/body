{
  checkArgument(template.getImage() instanceof EC2Image,"unexpected image type. should be EC2Image, was: " + template.getImage().getClass());
  checkArgument(template.getSize() instanceof EC2Size,"unexpected image type. should be EC2Size, was: " + template.getSize().getClass());
  EC2Image ec2Image=EC2Image.class.cast(template.getImage());
  EC2Size ec2Size=EC2Size.class.cast(template.getSize());
  Region region=ec2Image.getImage().getRegion();
  KeyPair keyPair=createKeyPairInRegion(region,name);
  String securityGroupName=name;
  createSecurityGroupInRegion(region,securityGroupName,options.getOpenPorts());
  logger.debug(">> running instance region(%s) ami(%s) type(%s) keyPair(%s) securityGroup(%s)",region,ec2Image.getId(),ec2Size.getInstanceType(),keyPair.getKeyName(),securityGroupName);
  RunInstancesOptions instanceOptions=withKeyName(keyPair.getKeyName()).asType(ec2Size.getInstanceType()).withSecurityGroup(securityGroupName).withAdditionalInfo(name);
  if (options.getRunScript() != null)   instanceOptions.withUserData(options.getRunScript());
  RunningInstance runningInstance=Iterables.getOnlyElement(ec2Client.getInstanceServices().runInstancesInRegion(region,null,ec2Image.getId(),1,1,instanceOptions));
  logger.debug("<< started instance(%s)",runningInstance.getId());
  instanceStateRunning.apply(runningInstance);
  logger.debug("<< running instance(%s)",runningInstance.getId());
  runningInstance=getOnlyRunningInstanceInRegion(region,runningInstance.getId());
  Set<InetAddress> publicAddresses=runningInstance.getIpAddress() == null ? ImmutableSet.<InetAddress>of() : ImmutableSet.<InetAddress>of(runningInstance.getIpAddress());
  Set<InetAddress> privateAddresses=runningInstance.getPrivateIpAddress() == null ? ImmutableSet.<InetAddress>of() : ImmutableSet.<InetAddress>of(runningInstance.getPrivateIpAddress());
  return new CreateNodeResponseImpl(runningInstance.getId(),name,runningInstance.getRegion().toString(),null,ImmutableMap.<String,String>of(),instanceToNodeState.get(runningInstance.getInstanceState()),publicAddresses,privateAddresses,22,LoginType.SSH,new Credentials("root",keyPair.getKeyMaterial()),ImmutableMap.<String,String>of());
}
