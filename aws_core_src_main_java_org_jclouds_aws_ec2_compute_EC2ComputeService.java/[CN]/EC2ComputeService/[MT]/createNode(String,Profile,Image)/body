{
  InstanceType type=checkNotNull(profileInstanceTypeMap.get(profile),"profile not supported: " + profile);
  String ami=checkNotNull(imageAmiIdMap.get(type).get(image),"image not supported: " + image);
  KeyPair keyPair=createKeyPair(name);
  String securityGroupName=name;
  createSecurityGroup(securityGroupName,22,80,8080,443);
  String script=new ScriptBuilder().addStatement(exec("apt-get update")).addStatement(exec("apt-get upgrade -y")).addStatement(exec("apt-get install -y openjdk-6-jdk")).addStatement(exec("wget -qO/usr/bin/runurl run.alestic.com/runurl")).addStatement(exec("chmod 755 /usr/bin/runurl")).build(OsFamily.UNIX);
  logger.debug(">> running instance ami(%s) type(%s) keyPair(%s) securityGroup(%s)",ami,type,keyPair.getKeyName(),securityGroupName);
  RunningInstance runningInstance=Iterables.getLast(ec2Client.getInstanceServices().runInstancesInRegion(Region.DEFAULT,null,ami,1,1,withKeyName(keyPair.getKeyName()).asType(type).withSecurityGroup(securityGroupName).withAdditionalInfo(name).withUserData(script.getBytes())).getRunningInstances());
  logger.debug("<< started instance(%s)",runningInstance.getId());
  instanceStateRunning.apply(runningInstance);
  logger.debug("<< running instance(%s)",runningInstance.getId());
  runningInstance=getRunningInstance(runningInstance.getId());
  Set<InetAddress> publicAddresses=runningInstance.getIpAddress() == null ? ImmutableSet.<InetAddress>of() : ImmutableSet.<InetAddress>of(runningInstance.getIpAddress());
  Set<InetAddress> privateAddresses=runningInstance.getPrivateIpAddress() == null ? ImmutableSet.<InetAddress>of() : ImmutableSet.<InetAddress>of(runningInstance.getPrivateIpAddress());
  return new CreateNodeResponseImpl(runningInstance.getId(),name,instanceToNodeState.get(runningInstance.getInstanceState()),publicAddresses,privateAddresses,22,LoginType.SSH,new Credentials("root",keyPair.getKeyMaterial()),ImmutableMap.<String,String>of());
}
