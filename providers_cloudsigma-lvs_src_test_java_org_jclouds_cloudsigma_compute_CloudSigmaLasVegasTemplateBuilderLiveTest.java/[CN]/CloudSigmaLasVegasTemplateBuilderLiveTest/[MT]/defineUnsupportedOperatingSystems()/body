{
  return Predicates.not(new Predicate<OsFamilyVersion64Bit>(){
    @Override public boolean apply(    OsFamilyVersion64Bit input){
switch (input.family) {
case UBUNTU:
        return (ImmutableSet.of("11.04","10.10").contains(input.version) && input.is64Bit) || (input.version.equals("11.10") && !input.is64Bit) || input.version.equals("")|| input.version.equals("10.04")|| input.version.equals("12.04");
case SOLARIS:
      return (input.version.equals("") || input.version.equals("10")) && input.is64Bit;
case DEBIAN:
    return input.version.equals("") || (input.version.equals("5.0") && !input.is64Bit) || (input.version.equals("6.0") && input.is64Bit);
case CENTOS:
  return (input.version.equals("") || input.version.equals("5.5") || input.version.equals("5.7")|| input.version.equals("6.0")) && input.is64Bit;
case WINDOWS:
return input.version.equals("2008") || input.version.equals("2003") || input.version.equals("");
default :
return false;
}
}
}
);
}
