{
  String containerName="MyContainer" + System.currentTimeMillis() + "/";
  String dataObjectNameIn="dataobject08121.txt";
  File tmpFileIn=new File("temp.txt");
  String value;
  Files.touch(tmpFileIn);
  CreateDataObjectOptions pCreateDataObjectOptions;
  DataObject dataObject;
  Iterator<String> keys;
  Map<String,String> dataObjectMetaDataOut;
  Map<String,String> pContainerMetaDataIn=new HashMap<String,String>();
  Map<String,String> pDataObjectMetaDataIn=new LinkedHashMap<String,String>();
  pDataObjectMetaDataIn.put("dataObjectkey1","value1");
  pDataObjectMetaDataIn.put("dataObjectkey2","value2");
  pDataObjectMetaDataIn.put("dataObjectkey3","value3");
  CreateContainerOptions pCreateContainerOptions=CreateContainerOptions.Builder.metadata(pContainerMetaDataIn);
  ContainerApi containerApi=cdmiContext.getApi().getContainerApi();
  DataApi dataApi=cdmiContext.getApi().getDataApi();
  Logger.getAnonymousLogger().info("createContainer: " + containerName);
  Container container=containerApi.createContainer(containerName,pCreateContainerOptions);
  try {
    assertNotNull(container);
    System.out.println(container);
    container=containerApi.getContainer(containerName);
    assertNotNull(container);
    assertNotNull(container.getChildren());
    assertEquals(container.getChildren().isEmpty(),true);
    value="Hello CDMI data object with value mimetype and metadata";
    pCreateDataObjectOptions=CreateDataObjectOptions.Builder.value(value).mimetype("text/plain").metadata(pDataObjectMetaDataIn);
    dataObject=dataApi.createDataObject(containerName,dataObjectNameIn,pCreateDataObjectOptions);
    assertNotNull(dataObject);
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn);
    assertNotNull(dataObject);
    System.out.println(dataObject);
    System.out.println("value: " + dataObject.getValueAsString());
    assertEquals(dataObject.getMimetype(),"text/plain");
    assertEquals(dataObject.getValueAsString(),value);
    dataObjectMetaDataOut=dataObject.getUserMetadata();
    assertNotNull(dataObjectMetaDataOut);
    keys=pDataObjectMetaDataIn.keySet().iterator();
    while (keys.hasNext()) {
      String key=keys.next();
      assertEquals(dataObjectMetaDataOut.containsKey(key),true);
      assertEquals(dataObjectMetaDataOut.get(key),pDataObjectMetaDataIn.get(key));
    }
    assertEquals(Integer.parseInt(dataObject.getSystemMetadata().get("cdmi_size")),value.length());
    assertEquals(dataObject.getObjectName(),dataObjectNameIn);
    assertEquals(dataObject.getObjectType(),"application/cdmi-object");
    assertEquals(dataObject.getParentURI(),"/" + containerName);
    assertEquals(containerApi.getContainer(containerName).getChildren().contains(dataObjectNameIn),true);
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.field("parentURI"));
    assertNotNull(dataObject);
    System.out.println(dataObject);
    assertEquals(dataObject.getParentURI(),container.getParentURI() + container.getObjectName());
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.field("parentURI").field("objectName"));
    assertNotNull(dataObject);
    System.out.println(dataObject);
    assertEquals(dataObject.getParentURI(),container.getParentURI() + container.getObjectName());
    assertEquals(dataObject.getObjectName(),dataObjectNameIn);
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.field("parentURI").field("objectName").field("mimetype"));
    assertNotNull(dataObject);
    System.out.println(dataObject);
    assertEquals(dataObject.getParentURI(),container.getParentURI() + container.getObjectName());
    assertEquals(dataObject.getObjectName(),dataObjectNameIn);
    assertEquals(dataObject.getMimetype(),"text/plain");
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.field("parentURI").field("objectName").field("mimetype").metadata());
    assertNotNull(dataObject);
    System.out.println(dataObject);
    assertEquals(dataObject.getParentURI(),container.getParentURI() + container.getObjectName());
    assertEquals(dataObject.getObjectName(),dataObjectNameIn);
    assertEquals(dataObject.getMimetype(),"text/plain");
    dataObjectMetaDataOut=dataObject.getUserMetadata();
    assertNotNull(dataObjectMetaDataOut);
    keys=pDataObjectMetaDataIn.keySet().iterator();
    while (keys.hasNext()) {
      String key=keys.next();
      assertEquals(dataObjectMetaDataOut.containsKey(key),true);
      assertEquals(dataObjectMetaDataOut.get(key),pDataObjectMetaDataIn.get(key));
    }
    assertEquals(Integer.parseInt(dataObject.getSystemMetadata().get("cdmi_size")),value.length());
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.metadata("cdmi_size"));
    assertNotNull(dataObject);
    System.out.println(dataObject);
    assertEquals(Integer.parseInt(dataObject.getSystemMetadata().get("cdmi_size")),value.length());
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.field("mimetype").value());
    assertNotNull(dataObject);
    System.out.println(dataObject);
    System.out.println(dataObject.getValueAsString());
    assertEquals(dataObject.getMimetype(),"text/plain");
    assertEquals(dataObject.getValueAsString(),value);
    dataObject=dataApi.getDataObject(containerName,dataObjectNameIn,DataObjectQueryParams.Builder.field("mimetype").value(0,3));
    assertNotNull(dataObject);
    System.out.println(dataObject);
    System.out.println(dataObject.getValueAsString());
    assertEquals(dataObject.getMimetype(),"text/plain");
    dataApi.deleteDataObject(containerName,dataObjectNameIn);
    assertEquals(containerApi.getContainer(containerName).getChildren().contains(dataObjectNameIn),false);
  }
  finally {
    tmpFileIn.delete();
    containerApi.deleteContainer(containerName);
  }
}
