{
  this.user=checkNotNull(loginCredentials,"loginCredentials").getUser();
  this.host=checkNotNull(socket,"socket").getAddress();
  checkArgument(socket.getPort() > 0,"ssh port must be greater then zero" + socket.getPort());
  checkArgument(loginCredentials.getPassword() != null || loginCredentials.getPrivateKey() != null,"you must specify a password or a key");
  this.backoffLimitedRetryHandler=checkNotNull(backoffLimitedRetryHandler,"backoffLimitedRetryHandler");
  if (loginCredentials.getPrivateKey() == null) {
    this.toString=String.format("%s:pw[%s]@%s:%d",loginCredentials.getUser(),hex(md5(loginCredentials.getPassword().getBytes())),host,socket.getPort());
  }
 else {
    String fingerPrint=fingerprintPrivateKey(loginCredentials.getPrivateKey());
    String sha1=sha1PrivateKey(loginCredentials.getPrivateKey());
    this.toString=String.format("%s:rsa[fingerprint(%s),sha1(%s)]@%s:%d",loginCredentials.getUser(),fingerPrint,sha1,host,socket.getPort());
  }
  sshClientConnection=SSHClientConnection.builder().hostAndPort(HostAndPort.fromParts(host,socket.getPort())).loginCredentials(loginCredentials).connectTimeout(timeout).sessionTimeout(timeout).build();
}
