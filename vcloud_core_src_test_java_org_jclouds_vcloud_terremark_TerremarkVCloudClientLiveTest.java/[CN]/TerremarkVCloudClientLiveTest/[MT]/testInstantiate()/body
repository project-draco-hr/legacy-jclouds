{
  String serverName="adriantest";
  int processorCount=1;
  int memory=512;
  String catalogOs="Ubuntu Server 9.04 (32-bit)";
  String expectedOs="Ubuntu Linux (32-bit)";
  int templateId=tmClient.getCatalog().get(45,TimeUnit.SECONDS).get(catalogOs).getId();
  VApp vApp=tmClient.instantiateVAppTemplate(serverName,templateId).get(45,TimeUnit.SECONDS);
  assertEquals(vApp.getStatus(),VAppStatus.CREATING);
  Task instantiateTask=getLastTaskFor(vApp.getVDC().getLocation());
  assertEquals(instantiateTask.getStatus(),TaskStatus.QUEUED);
  Task deployTask=tmClient.deploy(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(deployTask.getLocation(),instantiateTask.getLocation());
  deployTask=tmClient.deploy(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(deployTask.getLocation(),instantiateTask.getLocation());
  vApp=tmClient.getVApp(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(vApp.getStatus(),VAppStatus.CREATING);
  try {
    tmClient.cancelTask(deployTask.getLocation()).get(45,TimeUnit.SECONDS);
  }
 catch (  ExecutionException e) {
    assertEquals(e.getCause().getClass(),HttpResponseException.class);
    assertEquals(((HttpResponseException)e.getCause()).getResponse().getStatusCode(),501);
  }
  deployTask=blockUntilSuccess(deployTask);
  vApp=tmClient.getVApp(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  verifyConfigurationOfVApp(vApp,serverName,expectedOs,processorCount,memory);
  assertEquals(vApp.getStatus(),VAppStatus.OFF);
  try {
    tmClient.undeploy(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS);
  }
 catch (  ExecutionException e) {
    assertEquals(e.getCause().getClass(),HttpResponseException.class);
    assertEquals(((HttpResponseException)e.getCause()).getResponse().getStatusCode(),501);
  }
  deployTask=blockUntilSuccess(tmClient.powerOn(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS));
  vApp=tmClient.getVApp(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(vApp.getStatus(),VAppStatus.ON);
  try {
    tmClient.suspend(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS);
  }
 catch (  ExecutionException e) {
    assertEquals(e.getCause().getClass(),HttpResponseException.class);
    assertEquals(((HttpResponseException)e.getCause()).getResponse().getStatusCode(),501);
  }
  deployTask=blockUntilSuccess(tmClient.reset(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS));
  vApp=tmClient.getVApp(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(vApp.getStatus(),VAppStatus.ON);
  tmClient.shutdown(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS);
  vApp=tmClient.getVApp(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(vApp.getStatus(),VAppStatus.ON);
  deployTask=blockUntilSuccess(tmClient.powerOff(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS));
  vApp=tmClient.getVApp(vApp.getLocation()).get(45,TimeUnit.SECONDS);
  assertEquals(vApp.getStatus(),VAppStatus.OFF);
  tmClient.delete(deployTask.getResult().getLocation()).get(45,TimeUnit.SECONDS);
}
