{
  CIMOperatingSystem os=Iterables.find(new Gson().<Set<CIMOperatingSystem>>fromJson(Strings2.toStringAndClose(getClass().getResourceAsStream("/savvis-symphonyvpdc/predefined_operatingsystems.json")),new TypeLiteral<Set<CIMOperatingSystem>>(){
  }
.getType()),new Predicate<CIMOperatingSystem>(){
    @Override public boolean apply(    CIMOperatingSystem arg0){
      return arg0.getOsType() == OSType.RHEL_64;
    }
  }
);
  Network network=Network.builder().name("VM Tier01").build();
  String expected=Strings2.toStringAndClose(getClass().getResourceAsStream("/vm-multiple-default.xml"));
  VMSpec spec=VMSpec.builder().name("Test VM").operatingSystem(os).network(network).build();
  List<VMSpec> specs=new ArrayList<VMSpec>();
  specs.add(spec);
  assertEquals(new BindVMSpecToXmlPayload().generateXml(specs),expected);
}
