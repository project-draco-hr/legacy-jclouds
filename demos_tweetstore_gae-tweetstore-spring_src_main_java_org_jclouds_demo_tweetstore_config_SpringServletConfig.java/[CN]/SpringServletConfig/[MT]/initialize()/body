{
  Properties props=loadJCloudsProperties();
  LOGGER.trace("About to initialize members.");
  Module googleModule=new GoogleAppEngineConfigurationModule();
  Set<Module> modules=ImmutableSet.<Module>of(googleModule);
  try {
    twitter4j.conf.Configuration twitterConf=new ConfigurationBuilder().setOAuthConsumerKey(props.getProperty(PROPERTY_TWITTER_CONSUMER_KEY)).setOAuthConsumerSecret(props.getProperty(PROPERTY_TWITTER_CONSUMER_SECRET)).setOAuthAccessToken(props.getProperty(PROPERTY_TWITTER_ACCESSTOKEN)).setOAuthAccessTokenSecret(props.getProperty(PROPERTY_TWITTER_ACCESSTOKEN_SECRET)).build();
    twitterClient=new TwitterFactory(twitterConf).getInstance();
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException("properties for twitter not configured properly in " + props.toString(),e);
  }
  container=checkNotNull(props.getProperty(PROPERTY_TWEETSTORE_CONTAINER),PROPERTY_TWEETSTORE_CONTAINER);
  providerTypeToBlobStoreMap=Maps.newHashMap();
  for (  String hint : getBlobstoreContexts(props)) {
    providerTypeToBlobStoreMap.put(hint,BlobStoreContextBuilder.newBuilder(hint).modules(modules).overrides(props).build());
  }
  queue=QueueFactory.getQueue("twitter");
  LOGGER.trace("Members initialized. Twitter: '%s', container: '%s', provider types: '%s'",twitterClient,container,providerTypeToBlobStoreMap.keySet());
}
