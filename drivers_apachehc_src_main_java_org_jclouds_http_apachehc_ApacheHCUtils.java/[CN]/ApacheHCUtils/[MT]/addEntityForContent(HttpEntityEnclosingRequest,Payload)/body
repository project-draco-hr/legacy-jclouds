{
  payload=payload instanceof DelegatingPayload ? DelegatingPayload.class.cast(payload).getDelegate() : payload;
  if (payload instanceof StringPayload) {
    StringEntity nStringEntity=null;
    try {
      nStringEntity=new StringEntity((String)payload.getRawContent());
    }
 catch (    UnsupportedEncodingException e) {
      throw new UnsupportedOperationException("Encoding not supported",e);
    }
    nStringEntity.setContentType(payload.getContentMetadata().getContentType());
    apacheRequest.setEntity(nStringEntity);
  }
 else   if (payload instanceof FilePayload) {
    apacheRequest.setEntity(new FileEntity((File)payload.getRawContent(),payload.getContentMetadata().getContentType()));
  }
 else   if (payload instanceof ByteArrayPayload) {
    ByteArrayEntity Entity=new ByteArrayEntity((byte[])payload.getRawContent());
    Entity.setContentType(payload.getContentMetadata().getContentType());
    apacheRequest.setEntity(Entity);
  }
 else {
    InputStream inputStream=payload.getInput();
    if (payload.getContentMetadata().getContentLength() == null)     throw new IllegalArgumentException("you must specify size when content is an InputStream");
    InputStreamEntity entity=new InputStreamEntity(inputStream,payload.getContentMetadata().getContentLength());
    entity.setContentType(payload.getContentMetadata().getContentType());
    apacheRequest.setEntity(entity);
  }
  Set<String> desiredHeaders=ImmutableSet.of("Content-Disposition","Content-Encoding","Content-Language","Expires");
  MutableContentMetadata md=payload.getContentMetadata();
  for (  Map.Entry<String,String> entry : contentMetadataCodec.toHeaders(md).entries()) {
    if (desiredHeaders.contains(entry.getKey())) {
      apacheRequest.addHeader(entry.getKey(),entry.getValue());
    }
  }
  assert(apacheRequest.getEntity() != null);
}
