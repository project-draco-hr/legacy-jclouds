{
  VAppClient vAppClient=context.getApi().getVAppClient();
  VApp vApp;
  try {
    vApp=vAppClient.getVApp(vAppURI);
    logger.debug("Deleting VApp %s (%s)",vApp.getName(),vAppURI.getPath());
  }
 catch (  VCloudDirectorException e) {
    logger.info("Cannot find VApp at %s",vAppURI.getPath());
    return;
  }
  if (vApp.getTasks() != null) {
    for (    Task task : vApp.getTasks()) {
      assertTaskDoneEventually(task);
    }
  }
  if (vApp.getStatus().equals(Status.POWERED_ON.getValue())) {
    try {
      Task shutdownTask=vAppClient.shutdown(vAppURI);
      retryTaskSuccess.apply(shutdownTask);
    }
 catch (    Exception e) {
      logger.warn(e,"Continuing cleanup after error shutting down VApp %s",vApp.getName());
    }
  }
  if (vApp.isDeployed()) {
    try {
      UndeployVAppParams params=UndeployVAppParams.builder().build();
      Task undeployTask=vAppClient.undeploy(vAppURI,params);
      retryTaskSuccess.apply(undeployTask);
    }
 catch (    Exception e) {
      logger.warn(e,"Continuing cleanup after error undeploying VApp %s",vApp.getName());
    }
  }
  try {
    Task task=vAppClient.deleteVApp(vAppURI);
    assertTaskSucceeds(task);
    vAppNames.remove(vApp.getName());
    logger.info("Deleted VApp %s",vApp.getName());
  }
 catch (  Exception e) {
    try {
      vApp=vAppClient.getVApp(vAppURI);
    }
 catch (    Exception e2) {
    }
    logger.warn(e,"Deleting VApp %s failed (%s)",vApp.getName(),vAppURI.getPath());
  }
}
