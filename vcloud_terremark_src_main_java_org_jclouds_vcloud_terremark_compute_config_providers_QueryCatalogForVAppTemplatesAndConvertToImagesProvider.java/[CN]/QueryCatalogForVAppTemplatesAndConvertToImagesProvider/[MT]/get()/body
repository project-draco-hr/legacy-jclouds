{
  final Set<Image> images=Sets.newHashSet();
  logger.debug(">> providing vAppTemplates");
  final VDC vDC=client.getDefaultVDC();
  Catalog response=client.getDefaultCatalog();
  Map<String,ListenableFuture<Void>> responses=Maps.newHashMap();
  for (  final NamedResource resource : response.values()) {
    if (resource.getType().equals(VCloudMediaType.CATALOGITEM_XML)) {
      final CatalogItem item=client.getCatalogItem(resource.getId());
      if (item.getEntity().getType().equals(VCloudMediaType.VAPPTEMPLATE_XML)) {
        responses.put(item.getName(),ConcurrentUtils.makeListenable(executor.submit(new Callable<Void>(){
          @Override public Void call() throws Exception {
            OsFamily myOs=null;
            for (            OsFamily os : OsFamily.values()) {
              if (resource.getName().toLowerCase().replaceAll("\\s","").indexOf(os.toString()) != -1) {
                myOs=os;
              }
            }
            Architecture arch=resource.getName().indexOf("64") == -1 ? Architecture.X86_32 : Architecture.X86_64;
            VAppTemplate template=client.getVAppTemplate(item.getEntity().getId());
            Location location=findLocationForResourceInVDC.apply(resource,vDC.getId());
            images.add(new ImageImpl(resource.getId(),template.getName(),resource.getId(),location,template.getLocation(),ImmutableMap.<String,String>of(),template.getDescription(),"",myOs,template.getName(),arch,credentialsProvider.execute(template)));
            return null;
          }
        }
),executor));
      }
    }
  }
  ConcurrentUtils.awaitCompletion(responses,executor,null,logger,"vAppTemplates in " + vDC);
  return images;
}
