{
  if (from.getImageLocation().indexOf("test") != -1) {
    logger.trace("skipping test image(%s)",from.getId());
    return null;
  }
  if (from.getImageType() != ImageType.MACHINE) {
    logger.trace("skipping as not a machine image(%s)",from.getId());
    return null;
  }
  String name=null;
  String description=from.getDescription() != null ? from.getDescription() : from.getImageLocation();
  String version=null;
  OsFamily osFamily=parseOsFamilyOrNull(from.getImageLocation());
  String osName=null;
  String osArch=from.getVirtualizationType();
  String osVersion=parseVersionOrReturnEmptyString(osFamily,from.getImageLocation());
  String osDescription=from.getImageLocation();
  boolean is64Bit=from.getArchitecture() == Architecture.X86_64;
  try {
    Matcher matcher=getMatcherAndFind(from.getImageLocation());
    osFamily=OsFamily.fromValue(matcher.group(1));
    osVersion=parseVersionOrReturnEmptyString(osFamily,matcher.group(2));
    version=matcher.group(3).replace(".manifest.xml","");
  }
 catch (  IllegalArgumentException e) {
    logger.debug("<< didn't match os(%s)",from.getImageLocation());
  }
catch (  NoSuchElementException e) {
    logger.debug("<< didn't match at all(%s)",from.getImageLocation());
  }
  Credentials defaultCredentials=credentialProvider.execute(from);
  Location location=null;
  try {
    location=Iterables.find(locations.get(),new Predicate<Location>(){
      @Override public boolean apply(      Location input){
        return input.getId().equals(from.getRegion());
      }
    }
);
  }
 catch (  NoSuchElementException e) {
    System.err.printf("unknown region %s for image %s; not in %s",from.getRegion(),from.getId(),locations);
    location=new LocationImpl(LocationScope.REGION,from.getRegion(),from.getRegion(),defaultLocation.get().getParent());
  }
  OperatingSystem os=new OperatingSystem(osFamily,osName,osVersion,osArch,osDescription,is64Bit);
  return new ImageImpl(from.getId(),name,from.getRegion() + "/" + from.getId(),location,null,ImmutableMap.<String,String>of("owner",from.getImageOwnerId(),"rootDeviceType",from.getRootDeviceType().toString()),os,description,version,defaultCredentials);
}
