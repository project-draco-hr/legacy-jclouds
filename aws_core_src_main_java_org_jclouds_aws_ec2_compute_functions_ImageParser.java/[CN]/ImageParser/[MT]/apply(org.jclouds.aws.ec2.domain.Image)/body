{
  if (from.getImageType() != ImageType.MACHINE) {
    logger.trace("skipping as not a machine image(%s)",from.getId());
    return null;
  }
  ImageBuilder builder=new ImageBuilder();
  builder.providerId(from.getId());
  builder.id(from.getRegion() + "/" + from.getId());
  builder.description(from.getDescription() != null ? from.getDescription() : from.getImageLocation());
  builder.userMetadata(ImmutableMap.<String,String>of("owner",from.getImageOwnerId(),"rootDeviceType",from.getRootDeviceType().toString()));
  OsFamily osFamily=parseOsFamilyOrNull(provider,from.getImageLocation());
  String osName=null;
  String osArch=from.getVirtualizationType();
  String osVersion=parseVersionOrReturnEmptyString(osFamily,from.getImageLocation());
  String osDescription=from.getImageLocation();
  boolean is64Bit=from.getArchitecture() == Architecture.X86_64;
  try {
    Matcher matcher=getMatcherAndFind(from.getImageLocation());
    if (matcher.pattern() == AMZN_PATTERN) {
      osFamily=OsFamily.AMZN_LINUX;
      osVersion=matcher.group(1);
      builder.version(osVersion);
    }
 else     if (matcher.pattern() == NEBULA_PATTERN) {
      osVersion=parseVersionOrReturnEmptyString(osFamily,matcher.group(2));
    }
 else {
      osFamily=OsFamily.fromValue(matcher.group(1));
      osVersion=parseVersionOrReturnEmptyString(osFamily,matcher.group(2));
      builder.version(matcher.group(3).replace(".manifest.xml",""));
    }
  }
 catch (  IllegalArgumentException e) {
    logger.debug("<< didn't match os(%s)",from.getImageLocation());
  }
catch (  NoSuchElementException e) {
    logger.debug("<< didn't match at all(%s)",from.getImageLocation());
  }
  builder.defaultCredentials(credentialProvider.execute(from));
  try {
    builder.location(Iterables.find(locations.get(),new Predicate<Location>(){
      @Override public boolean apply(      Location input){
        return input.getId().equals(from.getRegion());
      }
    }
));
  }
 catch (  NoSuchElementException e) {
    System.err.printf("unknown region %s for image %s; not in %s",from.getRegion(),from.getId(),locations);
    builder.location(new LocationImpl(LocationScope.REGION,from.getRegion(),from.getRegion(),defaultLocation.get().getParent()));
  }
  builder.operatingSystem(new OperatingSystem(osFamily,osName,osVersion,osArch,osDescription,is64Bit));
  return builder.build();
}
