{
  if (from.getImageLocation().indexOf("test") != -1) {
    logger.trace("skipping test image(%s)",from.getId());
    return null;
  }
  if (from.getImageType() != ImageType.MACHINE) {
    logger.trace("skipping as not a machine image(%s)",from.getId());
    return null;
  }
  OsFamily os=null;
  String name="";
  String description=from.getDescription() != null ? from.getDescription() : from.getImageLocation();
  String osDescription=from.getImageLocation();
  String version="";
  try {
    Matcher matcher=getMatcherAndFind(from.getImageLocation());
    os=OsFamily.fromValue(matcher.group(1));
    name=matcher.group(2);
    if (NAME_VERSION_MAP.containsKey(name))     name=NAME_VERSION_MAP.get(name);
    version=matcher.group(3).replace(".manifest.xml","");
  }
 catch (  IllegalArgumentException e) {
    logger.debug("<< didn't match os(%s)",from.getImageLocation());
  }
catch (  NoSuchElementException e) {
    logger.debug("<< didn't match at all(%s)",from.getImageLocation());
  }
  Credentials defaultCredentials=credentialProvider.execute(from);
  Location location=null;
  try {
    location=Iterables.find(locations,new Predicate<Location>(){
      @Override public boolean apply(      Location input){
        return input.getId().equals(from.getRegion());
      }
    }
);
  }
 catch (  NoSuchElementException e) {
    System.err.printf("unknown region %s for image %s; not in %s",from.getRegion(),from.getId(),locations);
    location=new LocationImpl(LocationScope.REGION,from.getRegion(),from.getRegion(),defaultLocation.getParent());
  }
  return new ImageImpl(from.getId(),name,location,null,ImmutableMap.<String,String>of("owner",from.getImageOwnerId()),description,version,os,osDescription,from.getArchitecture() == org.jclouds.aws.ec2.domain.Image.Architecture.I386 ? Architecture.X86_32 : Architecture.X86_64,defaultCredentials);
}
