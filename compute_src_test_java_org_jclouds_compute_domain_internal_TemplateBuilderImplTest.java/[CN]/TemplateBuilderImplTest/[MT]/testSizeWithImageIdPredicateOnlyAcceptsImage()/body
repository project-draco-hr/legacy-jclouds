{
  Location defaultLocation=createMock(Location.class);
  Image image=createMock(Image.class);
  OperatingSystem os=createMock(OperatingSystem.class);
  Hardware hardware=new HardwareBuilder().id("hardwareId").supportsImage(ImagePredicates.idEquals("imageId")).build();
  Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(defaultLocation));
  Supplier<Set<? extends Image>> images=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of(image));
  Supplier<Set<? extends Hardware>> hardwares=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(hardware));
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  TemplateBuilder defaultTemplate=createMock(TemplateBuilder.class);
  expect(optionsProvider.get()).andReturn(new TemplateOptions());
  expect(image.getId()).andReturn("imageId").atLeastOnce();
  expect(image.getLocation()).andReturn(defaultLocation).atLeastOnce();
  expect(image.getName()).andReturn(null).atLeastOnce();
  expect(image.getDescription()).andReturn(null).atLeastOnce();
  expect(image.getVersion()).andReturn(null).atLeastOnce();
  expect(image.getOperatingSystem()).andReturn(os).atLeastOnce();
  expect(os.getName()).andReturn(null).atLeastOnce();
  expect(os.getVersion()).andReturn(null).atLeastOnce();
  expect(os.getFamily()).andReturn(null).atLeastOnce();
  expect(os.getDescription()).andReturn(null).atLeastOnce();
  expect(os.getArch()).andReturn(null).atLeastOnce();
  expect(os.is64Bit()).andReturn(false).atLeastOnce();
  replay(image);
  replay(os);
  replay(defaultTemplate);
  replay(defaultLocation);
  replay(optionsProvider);
  replay(templateBuilderProvider);
  TemplateBuilderImpl template=createTemplateBuilder(null,locations,images,hardwares,defaultLocation,optionsProvider,templateBuilderProvider);
  template.imageId("imageId").build();
  verify(image);
  verify(os);
  verify(defaultTemplate);
  verify(defaultLocation);
  verify(optionsProvider);
  verify(templateBuilderProvider);
}
