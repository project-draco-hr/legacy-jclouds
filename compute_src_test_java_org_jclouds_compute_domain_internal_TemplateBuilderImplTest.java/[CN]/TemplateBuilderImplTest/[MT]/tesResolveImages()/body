{
  Location defaultLocation=createMock(Location.class);
  Image image=createMock(Image.class);
  OperatingSystem os=createMock(OperatingSystem.class);
  Image image2=createMock(Image.class);
  OperatingSystem os2=createMock(OperatingSystem.class);
  Hardware size=new HardwareImpl("hardwareId",null,"hardwareId",defaultLocation,null,ImmutableMap.<String,String>of(),ImmutableList.of(new Processor(1.0,1.0)),0,ImmutableList.<Volume>of(),ImagePredicates.any());
  Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(defaultLocation));
  Supplier<Set<? extends Image>> images=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of(image,image2));
  Supplier<Set<? extends Hardware>> sizes=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(size));
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  TemplateBuilder defaultTemplate=createMock(TemplateBuilder.class);
  expect(image.getName()).andReturn("imageName");
  expect(image2.getName()).andReturn("imageName");
  expect(image.getVersion()).andReturn("imageVersion");
  expect(image2.getVersion()).andReturn("imageVersion");
  expect(image.getOperatingSystem()).andReturn(os).atLeastOnce();
  expect(image2.getOperatingSystem()).andReturn(os2).atLeastOnce();
  expect(os.getName()).andReturn("osName");
  expect(os2.getName()).andReturn("osName");
  expect(os.getVersion()).andReturn("osVersion");
  expect(os2.getVersion()).andReturn("osVersion");
  expect(os.getDescription()).andReturn("osDescription");
  expect(os2.getDescription()).andReturn("osDescription");
  expect(os.getArch()).andReturn("X86_64").atLeastOnce();
  expect(os2.getArch()).andReturn("X86_64").atLeastOnce();
  replay(image);
  replay(image2);
  replay(os);
  replay(os2);
  replay(defaultTemplate);
  replay(defaultLocation);
  replay(optionsProvider);
  replay(templateBuilderProvider);
  TemplateBuilderImpl template=createTemplateBuilder(null,locations,images,sizes,defaultLocation,optionsProvider,templateBuilderProvider);
  assertEquals(template.resolveImage(size,images.get()),image2);
  verify(image);
  verify(image2);
  verify(os);
  verify(os2);
  verify(defaultTemplate);
  verify(defaultLocation);
  verify(optionsProvider);
  verify(templateBuilderProvider);
}
