{
  final Location defaultLocation=createMock(Location.class);
  final Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(defaultLocation));
  final Supplier<Set<? extends Image>> images=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of(new ImageBuilder().ids("Ubuntu 11.04 x64").name("Ubuntu 11.04 x64").description("Ubuntu 11.04 x64").location(defaultLocation).operatingSystem(OperatingSystem.builder().name("Ubuntu 11.04 x64").description("Ubuntu 11.04 x64").is64Bit(true).version("11.04").family(OsFamily.UBUNTU).build()).build(),new ImageBuilder().ids("Ubuntu 11.04 64-bit").name("Ubuntu 11.04 64-bit").description("Ubuntu 11.04 64-bit").location(defaultLocation).operatingSystem(OperatingSystem.builder().name("Ubuntu 11.04 64-bit").description("Ubuntu 11.04 64-bit").is64Bit(true).version("11.04").family(OsFamily.UBUNTU).build()).build()));
  final Supplier<Set<? extends Hardware>> hardwares=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(new HardwareBuilder().ids(String.format("datacenter(%s)platform(%s)cpuCores(%d)memorySizeMB(%d)diskSizeGB(%d)","Falkenberg","Xen",1,512,5)).ram(512).processors(ImmutableList.of(new Processor(1,1.0))).volumes(ImmutableList.<Volume>of(new VolumeImpl((float)5,true,true))).hypervisor("Xen").location(defaultLocation).supportsImage(ImagePredicates.idIn(ImmutableSet.of("Ubuntu 11.04 x64"))).build(),new HardwareBuilder().ids(String.format("datacenter(%s)platform(%s)cpuCores(%d)memorySizeMB(%d)diskSizeGB(%d)","Falkenberg","OpenVZ",1,512,5)).ram(512).processors(ImmutableList.of(new Processor(1,1.0))).volumes(ImmutableList.<Volume>of(new VolumeImpl((float)5,true,true))).hypervisor("OpenVZ").location(defaultLocation).supportsImage(ImagePredicates.idIn(ImmutableSet.of("Ubuntu 11.04 64-bit"))).build()));
  final Provider<TemplateOptions> optionsProvider=new Provider<TemplateOptions>(){
    @Override public TemplateOptions get(){
      return new TemplateOptions();
    }
  }
;
  Provider<TemplateBuilder> templateBuilderProvider=new Provider<TemplateBuilder>(){
    @Override public TemplateBuilder get(){
      return createTemplateBuilder(null,locations,images,hardwares,defaultLocation,optionsProvider,this);
    }
  }
;
  expect(defaultLocation.getId()).andReturn("region").anyTimes();
  replay(defaultLocation);
  TemplateBuilder templateBuilder=templateBuilderProvider.get().minRam(512).osFamily(OsFamily.UBUNTU).hypervisorMatches("OpenVZ").osVersionMatches("1[10].[10][04]").os64Bit(true);
  Template template=templateBuilder.build();
  assertEquals(template.getHardware().getHypervisor(),"OpenVZ");
  assertEquals(template.getImage().getId(),"Ubuntu 11.04 64-bit");
  verify(defaultLocation);
}
