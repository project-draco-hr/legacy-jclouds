{
  checkArgument(tag.indexOf('-') == -1,"tag cannot contain hyphens");
  checkNotNull(template.getLocation(),"location");
  final Set<NodeMetadata> nodes=Sets.newHashSet();
  int nodesToStart=count;
  int i=0;
  while (nodesToStart > 0) {
    int currentCount=i;
    Map<String,ListenableFuture<Void>> responses=Maps.newHashMap();
    for (; i < currentCount + nodesToStart; i++) {
      final String name=String.format(nodeNamingConvention,tag,i + 1);
      responses.put(name,makeListenable(executor.submit(new Callable<Void>(){
        @Override public Void call() throws Exception {
          NodeMetadata node=null;
          try {
            node=startServerAndConvertToNode(tag,name,template);
            logger.debug("<< running server(%s)",node.getId());
            utils.runOptionsOnNode(node,template.getOptions());
            logger.debug("<< options applied server(%s)",node.getId());
            nodes.add(node);
          }
 catch (          Exception e) {
            if (node != null) {
              destroyNode(node);
              logger.error(e,"<< error applying server(%s) [%s] destroying ",name,e.getMessage());
            }
          }
          return null;
        }
      }
),executor));
    }
    nodesToStart=awaitCompletion(responses,executor,null,logger,"nodes").size();
  }
  return new NodeSetImpl(nodes);
}
