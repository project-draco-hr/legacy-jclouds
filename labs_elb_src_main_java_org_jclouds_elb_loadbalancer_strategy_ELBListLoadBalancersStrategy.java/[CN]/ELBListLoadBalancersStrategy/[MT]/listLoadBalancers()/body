{
  Iterable<LoadBalancerInRegion> loadBalancers=concat(transformParallel(regions.get(),new Function<String,Future<? extends Iterable<LoadBalancerInRegion>>>(){
    @Override public ListenableFuture<? extends Iterable<LoadBalancerInRegion>> apply(    final String from){
      return Futures.compose(aapi.getLoadBalancerApiForRegion(from).list(),new Function<PagedIterable<LoadBalancer>,Iterable<LoadBalancerInRegion>>(){
        @Override public Iterable<LoadBalancerInRegion> apply(        PagedIterable<LoadBalancer> input){
          return input.concat().transform(new Function<LoadBalancer,LoadBalancerInRegion>(){
            @Override public LoadBalancerInRegion apply(            LoadBalancer lb){
              return new LoadBalancerInRegion(lb,from);
            }
          }
);
        }
      }
,executor);
    }
  }
,executor,null,logger,"loadbalancers"));
  return transform(loadBalancers,converter);
}
