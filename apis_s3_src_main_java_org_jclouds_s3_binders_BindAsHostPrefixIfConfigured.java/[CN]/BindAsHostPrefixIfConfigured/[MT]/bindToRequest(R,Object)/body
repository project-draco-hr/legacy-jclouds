{
  String payloadAsString=payload.toString();
  if (isVhostStyle && payloadAsString.equals(payloadAsString.toLowerCase())) {
    request=bindAsHostPrefix.bindToRequest(request,payload);
    String host=request.getEndpoint().getHost();
    if (request.getEndpoint().getPort() != -1) {
      host+=":" + request.getEndpoint().getPort();
    }
    return ModifyRequest.replaceHeader(request,HttpHeaders.HOST,host);
  }
 else {
    UriBuilder builder=uriBuilderProvider.get().uri(request.getEndpoint());
    StringBuilder path=new StringBuilder(Strings2.urlEncode(request.getEndpoint().getPath(),S3AsyncClient.class.getAnnotation(SkipEncoding.class).value()));
    int indexToInsert=0;
    if (!servicePath.equals("/")) {
      indexToInsert=path.indexOf(servicePath);
      indexToInsert=indexToInsert == -1 ? 0 : indexToInsert;
      indexToInsert+=servicePath.length();
    }
    path.insert(indexToInsert,"/" + payloadAsString);
    builder.replacePath(path.toString());
    return (R)request.toBuilder().endpoint(builder.buildFromEncodedMap(ImmutableMap.<String,Object>of())).build();
  }
}
