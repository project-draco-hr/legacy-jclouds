{
  VCloudExpressVApp vApp=client.getVApp(vAppId);
  PublicIpAddress ip=null;
  String privateAddress=getLast(vApp.getNetworkToAddresses().values());
  for (  int port : ports) {
    InternetService is=null;
    Protocol protocol;
switch (port) {
case 22:
      protocol=Protocol.TCP;
    break;
case 80:
case 8080:
  protocol=Protocol.HTTP;
break;
case 443:
protocol=Protocol.HTTPS;
break;
default :
protocol=Protocol.HTTP;
break;
}
if (ip == null) {
if (client instanceof TerremarkVCloudExpressClient) {
is=TerremarkVCloudExpressClient.class.cast(client).addInternetServiceToVDC(vApp.getVDC().getHref(),vApp.getName() + "-" + port,protocol,port,withDescription(String.format("port %d access to serverId: %s name: %s",port,vApp.getName(),vApp.getName())));
ip=is.getPublicIpAddress();
}
 else {
logger.debug(">> creating InternetService in vDC %s:%s:%d",vApp.getVDC().getName(),protocol,port);
try {
ip=TerremarkECloudClient.class.cast(client).activatePublicIpInVDC(vApp.getVDC().getHref());
}
 catch (HttpResponseException e) {
if (e.getResponse().getStatusCode() == 500) {
logger.warn(">> no more ip addresses available, looking for one to re-use");
for (PublicIpAddress existingIp : client.getPublicIpsAssociatedWithVDC(vApp.getVDC().getHref())) {
Set<InternetService> services=client.getInternetServicesOnPublicIp(existingIp.getId());
if (services.size() == 0) {
ip=existingIp;
break;
}
}
if (ip == null) throw e;
}
 else {
throw e;
}
}
is=client.addInternetServiceToExistingIp(ip.getId(),vApp.getName() + "-" + port,protocol,port,withDescription(String.format("port %d access to serverId: %s name: %s",port,vApp.getName(),vApp.getName())));
}
}
 else {
logger.debug(">> adding InternetService %s:%s:%d",ip.getAddress(),protocol,port);
is=client.addInternetServiceToExistingIp(ip.getId(),vApp.getName() + "-" + port,protocol,port,withDescription(String.format("port %d access to serverId: %s name: %s",port,vApp.getName(),vApp.getName())));
}
logger.debug("<< created InternetService(%s) %s:%s:%d",is.getName(),is.getPublicIpAddress().getAddress(),is.getProtocol(),is.getPort());
logger.debug(">> adding Node %s:%d -> %s:%d",is.getPublicIpAddress().getAddress(),is.getPort(),privateAddress,port);
Node node=client.addNode(is.getId(),privateAddress,vApp.getName() + "-" + port,port);
logger.debug("<< added Node(%s)",node.getName());
}
return ip != null ? ip.getAddress() : null;
}
