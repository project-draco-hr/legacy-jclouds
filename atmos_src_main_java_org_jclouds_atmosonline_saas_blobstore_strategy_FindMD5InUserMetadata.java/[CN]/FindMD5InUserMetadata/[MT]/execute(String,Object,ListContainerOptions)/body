{
  final byte[] toSearch=objectMD5.apply(value);
  final BlockingQueue<Boolean> queue=new SynchronousQueue<Boolean>();
  Map<String,ListenableFuture<?>> responses=Maps.newHashMap();
  for (  BlobMetadata md : getAllBlobMetadata.execute(containerName,options)) {
    final ListenableFuture<AtmosObject> future=client.headFile(containerName + "/" + md.getName());
    future.addListener(new Runnable(){
      public void run(){
        try {
          AtmosObject object=future.get();
          checkNotNull(object.getSystemMetadata(),object + " has no content metadata");
          if (object.getSystemMetadata().getContentMD5() != null) {
            if (Arrays.equals(toSearch,object.getSystemMetadata().getContentMD5())) {
              queue.put(true);
            }
          }
 else {
            logger.debug("object %s has no content md5",object.getSystemMetadata().getObjectID());
          }
        }
 catch (        InterruptedException e) {
          Throwables.propagate(e);
        }
catch (        ExecutionException e) {
          Throwables.propagate(e);
        }
      }
    }
,userExecutor);
    responses.put(md.getName(),future);
  }
  Map<String,Exception> exceptions=awaitCompletion(responses,userExecutor,maxTime,logger,String.format("searching for md5 in container %s",containerName));
  if (exceptions.size() > 0)   throw new BlobRuntimeException(String.format("searching for md5 in container %s: %s",containerName,exceptions));
  try {
    return queue.poll(1,TimeUnit.MICROSECONDS) != null;
  }
 catch (  InterruptedException e) {
    Throwables.propagate(e);
    return false;
  }
catch (  Exception e) {
    Throwables.propagateIfPossible(e,BlobRuntimeException.class);
    throw new BlobRuntimeException(String.format("Error searching for ETAG of value: [%s] in container:%s",value,containerName),e);
  }
}
