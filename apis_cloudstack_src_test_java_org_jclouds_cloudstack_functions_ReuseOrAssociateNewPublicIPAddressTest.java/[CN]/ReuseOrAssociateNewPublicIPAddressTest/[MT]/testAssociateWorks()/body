{
  CloudStackClient client=createMock(CloudStackClient.class);
  BlockUntilJobCompletesAndReturnResult blockUntilJobCompletesAndReturnResult=createMock(BlockUntilJobCompletesAndReturnResult.class);
  AddressClient addressClient=createMock(AddressClient.class);
  expect(client.getAddressClient()).andReturn(addressClient).atLeastOnce();
  expect(addressClient.listPublicIPAddresses(allocatedOnly(true).networkId(networkId))).andReturn(ImmutableSet.<PublicIPAddress>of());
  AsyncCreateResponse job=new AsyncCreateResponse("1","2");
  expect(addressClient.associateIPAddressInZone(zoneId,networkId(networkId))).andReturn(job);
  expect(blockUntilJobCompletesAndReturnResult.apply(job)).andReturn(address);
  replay(client);
  replay(addressClient);
  replay(blockUntilJobCompletesAndReturnResult);
  assertEquals(new ReuseOrAssociateNewPublicIPAddress(client,blockUntilJobCompletesAndReturnResult).apply(Network.builder().id(networkId).zoneId(zoneId).build()),address);
  verify(client);
  verify(addressClient);
  verify(blockUntilJobCompletesAndReturnResult);
}
