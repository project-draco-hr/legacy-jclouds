{
  checkArgument(checkNotNull(request,"request") instanceof GeneratedHttpRequest<?>,"this binder is only valid for GeneratedHttpRequests!");
  GeneratedHttpRequest<?> gRequest=(GeneratedHttpRequest<?>)request;
  checkState(gRequest.getArgs() != null,"args should be initialized at this point");
  String name=checkNotNull(postParams.remove("name"),"name");
  final URI template=URI.create(checkNotNull(postParams.remove("template"),"template"));
  boolean deploy=true;
  boolean powerOn=true;
  Set<NetworkConfig> networkConfig=null;
  NetworkConfigDecorator networknetworkConfigDecorator=new NetworkConfigDecorator(template,defaultNetwork.getHref(),defaultFenceMode,defaultNetworkNameInTemplate);
  InstantiateVAppTemplateOptions options=findOptionsInArgsOrNull(gRequest);
  if (options != null) {
    if (options.getNetworkConfig().size() > 0)     networkConfig=Sets.newLinkedHashSet(Iterables.transform(options.getNetworkConfig(),networknetworkConfigDecorator));
    deploy=ifNullDefaultTo(options.shouldDeploy(),deploy);
    powerOn=ifNullDefaultTo(options.shouldPowerOn(),powerOn);
  }
  if (networkConfig == null)   networkConfig=ImmutableSet.of(networknetworkConfigDecorator.apply(null));
  try {
    return stringBinder.bindToRequest(request,generateXml(name,options.getDescription(),deploy,powerOn,template,networkConfig));
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException(e);
  }
catch (  FactoryConfigurationError e) {
    throw new RuntimeException(e);
  }
catch (  TransformerException e) {
    throw new RuntimeException(e);
  }
}
