{
  if (in.peek() == JsonToken.NULL) {
    in.nextNull();
    return null;
  }
  Class<?>[] paramTypes=parameterizedCtor.getParameterTypes();
  Object[] ctorParams=new Object[paramTypes.length];
  boolean empty=true;
  for (int i=0; i < paramTypes.length; i++) {
    if (paramTypes[i] == boolean.class) {
      ctorParams[i]=Boolean.FALSE;
    }
 else     if (paramTypes[i].isPrimitive()) {
      ctorParams[i]=0;
    }
  }
  try {
    in.beginObject();
    while (in.hasNext()) {
      empty=false;
      String name=in.nextName();
      ParameterReader<?> parameter=parameterReaders.get(name);
      if (parameter == null) {
        in.skipValue();
      }
 else {
        Object value=parameter.read(in);
        if (value != null)         ctorParams[parameter.index]=value;
      }
    }
  }
 catch (  IllegalStateException e) {
    throw new JsonSyntaxException(e);
  }
  for (int i=0; i < paramTypes.length; i++) {
    if (paramTypes[i].isPrimitive()) {
      checkArgument(ctorParams[i] != null,"Primitive param[" + i + "] in constructor "+ parameterizedCtor+ " cannot be absent!");
    }
  }
  in.endObject();
  try {
    return newInstance(ctorParams);
  }
 catch (  NullPointerException ex) {
    if (empty && paramTypes.length > 0) {
      return null;
    }
    throw ex;
  }
}
