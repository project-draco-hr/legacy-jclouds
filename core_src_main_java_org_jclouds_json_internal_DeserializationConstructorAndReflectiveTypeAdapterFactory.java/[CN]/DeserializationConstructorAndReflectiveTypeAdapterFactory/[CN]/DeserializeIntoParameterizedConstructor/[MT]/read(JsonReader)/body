{
  if (in.peek() == JsonToken.NULL) {
    in.nextNull();
    return null;
  }
  List<Parameter> params=parameterizedCtor.getParameters();
  Object[] values=new Object[params.size()];
  boolean empty=true;
  for (  Parameter param : params) {
    if (param.getType().getRawType() == boolean.class) {
      values[param.hashCode()]=Boolean.FALSE;
    }
 else     if (param.getType().getRawType().isPrimitive()) {
      values[param.hashCode()]=0;
    }
  }
  try {
    in.beginObject();
    while (in.hasNext()) {
      empty=false;
      String name=in.nextName();
      ParameterReader<?> parameter=parameterReaders.get(name);
      if (parameter == null) {
        in.skipValue();
      }
 else {
        Object value=parameter.read(in);
        if (value != null)         values[parameter.position]=value;
      }
    }
  }
 catch (  IllegalStateException e) {
    throw new JsonSyntaxException(e);
  }
  for (  Parameter param : params) {
    if (param.getType().getRawType().isPrimitive()) {
      checkArgument(values[param.hashCode()] != null,"Primitive param[" + param.hashCode() + "] in constructor "+ parameterizedCtor+ " cannot be absent!");
    }
  }
  in.endObject();
  try {
    return newInstance(values);
  }
 catch (  NullPointerException ex) {
    if (empty && values.length > 0) {
      return null;
    }
    throw ex;
  }
}
