{
  Iterable<ProductItem> ramItems=Iterables.filter(cloudServerProductPackage.getItems(),Predicates.and(categoryCode("ram"),capacity(2.0f)));
  Map<Float,ProductItem> ramToProductItem=Maps.uniqueIndex(ramItems,ProductItems.capacity());
  ProductItemPrice ramPrice=ProductItems.price().apply(ramToProductItem.get(2.0f));
  Iterable<ProductItem> cpuItems=Iterables.filter(cloudServerProductPackage.getItems(),Predicates.and(units("PRIVATE_CORE"),capacity(2.0f)));
  Map<Float,ProductItem> coresToProductItem=Maps.uniqueIndex(cpuItems,ProductItems.capacity());
  ProductItemPrice cpuPrice=ProductItems.price().apply(coresToProductItem.get(2.0f));
  Iterable<ProductItem> operatingSystems=Iterables.filter(cloudServerProductPackage.getItems(),categoryCode("os"));
  Map<String,ProductItem> osToProductItem=Maps.uniqueIndex(operatingSystems,ProductItems.description());
  ProductItemPrice osPrice=ProductItems.price().apply(osToProductItem.get("Ubuntu Linux 8 LTS Hardy Heron - Minimal Install (64 bit)"));
  Set<ProductItemPrice> prices=Sets.<ProductItemPrice>newLinkedHashSet();
  prices.addAll(SoftLayerConstants.DEFAULT_VIRTUAL_GUEST_PRICES);
  prices.add(ramPrice);
  prices.add(cpuPrice);
  prices.add(osPrice);
  VirtualGuest guest=VirtualGuest.builder().domain("jclouds.org").hostname("livetest").build();
  String location="" + Iterables.get(cloudServerProductPackage.getDatacenters(),0).getId();
  ProductOrder order=ProductOrder.builder().packageId(cloudServerPackageId).location(location).quantity(1).useHourlyPricing(true).prices(prices).virtualGuest(guest).build();
}
