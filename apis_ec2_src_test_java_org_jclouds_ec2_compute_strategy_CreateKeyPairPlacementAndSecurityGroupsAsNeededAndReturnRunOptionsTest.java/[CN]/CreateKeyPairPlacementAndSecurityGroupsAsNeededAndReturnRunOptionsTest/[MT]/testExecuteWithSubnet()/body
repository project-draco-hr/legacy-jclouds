{
  String region=Region.AP_SOUTHEAST_1;
  String tag="tag";
  Hardware size=EC2HardwareBuilder.m1_small().build();
  String systemGeneratedKeyPairName="systemGeneratedKeyPair";
  CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions strategy=createMock(CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class,new Method[]{CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class.getDeclaredMethod("createNewKeyPairUnlessUserSpecifiedOtherwise",String.class,String.class,TemplateOptions.class),CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class.getDeclaredMethod("createNewPlacementGroupUnlessUserSpecifiedOtherwise",String.class,String.class,TemplateOptions.class),CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptions.class.getDeclaredMethod("getSecurityGroupsForTagAndOptions",String.class,String.class,TemplateOptions.class)});
  EC2TemplateOptions options=createMock(EC2TemplateOptions.class);
  Template template=createMock(Template.class);
  expect(template.getHardware()).andReturn(size).atLeastOnce();
  expect(template.getOptions()).andReturn(options).atLeastOnce();
  expect(options.getBlockDeviceMappings()).andReturn(ImmutableSet.<BlockDeviceMapping>of()).atLeastOnce();
  expect(strategy.createNewKeyPairUnlessUserSpecifiedOtherwise(region,tag,options)).andReturn(systemGeneratedKeyPairName);
  expect(options.getSubnetId()).andReturn("1");
  expect(options.getUserData()).andReturn(null);
  replay(options);
  replay(template);
  replay(strategy);
  RunInstancesOptions runOptions=strategy.execute(region,tag,template);
  assertEquals(runOptions.buildQueryParameters(),ImmutableMultimap.<String,String>of());
  assertEquals(runOptions.buildFormParameters().entries(),ImmutableMultimap.<String,String>of("InstanceType",size.getProviderId(),"SubnetId","1","KeyName",systemGeneratedKeyPairName).entries());
  assertEquals(runOptions.buildMatrixParameters(),ImmutableMultimap.<String,String>of());
  assertEquals(runOptions.buildRequestHeaders(),ImmutableMultimap.<String,String>of());
  assertEquals(runOptions.buildStringPayload(),null);
  verify(options);
  verify(template);
  verify(strategy);
}
