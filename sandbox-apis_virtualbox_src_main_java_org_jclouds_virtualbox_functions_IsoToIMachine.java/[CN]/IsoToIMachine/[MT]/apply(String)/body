{
  String port=System.getProperty(VirtualBoxConstants.VIRTUALBOX_JETTY_PORT,"8080");
  String basebaseResource=".";
  Server server=new StartJettyIfNotAlreadyRunning(port).apply(basebaseResource);
  IMachine vm=manager.getVBox().createMachine(settingsFile,vmName,osTypeId,vmId,forceOverwrite);
  manager.getVBox().registerMachine(vm);
  String defaultWorkingDir=System.getProperty("user.home") + "/jclouds-virtualbox-test";
  String workingDir=System.getProperty(VIRTUALBOX_WORKINGDIR,defaultWorkingDir);
  lockMachineAndApply(manager,Write,vmName,new Function<IMachine,Void>(){
    @Override public Void apply(    IMachine machine){
      machine.setMemorySize(1024l);
      machine.saveSettings();
      return null;
    }
  }
);
  ensureMachineHasIDEControllerNamed(vmName,controllerIDE);
  ensureMachineHasAttachedDistroMedium(isoName,workingDir,controllerIDE);
  String adminDiskPath=workingDir + "/" + adminDisk;
  if (new File(adminDiskPath).exists()) {
    new File(adminDiskPath).delete();
  }
  final IMedium hd=manager.getVBox().createHardDisk(diskFormat,adminDiskPath);
  long size=4L * 1024L * 1024L* 1024L - 4L;
  IProgress storageCreation=hd.createBaseStorage(size,(long)MediumVariant.STANDARD.ordinal());
  storageCreation.waitForCompletion(-1);
  lockMachineAndApply(manager,Write,vmName,new Function<IMachine,Void>(){
    @Override public Void apply(    IMachine machine){
      machine.attachDevice(controllerIDE,0,1,DeviceType.HardDisk,hd);
      machine.saveSettings();
      return null;
    }
  }
);
  lockMachineAndApply(manager,Write,vmName,new Function<IMachine,Void>(){
    @Override public Void apply(    IMachine machine){
      machine.getNetworkAdapter(0l).setAttachmentType(NAT);
      machine.getNetworkAdapter(0l).getNatDriver().addRedirect("guestssh",TCP,"127.0.0.1",2222,"",22);
      machine.getNetworkAdapter(0l).setEnabled(true);
      return null;
    }
  }
);
  String guestAdditionsDvd=workingDir + "/VBoxGuestAdditions_4.1.2.iso";
  final IMedium guestAdditionsDvdMedium=manager.getVBox().openMedium(guestAdditionsDvd,DeviceType.DVD,AccessMode.ReadOnly,forceOverwrite);
  lockMachineAndApply(manager,Write,vmName,new Function<IMachine,Void>(){
    @Override public Void apply(    IMachine machine){
      machine.attachDevice(controllerIDE,1,1,DeviceType.DVD,guestAdditionsDvdMedium);
      return null;
    }
  }
);
  IProgress prog=vm.launchVMProcess(manager.getSessionObject(),"gui","");
  prog.waitForCompletion(-1);
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
    propagate(e);
  }
  String installKeySequence=System.getProperty(VIRTUALBOX_INSTALLATION_KEY_SEQUENCE,defaultInstallSequence());
  sendKeyboardSequence(installKeySequence);
  boolean sshDeamonIsRunning=false;
  while (!sshDeamonIsRunning) {
    try {
      if (runScriptOnNode(guestId,"id",wrapInInitScript(false)).getExitCode() == 0) {
        logger.debug("Got response from ssh daemon.");
        sshDeamonIsRunning=true;
      }
    }
 catch (    SshException e) {
      logger.debug("No response from ssh daemon...");
    }
  }
  logger.debug("Installation of image complete. Powering down...");
  lockSessionOnMachineAndApply(manager,Shared,vmName,new Function<ISession,Void>(){
    @Override public Void apply(    ISession arg0){
      IProgress powerDownProgress=arg0.getConsole().powerDown();
      powerDownProgress.waitForCompletion(-1);
      return null;
    }
  }
);
  try {
    logger.debug("Stopping Jetty server...");
    server.stop();
    logger.debug("Jetty server stopped.");
  }
 catch (  Exception e) {
    logger.error(e,"Could not stop Jetty server.");
  }
  return vm;
}
