{
  System.out.println("here we go");
  String key=blob.getMetadata().getName();
  Payload payload=blob.getPayload();
  MultipartUploadSlicingAlgorithm algorithm=new MultipartUploadSlicingAlgorithm();
  algorithm.calculateChunkSize(checkNotNull(payload.getContentMetadata().getContentLength(),"contentLength required on all uploads to swift; please invoke payload.getContentMetadata().setContentLength(length) first"));
  int parts=algorithm.getParts();
  long chunkSize=algorithm.getChunkSize();
  if (parts > 0) {
    CommonSwiftClient client=(CommonSwiftClient)ablobstore.getContext().getProviderSpecificContext().getApi();
    try {
      SortedMap<Integer,String> etags=Maps.newTreeMap();
      int part;
      while ((part=algorithm.getNextPart()) <= parts) {
        System.out.println("Uploading part " + part);
        Payload chunkedPart=slicer.slice(payload,algorithm.getNextChunkOffset(),chunkSize);
        Blob blobPart=ablobstore.blobBuilder(blob.getMetadata().getName() + PART_SEPARATOR + String.valueOf(part)).payload(chunkedPart).contentDisposition(blob.getMetadata().getName() + PART_SEPARATOR + String.valueOf(part)).build();
        client.putObject(container,blob2Object.apply(blobPart));
      }
      long remaining=algorithm.getRemaining();
      if (remaining > 0) {
        System.out.println("Uploading tail.");
        Payload chunkedPart=slicer.slice(payload,algorithm.getNextChunkOffset(),remaining);
        Blob blobPart=ablobstore.blobBuilder(blob.getMetadata().getName() + PART_SEPARATOR + String.valueOf(part)).payload(chunkedPart).contentDisposition(blob.getMetadata().getName() + PART_SEPARATOR + String.valueOf(part)).build();
        client.putObject(container,blob2Object.apply(blobPart));
      }
      return client.putObjectManifest(container,key);
    }
 catch (    Exception ex) {
      RuntimeException rtex=Throwables2.getFirstThrowableOfType(ex,RuntimeException.class);
      if (rtex == null) {
        rtex=new RuntimeException(ex);
      }
      throw rtex;
    }
  }
  return "NOT IMPLEMENTED";
}
