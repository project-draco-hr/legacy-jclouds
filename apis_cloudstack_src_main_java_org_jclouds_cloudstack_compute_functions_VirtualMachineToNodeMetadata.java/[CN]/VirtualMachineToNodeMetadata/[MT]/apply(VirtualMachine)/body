{
  NodeMetadataBuilder builder=new NodeMetadataBuilder();
  builder.ids(from.getId() + "");
  builder.name(from.getName());
  builder.hostname(from.getHostname());
  builder.location(findLocationForVirtualMachine.apply(from));
  builder.group(parseGroupFromName(from.getDisplayName()));
  Image image=findImageForVirtualMachine.apply(from);
  if (image != null) {
    builder.imageId(image.getId());
    builder.operatingSystem(image.getOperatingSystem());
  }
  Hardware hardware=findHardwareForVirtualMachine.apply(from);
  if (hardware != null)   builder.hardware(hardware);
  builder.state(vmStateToNodeState.get(from.getState()));
  if (from.getIPAddress() != null) {
    boolean isPrivate=InetAddresses2.isPrivateIPAddress(from.getIPAddress());
    Set<String> addresses=ImmutableSet.<String>of(from.getIPAddress());
    if (isPrivate)     builder.privateAddresses(addresses);
 else     builder.publicAddresses(addresses);
  }
  try {
    IPForwardingRule rule=getIPForwardingRuleByVirtualMachine.getUnchecked(from.getId());
    builder.publicAddresses(ImmutableSet.<String>of(rule.getIPAddress()));
  }
 catch (  UncheckedExecutionException e) {
    if (Throwables2.getFirstThrowableOfType(e,ResourceNotFoundException.class) == null) {
      Throwables.propagateIfPossible(e.getCause());
      throw e;
    }
  }
  return builder.build();
}
