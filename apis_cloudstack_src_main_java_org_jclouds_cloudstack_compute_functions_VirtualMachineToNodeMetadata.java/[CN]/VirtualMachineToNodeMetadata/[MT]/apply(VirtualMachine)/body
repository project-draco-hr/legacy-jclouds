{
  NodeMetadataBuilder builder=new NodeMetadataBuilder();
  builder.ids(from.getId() + "");
  builder.name(from.getName());
  builder.hostname(from.getDisplayName());
  builder.location(findLocationForVirtualMachine.apply(from));
  builder.group(nodeNamingConvention.groupInUniqueNameOrNull(from.getDisplayName()));
  Image image=findImageForVirtualMachine.apply(from);
  if (image != null) {
    builder.imageId(image.getId());
    builder.operatingSystem(image.getOperatingSystem());
  }
  builder.hardware(new HardwareBuilder().ids(from.getServiceOfferingId() + "").name(from.getServiceOfferingName() + "").processors(ImmutableList.of(new Processor(from.getCpuCount(),from.getCpuSpeed()))).ram((int)from.getMemory()).hypervisor(from.getHypervisor()).build());
  builder.status(vmStateToNodeStatus.get(from.getState()));
  Set<String> publicAddresses=newHashSet(), privateAddresses=newHashSet();
  if (from.getIPAddress() != null) {
    boolean isPrivate=isPrivateIPAddress(from.getIPAddress());
    if (isPrivate) {
      privateAddresses.add(from.getIPAddress());
    }
 else {
      publicAddresses.add(from.getIPAddress());
    }
  }
  if (from.getPublicIP() != null) {
    publicAddresses.add(from.getPublicIP());
  }
  for (  NIC nic : from.getNICs()) {
    if (nic.getIPAddress() != null) {
      if (isPrivateIPAddress(nic.getIPAddress())) {
        privateAddresses.add(nic.getIPAddress());
      }
 else {
        publicAddresses.add(nic.getIPAddress());
      }
    }
  }
  try {
    Iterables.addAll(publicAddresses,transform(filter(getIPForwardingRulesByVirtualMachine.getUnchecked(from.getId()),new Predicate<IPForwardingRule>(){
      @Override public boolean apply(      @Nullable IPForwardingRule rule){
        return !"Deleting".equals(rule.getState());
      }
    }
),new Function<IPForwardingRule,String>(){
      @Override public String apply(      @Nullable IPForwardingRule rule){
        return rule.getIPAddress();
      }
    }
));
  }
 catch (  UncheckedExecutionException e) {
    if (Throwables2.getFirstThrowableOfType(e,ResourceNotFoundException.class) == null) {
      Throwables.propagateIfPossible(e.getCause());
      throw e;
    }
  }
  return builder.privateAddresses(privateAddresses).publicAddresses(publicAddresses).build();
}
