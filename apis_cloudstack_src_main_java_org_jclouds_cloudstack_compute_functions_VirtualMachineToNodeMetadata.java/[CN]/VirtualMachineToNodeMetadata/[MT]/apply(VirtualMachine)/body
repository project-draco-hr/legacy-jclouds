{
  NodeMetadataBuilder builder=new NodeMetadataBuilder();
  builder.ids(from.getId() + "");
  builder.name(from.getName());
  builder.hostname(from.getDisplayName());
  builder.location(findLocationForVirtualMachine.apply(from));
  builder.group(parseGroupFromName(from.getDisplayName()));
  Image image=findImageForVirtualMachine.apply(from);
  if (image != null) {
    builder.imageId(image.getId());
    builder.operatingSystem(image.getOperatingSystem());
  }
  builder.hardware(new HardwareBuilder().ids(from.getServiceOfferingId() + "").name(from.getServiceOfferingName() + "").processors(ImmutableList.of(new Processor(from.getCpuCount(),from.getCpuSpeed()))).ram((int)from.getMemory()).hypervisor(from.getHypervisor()).build());
  builder.state(vmStateToNodeState.get(from.getState()));
  if (from.getIPAddress() != null) {
    boolean isPrivate=InetAddresses2.isPrivateIPAddress(from.getIPAddress());
    Set<String> addresses=ImmutableSet.<String>of(from.getIPAddress());
    if (isPrivate)     builder.privateAddresses(addresses);
 else     builder.publicAddresses(addresses);
  }
  try {
    builder.publicAddresses(transform(filter(getIPForwardingRulesByVirtualMachine.getUnchecked(from.getId()),new Predicate<IPForwardingRule>(){
      @Override public boolean apply(      @Nullable IPForwardingRule rule){
        return !"Deleting".equals(rule.getState());
      }
    }
),new Function<IPForwardingRule,String>(){
      @Override public String apply(      @Nullable IPForwardingRule rule){
        return rule.getIPAddress();
      }
    }
));
  }
 catch (  UncheckedExecutionException e) {
    if (Throwables2.getFirstThrowableOfType(e,ResourceNotFoundException.class) == null) {
      Throwables.propagateIfPossible(e.getCause());
      throw e;
    }
  }
  return builder.build();
}
