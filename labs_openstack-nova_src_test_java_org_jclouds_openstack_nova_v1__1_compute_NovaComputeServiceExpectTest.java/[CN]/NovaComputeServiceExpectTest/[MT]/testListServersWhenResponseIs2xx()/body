{
  HttpRequest listImagesDetail=HttpRequest.builder().method("GET").endpoint(URI.create("https://compute.north.host/v1.1/3456/images/detail")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse listImagesDetailResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/image_list_detail.json")).build();
  HttpRequest listFlavorsDetail=HttpRequest.builder().method("GET").endpoint(URI.create("https://compute.north.host/v1.1/3456/flavors/detail")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse listFlavorsDetailResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/flavor_list_detail.json")).build();
  HttpRequest listFloatingIps=HttpRequest.builder().method("GET").endpoint(URI.create("https://compute.north.host/v1.1/3456/os-floating-ips")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse listFloatingIpsResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/floatingip_list.json")).build();
  HttpRequest listServers=HttpRequest.builder().method("GET").endpoint(URI.create("https://compute.north.host/v1.1/3456/servers/detail")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse listServersResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/server_list_details.json")).build();
  Map<HttpRequest,HttpResponse> requestResponseMap=ImmutableMap.<HttpRequest,HttpResponse>builder().put(keystoneAuthWithAccessKeyAndSecretKey,responseWithKeystoneAccess).put(extensionsOfNovaRequest,extensionsOfNovaResponse).put(listFloatingIps,listFloatingIpsResponse).put(listServers,listServersResponse).put(listImagesDetail,listImagesDetailResponse).put(listFlavorsDetail,listFlavorsDetailResponse).build();
  ComputeService clientWhenServersExist=requestsSendResponses(requestResponseMap);
  Set<? extends Location> locations=clientWhenServersExist.listAssignableLocations();
  assertNotNull(locations);
  assertEquals(locations.size(),1);
  assertEquals(locations.iterator().next().getId(),"az-1.region-a.geo-1");
  assertNotNull(clientWhenServersExist.listNodes());
  assertEquals(clientWhenServersExist.listNodes().size(),1);
  assertEquals(clientWhenServersExist.listNodes().iterator().next().getId(),"az-1.region-a.geo-1/52415800-8b69-11e0-9b19-734f000004d2");
  assertEquals(clientWhenServersExist.listNodes().iterator().next().getName(),"sample-server");
}
