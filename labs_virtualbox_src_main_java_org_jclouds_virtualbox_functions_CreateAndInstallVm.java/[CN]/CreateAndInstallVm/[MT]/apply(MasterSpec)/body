{
  VmSpec vmSpec=masterSpec.getVmSpec();
  IsoSpec isoSpec=masterSpec.getIsoSpec();
  String masterName=vmSpec.getVmName();
  IMachine masterMachine=createAndRegisterMachineFromIsoIfNotAlreadyExists.apply(masterSpec);
  machineController.ensureMachineIsLaunched(masterName);
  String installationKeySequence=isoSpec.getInstallationKeySequence().replace("PRECONFIGURATION_URL",preconfigurationUrl);
  configureOsInstallationWithKeyboardSequence(masterName,installationKeySequence);
  Uninterruptibles.sleepUninterruptibly(40,TimeUnit.SECONDS);
  masterMachine.setExtraData(GUEST_OS_USER,masterSpec.getLoginCredentials().getUser());
  masterMachine.setExtraData(GUEST_OS_PASSWORD,masterSpec.getLoginCredentials().getPassword());
  SshClient client=sshClientForIMachine.apply(masterMachine);
  logger.debug(">> awaiting installation to finish node(%s)",masterName);
  checkState(sshResponds.apply(client),"timed out waiting for guest %s to be accessible via ssh",masterName);
  NodeMetadata nodeMetadata=imachineToNodeMetadata.apply(masterMachine);
  logger.debug(">> awaiting post-installation actions on vm: %s",masterName);
  ListenableFuture<ExecResponse> execCleanup=machineUtils.runScriptOnNode(nodeMetadata,call("cleanupUdevIfNeeded"),RunScriptOptions.NONE);
  ExecResponse cleanupResponse=Futures.getUnchecked(execCleanup);
  checkState(cleanupResponse.getExitStatus() == 0);
  logger.debug(">> awaiting installation of guest additions on vm: %s",masterName);
  ListenableFuture<ExecResponse> execInstallGA=machineUtils.runScriptOnNode(nodeMetadata,new InstallGuestAdditions(vmSpec,version),RunScriptOptions.NONE);
  ExecResponse gaInstallationResponse=Futures.getUnchecked(execInstallGA);
  checkState(gaInstallationResponse.getExitStatus() == 0);
  machineController.ensureMachineIsShutdown(masterName);
  Iterable<IMediumAttachment> mediumAttachments=Iterables.filter(masterMachine.getMediumAttachmentsOfController("IDE Controller"),new Predicate<IMediumAttachment>(){
    public boolean apply(    IMediumAttachment in){
      return in.getMedium() != null && in.getMedium().getDeviceType().equals(DeviceType.DVD);
    }
  }
);
  for (  IMediumAttachment iMediumAttachment : mediumAttachments) {
    logger.debug("Detach %s from (%s)",iMediumAttachment.getMedium().getName(),masterMachine.getName());
    machineUtils.writeLockMachineAndApply(masterMachine.getName(),new DetachDistroMediumFromMachine(iMediumAttachment.getController(),iMediumAttachment.getPort(),iMediumAttachment.getDevice()));
  }
  return masterMachine;
}
