{
switch (request.getMethod()) {
case POST:
    PostEntityBinder postBinder=null;
  Map<String,String> postParams=buildPostParams(method,args);
if (postParams.size() > 0 && (postBinder=this.getPostEntityBinderOrNull(method,args)) != null) {
  postBinder.addEntityToRequest(postParams,request);
  break;
}
case PUT:
HttpRequestOptions options=findOptionsIn(method,args);
if (options != null) {
optionsBinder.addEntityToRequest(options,request);
}
if (request.getEntity() == null) {
Map<Integer,Set<Annotation>> indexToEntityAnnotation=getIndexToEntityAnnotation(method);
if (indexToEntityAnnotation.size() == 1) {
Entry<Integer,Set<Annotation>> entry=indexToEntityAnnotation.entrySet().iterator().next();
EntityParam entityAnnotation=(EntityParam)entry.getValue().iterator().next();
Object entity=args[entry.getKey()];
EntityBinder binder=injector.getInstance(entityAnnotation.value());
binder.addEntityToRequest(entity,request);
}
 else if (indexToEntityAnnotation.size() > 1) {
throw new IllegalStateException("cannot have multiple @Entity annotations on " + method);
}
 else {
request.getHeaders().replaceValues(HttpHeaders.CONTENT_LENGTH,Lists.newArrayList("0"));
}
}
break;
}
return request;
}
