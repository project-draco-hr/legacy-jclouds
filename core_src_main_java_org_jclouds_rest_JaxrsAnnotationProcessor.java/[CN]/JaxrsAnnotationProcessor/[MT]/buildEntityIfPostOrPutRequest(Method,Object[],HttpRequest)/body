{
  OUTER:   if (request.getMethod().toUpperCase().equals("POST") || request.getMethod().toUpperCase().equals("PUT")) {
    MapEntityBinder mapBinder=getMapEntityBinderOrNull(method,args);
    Map<String,String> mapParams=buildPostParams(method,args);
    if (mapBinder != null) {
      mapBinder.addEntityToRequest(mapParams,request);
      break OUTER;
    }
    HttpRequestOptions options=findOptionsIn(method,args);
    if (options != null) {
      optionsBinder.addEntityToRequest(options,request);
    }
    if (request.getEntity() == null) {
      Map<Integer,Set<Annotation>> indexToEntityAnnotation=indexWithOnlyOneAnnotation(method,"@Entity",methodToIndexOfParamToEntityAnnotation);
      if (indexToEntityAnnotation.size() == 1) {
        Entry<Integer,Set<Annotation>> entry=indexToEntityAnnotation.entrySet().iterator().next();
        EntityParam entityAnnotation=(EntityParam)entry.getValue().iterator().next();
        EntityBinder binder=injector.getInstance(entityAnnotation.value());
        Object entity=args[entry.getKey()];
        if (entity.getClass().isArray()) {
          Object[] entityArray=(Object[])entity;
          entity=entityArray.length > 0 ? entityArray[0] : null;
        }
        if (entity != null)         binder.addEntityToRequest(entity,request);
      }
 else       if (indexToEntityAnnotation.size() > 1) {
        throw new IllegalStateException("cannot have multiple @Entity annotations on " + method);
      }
 else {
        request.getHeaders().replaceValues(HttpHeaders.CONTENT_LENGTH,Lists.newArrayList("0"));
      }
    }
  }
  return request;
}
