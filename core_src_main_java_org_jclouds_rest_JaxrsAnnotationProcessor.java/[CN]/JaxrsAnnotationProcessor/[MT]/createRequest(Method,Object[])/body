{
  URI endpoint=getEndpointFor(method);
  String httpMethod=getHttpMethodOrConstantOrThrowException(method);
  UriBuilder builder=addHostPrefixIfPresent(endpoint,method,args);
  builder.path(declaring);
  builder.path(method);
  if (declaring.isAnnotationPresent(QueryParams.class)) {
    QueryParams query=declaring.getAnnotation(QueryParams.class);
    addQuery(builder,query);
  }
  if (method.isAnnotationPresent(QueryParams.class)) {
    QueryParams query=method.getAnnotation(QueryParams.class);
    addQuery(builder,query);
  }
  for (  Entry<String,String> query : getQueryParamKeyValues(method,args).entrySet()) {
    builder.queryParam(query.getKey(),query.getValue());
  }
  Multimap<String,String> headers=buildHeaders(method,args);
  HttpRequestOptions options=findOptionsIn(method,args);
  if (options != null) {
    injector.injectMembers(options);
    headers.putAll(options.buildRequestHeaders());
    for (    Entry<String,String> query : options.buildQueryParameters().entries()) {
      builder.queryParam(query.getKey(),query.getValue());
    }
    for (    Entry<String,String> matrix : options.buildMatrixParameters().entries()) {
      builder.matrixParam(matrix.getKey(),matrix.getValue());
    }
    String pathSuffix=options.buildPathSuffix();
    if (pathSuffix != null) {
      builder.path(pathSuffix);
    }
  }
  URI endPoint;
  try {
    addHeaderIfAnnotationPresentOnMethod(headers,method,args);
    if (declaring.isAnnotationPresent(SkipEncoding.class)) {
      endPoint=builder.buildFromEncodedMap(getEncodedPathParamKeyValues(method,args,declaring.getAnnotation(SkipEncoding.class).value()));
    }
 else {
      endPoint=builder.buildFromEncodedMap(getEncodedPathParamKeyValues(method,args));
    }
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalStateException(e);
  }
catch (  UriBuilderException e) {
    throw new IllegalStateException(e);
  }
catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  HttpRequest request=new HttpRequest(httpMethod,endPoint,headers);
  addHostHeaderIfAnnotatedWithVirtualHost(headers,request.getEndpoint().getHost(),method);
  addFiltersIfAnnotated(method,request);
  buildEntityIfPostOrPutRequest(method,args,request);
  return request;
}
