{
  URI host=URI.create("http://localhost/" + PATH);
  HttpRequest request=new HttpRequest(HttpMethod.POST,host);
  request.setPayload(BODY);
  String expected_string_to_sign=new StringBuilder().append("Method:POST").append("\n").append("Hashed Path:").append(HASHED_CANONICAL_PATH).append("\n").append("X-Ops-Content-Hash:").append(HASHED_BODY).append("\n").append("X-Ops-Timestamp:").append(TIMESTAMP_ISO8601).append("\n").append("X-Ops-UserId:").append(USER_ID).toString();
  assertEquals(signing_obj.createStringToSign("POST",HASHED_CANONICAL_PATH,HASHED_BODY,TIMESTAMP_ISO8601),expected_string_to_sign);
  assertEquals(signing_obj.sign(expected_string_to_sign),Joiner.on("").join(X_OPS_AUTHORIZATION_LINES));
  signing_obj.filter(request);
  Multimap<String,String> headersWithoutContentLength=LinkedHashMultimap.create(request.getHeaders());
  headersWithoutContentLength.removeAll(HttpHeaders.CONTENT_LENGTH);
  assertEquals(headersWithoutContentLength.values(),EXPECTED_SIGN_RESULT.values());
}
