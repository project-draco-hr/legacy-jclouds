{
  checkState(!tainted,"this object is not designed to be reused: %s",toString());
  tainted=true;
  String originalId=node.get().getId();
  NodeMetadata originalNode=node.get();
  try {
    if (options.shouldBlockUntilRunning()) {
      try {
        Stopwatch stopwatch=new Stopwatch().start();
        if (!nodeRunning.apply(node)) {
          long timeWaited=stopwatch.elapsedMillis();
          long earlyReturnGrace=10;
          if (node.get() == null) {
            node.set(originalNode);
            throw new IllegalStateException(format("api response for node(%s) was null, so we can't customize",originalId));
          }
 else           if (timeWaited < (timeouts.nodeRunning - earlyReturnGrace)) {
            throw new IllegalStateException(format("node(%s) didn't achieve the state running, so we couldn't customize; aborting prematurely after %d seconds with final state: %s",originalId,timeWaited / 1000,node.get().getState()));
          }
 else {
            throw new IllegalStateException(format("node(%s) didn't achieve the state running within %d seconds, so we couldn't customize; final state: %s",originalId,timeouts.nodeRunning / 1000,node.get().getState()));
          }
        }
      }
 catch (      IllegalStateException e) {
        if (node.get().getState() == NodeState.TERMINATED) {
          throw new IllegalStateException(format("node(%s) terminated before we could customize",originalId));
        }
 else {
          throw e;
        }
      }
      if (statement != null) {
        RunScriptOnNode runner=initScriptRunnerFactory.create(node.get(),statement,options,badNodes).call();
        if (runner != null) {
          ExecResponse exec=runner.call();
          customizationResponses.put(node.get(),exec);
        }
      }
      if (options.getPort() > 0) {
        openSocketFinder.findOpenSocketOnNode(node.get(),options.getPort(),options.getSeconds(),TimeUnit.SECONDS);
      }
    }
    logger.debug("<< customized node(%s)",originalId);
    goodNodes.add(node.get());
  }
 catch (  Exception e) {
    logger.error(e,"<< problem customizing node(%s): ",originalId,getRootCause(e).getMessage());
    badNodes.put(node.get(),e);
  }
  return null;
}
