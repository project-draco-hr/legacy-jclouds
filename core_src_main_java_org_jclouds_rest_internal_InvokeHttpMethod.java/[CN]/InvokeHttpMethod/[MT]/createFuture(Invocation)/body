{
  String name=invocation.getInvokable().toString();
  logger.trace(">> converting %s",name);
  GeneratedHttpRequest<A> request=annotationProcessor.apply(invocation);
  logger.trace("<< converted %s to %s",name,request.getRequestLine());
  Function<HttpResponse,?> transformer=transformerForRequest.apply(request);
  logger.trace("<< response from %s is parsed by %s",name,transformer.getClass().getSimpleName());
  logger.debug(">> invoking %s",name);
  ListenableFuture<?> result=transform(http.submit(new HttpCommand(request)),transformer,userExecutor);
  FutureFallback<?> fallback=fallbacks.getUnchecked(invocation.getInvokable());
  if (fallback instanceof InvocationContext) {
    InvocationContext.class.cast(fallback).setContext(request);
  }
  logger.trace("<< exceptions from %s are parsed by %s",name,fallback.getClass().getSimpleName());
  return withFallback(result,fallback);
}
