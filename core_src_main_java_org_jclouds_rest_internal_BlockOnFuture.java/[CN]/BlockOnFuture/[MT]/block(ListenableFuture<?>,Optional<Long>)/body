{
  try {
    if (timeoutNanos.isPresent()) {
      logger.debug(">> blocking on %s for %s",future,timeoutNanos);
      return getUninterruptibly(future,timeoutNanos.get(),NANOSECONDS);
    }
 else {
      logger.debug(">> blocking on %s",future);
      return getUninterruptibly(future);
    }
  }
 catch (  ExecutionException e) {
    throw propagateCause(e);
  }
catch (  TimeoutException e) {
    future.cancel(true);
    throw new UncheckedTimeoutException(e);
  }
}
