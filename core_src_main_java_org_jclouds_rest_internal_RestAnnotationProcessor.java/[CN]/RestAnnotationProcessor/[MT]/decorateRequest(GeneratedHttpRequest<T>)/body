{
  Cache<Integer,Set<Annotation>> indexToParamExtractor=methodToIndexOfParamToParamParserAnnotations.get(request.getJavaMethod());
  OUTER:   for (  Entry<Integer,Set<Annotation>> entry : concat(filterValues(methodToIndexOfParamToBinderParamAnnotation.get(request.getJavaMethod()).asMap(),notEmpty).entrySet(),filterValues(methodToIndexOfParamToWrapWithAnnotation.get(request.getJavaMethod()).asMap(),notEmpty).entrySet())) {
    boolean shouldBreak=false;
    Annotation annotation=Iterables.get(entry.getValue(),0);
    Binder binder;
    if (annotation instanceof BinderParam)     binder=injector.getInstance(BinderParam.class.cast(annotation).value());
 else     binder=injector.getInstance(BindToJsonPayloadWrappedWith.Factory.class).create(WrapWith.class.cast(annotation).value());
    if (request.getArgs().size() >= entry.getKey() + 1 && request.getArgs().get(entry.getKey()) != null) {
      Object input;
      Class<?> parameterType=request.getJavaMethod().getParameterTypes()[entry.getKey()];
      Class<? extends Object> argType=request.getArgs().get(entry.getKey()).getClass();
      if (!argType.isArray() && request.getJavaMethod().isVarArgs() && parameterType.isArray()) {
        int arrayLength=request.getArgs().size() - request.getJavaMethod().getParameterTypes().length + 1;
        if (arrayLength == 0)         break OUTER;
        input=(Object[])Array.newInstance(request.getArgs().get(entry.getKey()).getClass(),arrayLength);
        System.arraycopy(request.getArgs().toArray(),entry.getKey(),input,0,arrayLength);
        shouldBreak=true;
      }
 else       if (argType.isArray() && request.getJavaMethod().isVarArgs() && parameterType.isArray()) {
        input=request.getArgs().get(entry.getKey());
      }
 else {
        input=request.getArgs().get(entry.getKey());
        if (input.getClass().isArray()) {
          Object[] payloadArray=(Object[])input;
          input=payloadArray.length > 0 ? payloadArray[0] : null;
        }
      }
      if (input != null) {
        Set<Annotation> extractors=indexToParamExtractor.get(entry.getKey());
        Object parsedValue=null;
        if (extractors != null && extractors.size() > 0) {
          ParamParser extractor=(ParamParser)extractors.iterator().next();
          parsedValue=injector.getInstance(extractor.value()).apply(input);
        }
 else {
          parsedValue=input;
        }
        request=binder.bindToRequest(request,parsedValue);
      }
      if (shouldBreak)       break OUTER;
    }
 else {
      if (entry.getKey() >= request.getJavaMethod().getParameterAnnotations().length) {
        throw new IllegalArgumentException("Argument index " + (entry.getKey() + 1) + " is out of bounds for method "+ request.getJavaMethod());
      }
      if (request.getJavaMethod().isVarArgs() && entry.getKey() + 1 == request.getJavaMethod().getParameterTypes().length)       continue OUTER;
      Annotation[] annotations=request.getJavaMethod().getParameterAnnotations()[entry.getKey()];
      for (      Annotation a : annotations) {
        if (Nullable.class.isAssignableFrom(a.annotationType()))         continue OUTER;
      }
      Preconditions.checkNotNull(null,request.getJavaMethod().getName() + " parameter " + (entry.getKey() + 1));
    }
  }
  return request;
}
