{
  org.jclouds.rest.MapBinder mapBinder=getMapPayloadBinderOrNull(request.getJavaMethod(),request.getArgs());
  Map<String,String> mapParams=buildPostParams(request.getJavaMethod(),request.getArgs());
  if (mapBinder != null) {
    mapBinder.bindToRequest(request,mapParams);
  }
 else {
    OUTER:     for (    Entry<Integer,Set<Annotation>> entry : filterValues(methodToIndexOfParamToDecoratorParamAnnotation.get(request.getJavaMethod()),new Predicate<Set<Annotation>>(){
      public boolean apply(      Set<Annotation> input){
        return input.size() >= 1;
      }
    }
).entrySet()) {
      boolean shouldBreak=false;
      BinderParam payloadAnnotation=(BinderParam)entry.getValue().iterator().next();
      Binder binder=injector.getInstance(payloadAnnotation.value());
      if (request.getArgs().length >= entry.getKey() + 1 && request.getArgs()[entry.getKey()] != null) {
        Object input;
        Class<?> parameterType=request.getJavaMethod().getParameterTypes()[entry.getKey()];
        Class<? extends Object> argType=request.getArgs()[entry.getKey()].getClass();
        if (!argType.isArray() && request.getJavaMethod().isVarArgs() && parameterType.isArray()) {
          int arrayLength=request.getArgs().length - request.getJavaMethod().getParameterTypes().length + 1;
          if (arrayLength == 0)           break OUTER;
          input=(Object[])Array.newInstance(request.getArgs()[entry.getKey()].getClass(),arrayLength);
          System.arraycopy(request.getArgs(),entry.getKey(),input,0,arrayLength);
          shouldBreak=true;
        }
 else         if (argType.isArray() && request.getJavaMethod().isVarArgs() && parameterType.isArray()) {
          input=request.getArgs()[entry.getKey()];
        }
 else {
          input=request.getArgs()[entry.getKey()];
          if (input.getClass().isArray()) {
            Object[] payloadArray=(Object[])input;
            input=payloadArray.length > 0 ? payloadArray[0] : null;
          }
        }
        if (input != null) {
          binder.bindToRequest(request,input);
        }
        if (shouldBreak)         break OUTER;
      }
    }
  }
  if (request.getMethod().equals("PUT") && request.getPayload() == null) {
    request.getHeaders().replaceValues(CONTENT_LENGTH,Collections.singletonList(0 + ""));
  }
  if (request.getPayload() != null) {
    if ("chunked".equalsIgnoreCase(request.getFirstHeaderOrNull("Transfer-Encoding"))) {
      request.getHeaders().get(CONTENT_LENGTH).clear();
    }
 else {
      if (request.getHeaders().get(CONTENT_LENGTH).size() == 0 && request.getPayload().getContentLength() != null)       request.getHeaders().put(CONTENT_LENGTH,request.getPayload().getContentLength() + "");
      checkArgument(request.getFirstHeaderOrNull(CONTENT_LENGTH) != null,"no content length on payload!");
    }
    if (request.getHeaders().get("Content-MD5").size() == 0 && request.getPayload().getContentMD5() != null)     request.getHeaders().put("Content-MD5",encryptionService.base64(request.getPayload().getContentMD5()));
    if (request.getHeaders().get(CONTENT_TYPE).size() == 0 && request.getPayload().getContentType() != null)     request.getHeaders().put(CONTENT_TYPE,request.getPayload().getContentType());
  }
}
