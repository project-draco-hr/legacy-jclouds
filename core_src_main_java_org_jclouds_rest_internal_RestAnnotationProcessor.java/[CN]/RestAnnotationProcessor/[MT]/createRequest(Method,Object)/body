{
  inputParamValidator.validateMethodParametersOrThrow(method,args);
  ClassMethodArgs cma=logger.isTraceEnabled() ? new ClassMethodArgs(method.getDeclaringClass(),method,args) : null;
  URI endpoint=callerEndpoint;
  try {
    if (endpoint == null) {
      endpoint=getEndpointFor(method,args,injector);
      logger.trace("using endpoint %s for %s",endpoint,cma);
    }
 else {
      logger.trace("using endpoint %s from caller %s for %s",caller,endpoint,cma);
    }
  }
 catch (  IllegalStateException e) {
    logger.trace("looking up default endpoint for %s",cma);
    endpoint=injector.getInstance(Key.get(URI.class,org.jclouds.rest.annotations.Provider.class));
    logger.trace("using default endpoint %s for %s",endpoint,cma);
  }
  String httpMethod=getHttpMethodOrConstantOrThrowException(method);
  UriBuilder builder=uriBuilderProvider.get().uri(endpoint);
  Multimap<String,String> tokenValues=LinkedHashMultimap.create();
  if (caller != null) {
    builder.path(getPath(caller.getMethod().getDeclaringClass(),caller.getMethod(),caller.getArgs()));
  }
  tokenValues.putAll(addPathAndGetTokens(declaring,method,args,builder));
  Multimap<String,String> formParams=addFormParams(tokenValues.entries(),method,args);
  Multimap<String,String> queryParams=addQueryParams(tokenValues.entries(),method,args);
  addMatrixParams(builder,tokenValues.entries(),method,args);
  Multimap<String,String> headers=buildHeaders(tokenValues.entries(),method,args);
  Payload payload=null;
  HttpRequestOptions options=findOptionsIn(method,args);
  if (options != null) {
    injector.injectMembers(options);
    for (    Entry<String,String> header : options.buildRequestHeaders().entries()) {
      headers.put(header.getKey(),replaceTokens(header.getValue(),tokenValues.entries()));
    }
    for (    Entry<String,String> matrix : options.buildMatrixParameters().entries()) {
      builder.matrixParam(matrix.getKey(),replaceTokens(matrix.getValue(),tokenValues.entries()));
    }
    for (    Entry<String,String> query : options.buildQueryParameters().entries()) {
      queryParams.put(query.getKey(),replaceTokens(query.getValue(),tokenValues.entries()));
    }
    for (    Entry<String,String> form : options.buildFormParameters().entries()) {
      formParams.put(form.getKey(),replaceTokens(form.getValue(),tokenValues.entries()));
    }
    String pathSuffix=options.buildPathSuffix();
    if (pathSuffix != null) {
      builder.path(pathSuffix);
    }
    String stringPayload=options.buildStringPayload();
    if (stringPayload != null)     payload=Payloads.newStringPayload(stringPayload);
  }
  if (queryParams.size() > 0) {
    builder.replaceQuery(makeQueryLine(queryParams,null,skips));
  }
  try {
    endpoint=builder.buildFromEncodedMap(convertUnsafe(tokenValues));
  }
 catch (  IllegalArgumentException e) {
    throw new IllegalStateException(e);
  }
catch (  UriBuilderException e) {
    throw new IllegalStateException(e);
  }
  GeneratedHttpRequest<T> request=new GeneratedHttpRequest<T>(httpMethod,endpoint,skips,declaring,method,args);
  addHostHeaderIfAnnotatedWithVirtualHost(headers,request.getEndpoint().getHost(),method);
  addFiltersIfAnnotated(method,request);
  if (payload == null)   payload=findPayloadInArgs(args);
  List<? extends Part> parts=getParts(method,args,Iterables.concat(tokenValues.entries(),formParams.entries()));
  if (parts.size() > 0) {
    if (formParams.size() > 0) {
      parts=newLinkedList(Iterables.concat(Iterables.transform(formParams.entries(),ENTRY_TO_PART),parts));
    }
    payload=new MultipartForm(BOUNDARY,parts);
  }
 else   if (formParams.size() > 0) {
    payload=Payloads.newUrlEncodedFormPayload(formParams,skips);
  }
  if (payload != null) {
    request.setPayload(payload);
  }
  decorateRequest(request,headers);
  return request;
}
