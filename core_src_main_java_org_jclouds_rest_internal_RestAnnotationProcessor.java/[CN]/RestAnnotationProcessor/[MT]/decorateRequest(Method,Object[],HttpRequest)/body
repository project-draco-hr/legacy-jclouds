{
  MapRequestDecorator mapBinder=getMapEntityBinderOrNull(method,args);
  Map<String,String> mapParams=buildPostParams(method,args);
  if (mapBinder != null) {
    mapBinder.decorateRequest(request,mapParams);
    return request;
  }
  for (  Entry<Integer,Set<Annotation>> entry : Maps.filterValues(methodToIndexOfParamToDecoratorParamAnnotation.get(method),new Predicate<Set<Annotation>>(){
    public boolean apply(    Set<Annotation> input){
      return input.size() >= 1;
    }
  }
).entrySet()) {
    DecoratorParam entityAnnotation=(DecoratorParam)entry.getValue().iterator().next();
    RequestDecorator binder=injector.getInstance(entityAnnotation.value());
    Object input=args[entry.getKey()];
    if (input.getClass().isArray()) {
      Object[] entityArray=(Object[])input;
      input=entityArray.length > 0 ? entityArray[0] : null;
    }
    Object oldEntity=request.getEntity();
    request=binder.decorateRequest(request,input);
    if (oldEntity != null && !oldEntity.equals(request.getEntity())) {
      throw new IllegalStateException(String.format("binder %s replaced the previous entity on request: %s",binder,request));
    }
  }
  if (request.getMethod().equals("PUT") && request.getEntity() == null) {
    request.getHeaders().replaceValues(HttpHeaders.CONTENT_LENGTH,Collections.singletonList(0 + ""));
  }
  return request;
}
