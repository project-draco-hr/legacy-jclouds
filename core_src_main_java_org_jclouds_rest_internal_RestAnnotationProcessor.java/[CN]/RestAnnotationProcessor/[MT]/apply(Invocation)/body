{
  checkNotNull(invocation,"invocation");
  inputParamValidator.validateMethodParametersOrThrow(invocation);
  Optional<URI> endpoint=Optional.absent();
  HttpRequest r=findOrNull(invocation.getArgs(),HttpRequest.class);
  if (r != null) {
    endpoint=Optional.fromNullable(r.getEndpoint());
    if (endpoint.isPresent())     logger.trace("using endpoint %s from invocation.getArgs() for %s",endpoint,invocation);
  }
 else   if (caller != null) {
    endpoint=getEndpointFor(caller);
    if (endpoint.isPresent())     logger.trace("using endpoint %s from caller %s for %s",endpoint,caller,invocation);
 else     endpoint=findEndpoint(invocation);
  }
 else {
    endpoint=findEndpoint(invocation);
  }
  if (!endpoint.isPresent())   throw new NoSuchElementException(format("no endpoint found for %s",invocation));
  GeneratedHttpRequest.Builder requestBuilder=GeneratedHttpRequest.builder().invocation(invocation).caller(caller);
  if (r != null) {
    requestBuilder.fromHttpRequest(r);
  }
 else {
    requestBuilder.method(tryFindHttpMethod(invocation.getInvokable()).get());
  }
  requestBuilder.filters(getFiltersIfAnnotated(invocation));
  Multimap<String,Object> tokenValues=LinkedHashMultimap.create();
  tokenValues.put(Constants.PROPERTY_API_VERSION,apiVersion);
  tokenValues.put(Constants.PROPERTY_BUILD_VERSION,buildVersion);
  UriBuilder uriBuilder=uriBuilder(endpoint.get().toString());
  overridePathEncoding(uriBuilder,invocation);
  if (caller != null)   tokenValues.putAll(addPathAndGetTokens(caller,uriBuilder));
  tokenValues.putAll(addPathAndGetTokens(invocation,uriBuilder));
  Multimap<String,Object> formParams=addFormParams(tokenValues,invocation);
  Multimap<String,Object> queryParams=addQueryParams(tokenValues,invocation);
  Multimap<String,String> headers=buildHeaders(tokenValues,invocation);
  if (r != null)   headers.putAll(r.getHeaders());
  if (shouldAddHostHeader(invocation)) {
    StringBuilder hostHeader=new StringBuilder(endpoint.get().getHost());
    if (endpoint.get().getPort() != -1)     hostHeader.append(":").append(endpoint.get().getPort());
    headers.put(HOST,hostHeader.toString());
  }
  Payload payload=null;
  for (  HttpRequestOptions options : findOptionsIn(invocation)) {
    injector.injectMembers(options);
    for (    Entry<String,String> header : options.buildRequestHeaders().entries()) {
      headers.put(header.getKey(),replaceTokens(header.getValue(),tokenValues));
    }
    for (    Entry<String,String> query : options.buildQueryParameters().entries()) {
      queryParams.put(query.getKey(),replaceTokens(query.getValue(),tokenValues));
    }
    for (    Entry<String,String> form : options.buildFormParameters().entries()) {
      formParams.put(form.getKey(),replaceTokens(form.getValue(),tokenValues));
    }
    String pathSuffix=options.buildPathSuffix();
    if (pathSuffix != null) {
      uriBuilder.appendPath(pathSuffix);
    }
    String stringPayload=options.buildStringPayload();
    if (stringPayload != null)     payload=Payloads.newStringPayload(stringPayload);
  }
  if (queryParams.size() > 0) {
    uriBuilder.query(queryParams);
  }
  requestBuilder.headers(filterOutContentHeaders(headers));
  requestBuilder.endpoint(uriBuilder.build(convertUnsafe(tokenValues)));
  if (payload == null) {
    PayloadEnclosing payloadEnclosing=findOrNull(invocation.getArgs(),PayloadEnclosing.class);
    payload=(payloadEnclosing != null) ? payloadEnclosing.getPayload() : findOrNull(invocation.getArgs(),Payload.class);
  }
  List<? extends Part> parts=getParts(invocation,ImmutableMultimap.<String,Object>builder().putAll(tokenValues).putAll(formParams).build());
  if (parts.size() > 0) {
    if (formParams.size() > 0) {
      parts=newLinkedList(concat(transform(formParams.entries(),ENTRY_TO_PART),parts));
    }
    payload=new MultipartForm(MultipartForm.BOUNDARY,parts);
  }
 else   if (formParams.size() > 0) {
    payload=Payloads.newUrlEncodedFormPayload(transformValues(formParams,NullableToStringFunction.INSTANCE));
  }
 else   if (headers.containsKey(CONTENT_TYPE)) {
    if (payload == null)     payload=Payloads.newByteArrayPayload(new byte[]{});
    payload.getContentMetadata().setContentType(get(headers.get(CONTENT_TYPE),0));
  }
  if (payload != null) {
    requestBuilder.payload(payload);
  }
  GeneratedHttpRequest request=requestBuilder.build();
  org.jclouds.rest.MapBinder mapBinder=getMapPayloadBinderOrNull(invocation);
  if (mapBinder != null) {
    Map<String,Object> mapParams;
    if (caller != null) {
      mapParams=buildPayloadParams(caller);
      mapParams.putAll(buildPayloadParams(invocation));
    }
 else {
      mapParams=buildPayloadParams(invocation);
    }
    if (invocation.getInvokable().isAnnotationPresent(PayloadParams.class)) {
      PayloadParams params=invocation.getInvokable().getAnnotation(PayloadParams.class);
      addMapPayload(mapParams,params,headers);
    }
    request=mapBinder.bindToRequest(request,mapParams);
  }
 else {
    request=decorateRequest(request);
  }
  if (request.getPayload() != null) {
    contentMetadataCodec.fromHeaders(request.getPayload().getContentMetadata(),headers);
  }
  utils.checkRequestHasRequiredProperties(request);
  return request;
}
