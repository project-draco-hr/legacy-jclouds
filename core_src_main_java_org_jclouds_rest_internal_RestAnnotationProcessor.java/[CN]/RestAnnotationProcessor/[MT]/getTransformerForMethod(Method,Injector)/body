{
  Function<HttpResponse,?> transformer;
  if (method.isAnnotationPresent(SelectJson.class)) {
    Type returnVal=getReturnTypeForMethod(method);
    if (method.isAnnotationPresent(OnlyElement.class))     returnVal=Types.newParameterizedType(Set.class,returnVal);
    transformer=new ParseFirstJsonValueNamed(injector.getInstance(GsonWrapper.class),TypeLiteral.get(returnVal),method.getAnnotation(SelectJson.class).value());
    if (method.isAnnotationPresent(OnlyElement.class))     transformer=Functions.compose(new OnlyElementOrNull(),transformer);
  }
 else {
    transformer=injector.getInstance(getParserOrThrowException(method));
  }
  if (method.isAnnotationPresent(Transform.class)) {
    transformer=Functions.compose(Function.class.cast(injector.getInstance(method.getAnnotation(Transform.class).value())),transformer);
  }
  return transformer;
}
