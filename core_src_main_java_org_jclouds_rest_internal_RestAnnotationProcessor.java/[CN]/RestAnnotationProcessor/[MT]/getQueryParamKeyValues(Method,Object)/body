{
  Multimap<String,String> queryParamValues=LinkedHashMultimap.create();
  LoadingCache<Integer,Set<Annotation>> indexToQueryParam=methodToIndexOfParamToQueryParamAnnotations.get(method);
  LoadingCache<Integer,Set<Annotation>> indexToParamExtractor=methodToIndexOfParamToParamParserAnnotations.get(method);
  for (  Entry<Integer,Set<Annotation>> entry : indexToQueryParam.asMap().entrySet()) {
    for (    Annotation key : entry.getValue()) {
      Set<Annotation> extractors=indexToParamExtractor.get(entry.getKey());
      String paramKey=((QueryParam)key).value();
      Object paramValue;
      if (extractors != null && extractors.size() > 0) {
        ParamParser extractor=(ParamParser)extractors.iterator().next();
        paramValue=injector.getInstance(extractor.value()).apply(args[entry.getKey()]);
      }
 else {
        paramValue=args[entry.getKey()];
      }
      if (paramValue != null) {
        queryParamValues.put(paramKey,paramValue.toString());
      }
    }
  }
  if (method.isAnnotationPresent(QueryParam.class) && method.isAnnotationPresent(ParamParser.class)) {
    String paramKey=method.getAnnotation(QueryParam.class).value();
    String paramValue=injector.getInstance(method.getAnnotation(ParamParser.class).value()).apply(args);
    queryParamValues.put(paramKey,paramValue);
  }
  return queryParamValues;
}
