{
  ParameterizedType parserType;
  if (method.isAnnotationPresent(Unwrap.class)) {
    int depth=method.getAnnotation(Unwrap.class).depth();
    Class edgeCollection=method.getAnnotation(Unwrap.class).edgeCollection();
    if (depth == 1 && edgeCollection == Map.class)     parserType=Types.newParameterizedType(UnwrapOnlyJsonValue.class,returnVal);
 else     if (depth == 2 && edgeCollection == Map.class)     parserType=Types.newParameterizedType(UnwrapOnlyNestedJsonValue.class,returnVal);
 else     if (depth == 3 && edgeCollection == Set.class)     parserType=Types.newParameterizedType(UnwrapOnlyNestedJsonValueInSet.class,returnVal);
 else     throw new IllegalStateException(String.format("depth(%d) edgeCollection(%s) not yet supported for @Unwrap",depth,edgeCollection));
  }
 else {
    parserType=Types.newParameterizedType(ParseJson.class,returnVal);
  }
  return (Key<? extends Function<HttpResponse,?>>)Key.get(parserType);
}
