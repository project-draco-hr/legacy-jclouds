{
  return Suppliers.<CacheLoader<RegionAndName,Image>>ofInstance(new CacheLoader<RegionAndName,Image>(){
    private final AtomicReference<AuthorizationException> authException=Atomics.newReference();
    @Override public Image load(    final RegionAndName key) throws Exception {
      Supplier<Image> rawSupplier=new Supplier<Image>(){
        @Override public Image get(){
          try {
            return delegate.load(key);
          }
 catch (          ExecutionException e) {
            throw Throwables.propagate(e);
          }
        }
      }
;
      Supplier<Image> retryingSupplier=new RetryOnTimeOutExceptionSupplier<Image>(new SetAndThrowAuthorizationExceptionSupplier<Image>(rawSupplier,authException));
      return retryingSupplier.get();
    }
  }
);
}
