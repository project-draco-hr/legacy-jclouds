{
  List<String> argStrings=new ArrayList<String>();
  List<Object> argValues=new ArrayList<Object>();
  for (  Object arg : args) {
    if (arg instanceof BaseHttpRequestOptions) {
      for (      Map.Entry<String,String> httpEntry : ((BaseHttpRequestOptions)arg).buildFormParameters().entries()) {
        argStrings.add(httpEntry.getKey() + "=" + httpEntry.getValue());
      }
      argValues.add(arg);
    }
 else {
      Map.Entry<String,String> entry=(Map.Entry<String,String>)arg;
      argStrings.add(entry.getKey() + "=" + Strings2.urlEncode(entry.getValue()));
      argValues.add(entry.getValue());
    }
  }
  Method method=null;
  for (  Method m : asyncClientClass.getMethods()) {
    if (m.getName().equals(localMethod)) {
      assertNull(method,"More than one method called " + localMethod + " in class "+ asyncClientClass);
      method=m;
    }
  }
  assertNotNull(method,"Failed to locate method " + localMethod + " in class "+ asyncClientClass);
  HttpRequest httpRequest=processor.createRequest(method,argValues.toArray());
  assertRequestLineEquals(httpRequest,httpMethod + " https://api.glesys.com/" + remoteServicePrefix+ "/"+ remoteCall+ "/format/json HTTP/1.1");
  if (expectResponse) {
    assertNonPayloadHeadersEqual(httpRequest,"Accept: application/json\n");
    assertResponseParserClassEquals(method,httpRequest,responseParser);
  }
  if (argStrings.isEmpty()) {
    assertPayloadEquals(httpRequest,null,null,false);
  }
 else {
    assertNotNull(httpRequest.getPayload());
    String payload=(String)httpRequest.getPayload().getRawContent();
    Iterable<String> in=Splitter.on("&").split(payload);
    assertContentHeadersEqual(httpRequest,"application/x-www-form-urlencoded",null,null,null,0L + payload.length(),null);
    assertEquals(ImmutableSortedSet.copyOf(in),ImmutableSortedSet.copyOf(argStrings));
  }
  assertSaxResponseParserClassEquals(method,null);
  assertExceptionParserClassEquals(method,exceptionParser);
  checkFilters(httpRequest);
}
