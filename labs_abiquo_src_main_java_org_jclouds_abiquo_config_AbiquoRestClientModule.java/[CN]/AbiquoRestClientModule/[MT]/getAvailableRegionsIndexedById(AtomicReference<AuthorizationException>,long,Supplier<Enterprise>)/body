{
  Supplier<Map<Integer,Datacenter>> availableRegionsMapSupplier=Suppliers2.compose(new Function<List<Datacenter>,Map<Integer,Datacenter>>(){
    @Override public Map<Integer,Datacenter> apply(    final List<Datacenter> datacenters){
      return Maps.uniqueIndex(datacenters,new Function<Datacenter,Integer>(){
        @Override public Integer apply(        final Datacenter input){
          return input.getId();
        }
      }
);
    }
  }
,new Supplier<List<Datacenter>>(){
    @Override public List<Datacenter> get(){
      return currentEnterprise.get().listAllowedDatacenters();
    }
  }
);
  return MemoizedRetryOnTimeOutButNotOnAuthorizationExceptionSupplier.create(authException,availableRegionsMapSupplier,seconds,TimeUnit.SECONDS);
}
