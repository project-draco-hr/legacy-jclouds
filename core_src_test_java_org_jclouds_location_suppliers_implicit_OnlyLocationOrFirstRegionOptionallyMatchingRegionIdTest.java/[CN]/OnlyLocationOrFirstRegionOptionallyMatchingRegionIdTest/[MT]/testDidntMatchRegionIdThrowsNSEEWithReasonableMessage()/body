{
  Supplier<Set<? extends Location>> supplier=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(provider,region,region2,zone));
  OnlyLocationOrFirstRegionOptionallyMatchingRegionId fn=new OnlyLocationOrFirstRegionOptionallyMatchingRegionId(Suppliers.ofInstance("foo"),supplier);
  try {
    fn.get();
    fail("Expected NoSuchElementException");
  }
 catch (  NoSuchElementException e) {
    assertEquals(e.getMessage(),"couldn't find region matching isRegionAndIdEqualsOrIsZoneParentIdEquals(foo) in [servo:PROVIDER, servo-r1:REGION, servo-r2:REGION, servo-z:ZONE]");
  }
}
