{
  NodeMetadataBuilder nodeMetadataBuilder=new NodeMetadataBuilder();
  nodeMetadataBuilder.name(vm.getName()).ids(vm.getName());
  LocationBuilder locationBuilder=new LocationBuilder();
  locationBuilder.description("");
  locationBuilder.id("");
  locationBuilder.scope(LocationScope.HOST);
  nodeMetadataBuilder.location(locationBuilder.build());
  HardwareBuilder hardwareBuilder=new HardwareBuilder();
  hardwareBuilder.ram(vm.getMemorySize().intValue());
  Set<Processor> processors=new HashSet<Processor>();
  for (int i=0; i < vm.getCPUCount(); i++) {
    Processor processor=new Processor(1,0);
    processors.add(processor);
  }
  hardwareBuilder.processors(processors);
  hardwareBuilder.is64Bit(false);
  nodeMetadataBuilder.hostname(vm.getName());
  MachineState vmState=vm.getState();
  NodeState nodeState=machineToNodeState.get(vmState);
  if (nodeState == null)   nodeState=NodeState.UNRECOGNIZED;
  nodeMetadataBuilder.state(nodeState);
  logger.debug("Setting virtualbox node to: " + nodeState + " from machine state: "+ vmState);
  INetworkAdapter networkAdapter=vm.getNetworkAdapter(0l);
  if (networkAdapter != null) {
    nodeMetadataBuilder.privateAddresses(ImmutableSet.of(networkAdapter.getNatDriver().getHostIP()));
    for (    String nameProtocolnumberAddressInboudportGuestTargetport : networkAdapter.getNatDriver().getRedirects()) {
      Iterable<String> stuff=Splitter.on(',').split(nameProtocolnumberAddressInboudportGuestTargetport);
      String protocolNumber=Iterables.get(stuff,1);
      String hostAddress=Iterables.get(stuff,2);
      String inboundPort=Iterables.get(stuff,3);
      String targetPort=Iterables.get(stuff,5);
      if ("1".equals(protocolNumber) && "22".equals(targetPort))       nodeMetadataBuilder.privateAddresses(ImmutableSet.of(hostAddress)).loginPort(Integer.parseInt(inboundPort));
    }
  }
  return nodeMetadataBuilder.build();
}
