{
  checkState(checkNotNull(from,"args") instanceof Object[],"this must be applied to a method!");
  Object[] args=(Object[])from;
  checkArgument(args[0] instanceof String,"arg[0] must be a container name");
  checkArgument(args[1] instanceof Blob,"arg[1] must be a pcsfile");
  Key key=PCSUtils.parseKey(new Key(args[0].toString(),((Blob)args[1]).getKey()));
  try {
    return finder.get(key.getContainer());
  }
 catch (  ComputationException e) {
    if (e.getCause() instanceof ContainerNotFoundException) {
      String[] containerTree=key.getContainer().split("/");
      SortedSet<ContainerMetadata> response=blobStore.listContainers();
      URI containerUri;
      try {
        containerUri=urlForNameInListOrCreate(rootContainer,containerTree[0],response);
      }
 catch (      Exception e1) {
        Utils.<ContainerNotFoundException>rethrowIfRuntimeOrSameType(e1);
        throw new BlobRuntimeException("error creating container at: " + containerTree[0],e1);
      }
      if (containerTree.length != 1) {
        for (int i=1; i < containerTree.length; i++) {
          try {
            response=blobStore.listContainers(containerUri).get(requestTimeoutMilliseconds,TimeUnit.MILLISECONDS);
            containerUri=urlForNameInListOrCreate(containerUri,containerTree[i],response);
          }
 catch (          Exception e2) {
            Utils.<ContainerNotFoundException>rethrowIfRuntimeOrSameType(e2);
            throw new BlobRuntimeException("error listing container at: " + containerUri,e2);
          }
        }
      }
      return PCSUtils.getContainerId(containerUri);
    }
    Utils.<ContainerNotFoundException>rethrowIfRuntimeOrSameType(e);
    throw e;
  }
}
