{
  HardwareBuilder builder=new HardwareBuilder();
  try {
    builder.id(from.getUUIDString());
    builder.providerId(from.getID() + "");
    builder.name(from.getName());
    List<Processor> processors=Lists.newArrayList();
    for (int i=0; i < from.getInfo().nrVirtCpu; i++) {
      processors.add(new Processor(i + 1,1));
    }
    builder.processors(processors);
    builder.ram((int)from.getInfo().maxMem);
    List<Volume> volumes=Lists.newArrayList();
    XMLBuilder xmlBuilder=XMLBuilder.parse(new InputSource(new StringReader(from.getXMLDesc(0))));
    Document doc=xmlBuilder.getDocument();
    XPathExpression expr=XPathFactory.newInstance().newXPath().compile("//devices/disk[@device='disk']/source/@file");
    NodeList nodes=(NodeList)expr.evaluate(doc,XPathConstants.NODESET);
    String diskFileName=nodes.item(0).getNodeValue();
    for (int i=0; i < nodes.getLength(); i++) {
      StorageVol storageVol=from.getConnect().storageVolLookupByPath(diskFileName);
      String id=storageVol.getKey();
      float size=new Long(storageVol.getInfo().capacity).floatValue();
      volumes.add(new VolumeImpl(id,Volume.Type.LOCAL,size,null,true,false));
    }
    builder.volumes((List<Volume>)volumes);
  }
 catch (  LibvirtException e) {
    e.printStackTrace();
  }
catch (  XPathExpressionException e) {
    e.printStackTrace();
  }
catch (  ParserConfigurationException e) {
    e.printStackTrace();
  }
catch (  SAXException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return builder.build();
}
