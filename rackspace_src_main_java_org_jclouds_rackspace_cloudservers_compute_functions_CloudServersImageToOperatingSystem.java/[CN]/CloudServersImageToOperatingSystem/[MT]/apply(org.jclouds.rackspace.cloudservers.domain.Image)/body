{
  OsFamily osFamily=null;
  String osName=null;
  String osArch=null;
  String osVersion=null;
  String osDescription=from.getName();
  boolean is64Bit=true;
  if (from.getName().indexOf("Red Hat EL") != -1) {
    osFamily=OsFamily.RHEL;
  }
 else   if (from.getName().indexOf("Oracle EL") != -1) {
    osFamily=OsFamily.OEL;
  }
 else   if (from.getName().indexOf("Windows") != -1) {
    osFamily=OsFamily.WINDOWS;
    Matcher matcher=WINDOWS_PATTERN.matcher(from.getName());
    if (matcher.find()) {
      osVersion=ComputeServiceUtils.parseVersionOrReturnEmptyString(osFamily,matcher.group(1),osVersionMap);
      is64Bit=matcher.group(2).equals("x64");
    }
  }
 else {
    Matcher matcher=DEFAULT_PATTERN.matcher(from.getName());
    if (matcher.find()) {
      try {
        osFamily=OsFamily.fromValue(matcher.group(2).toLowerCase());
      }
 catch (      IllegalArgumentException e) {
        logger.debug("<< didn't match os(%s)",matcher.group(2));
      }
      osVersion=ComputeServiceUtils.parseVersionOrReturnEmptyString(osFamily,matcher.group(3),osVersionMap);
    }
  }
  return new OperatingSystem(osFamily,osName,osVersion,osArch,osDescription,is64Bit);
}
