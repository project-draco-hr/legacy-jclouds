{
  super(executor,allConnections,commandQueue,available,endPoint,maxConnectionReuse,maxSessionFailures);
  String host=checkNotNull(checkNotNull(endPoint,"endPoint").getHost(),String.format("Host null for endpoint %s",endPoint));
  int port=endPoint.getPort();
  if (endPoint.getScheme().equals("https")) {
    try {
      this.dispatch=provideSSLClientEventDispatch(clientHandler,params);
    }
 catch (    KeyManagementException e) {
      throw new RuntimeException("SSL error creating a connection to " + endPoint,e);
    }
catch (    NoSuchAlgorithmException e) {
      throw new RuntimeException("SSL error creating a connection to " + endPoint,e);
    }
    if (port == -1)     port=443;
  }
 else {
    this.dispatch=provideClientEventDispatch(clientHandler,params);
    if (port == -1)     port=80;
  }
  checkArgument(port > 0,String.format("Port %d not in range for endpoint %s",endPoint.getPort(),endPoint));
  this.ioReactor=ioReactor;
  this.sessionCallback=new NHttpClientConnectionPoolSessionRequestCallback();
  this.target=new InetSocketAddress(host,port);
  clientHandler.setEventListener(this);
}
