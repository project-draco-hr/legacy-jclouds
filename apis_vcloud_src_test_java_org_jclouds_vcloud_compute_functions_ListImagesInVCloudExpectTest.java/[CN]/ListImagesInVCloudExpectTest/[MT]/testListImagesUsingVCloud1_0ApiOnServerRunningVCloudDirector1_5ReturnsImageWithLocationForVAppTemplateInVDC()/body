{
  ComputeService compute=requestsSendResponses(ImmutableMap.<HttpRequest,HttpResponse>builder().put(versionsRequest,versionsResponseFromVCD1_5).put(version1_0LoginRequest,successfulVersion1_0LoginResponseFromVCD1_5WithSingleOrg).put(version1_0GetOrgRequest,successfulVersion1_0GetOrgResponseFromVCD1_5WithSingleTasksListVDCAndNetwork).put(version1_0GetCatalogRequest,successfulVersion1_0GetCatalogResponseFromVCD1_5WithSingleTemplate).put(version1_0GetCatalogItemRequest,successfulVersion1_0GetCatalogItemResponseFromVCD1_5ForTemplate).put(version1_0GetVDCRequest,successfulVersion1_0GetVDCResponseFromVCD1_5WithSingleTemplateAndNetwork).put(version1_0GetVAppTemplateRequest,successfulVersion1_0GetVAppTemplateResponseFromVCD1_5WithSingleVMAndVDCParent).put(version1_0GetOVFForVAppTemplateRequest,successfulVersion1_0GetOVFForVAppTemplateResponseFromVCD1_5WithSingleVM).build());
  Location provider=Iterables.getOnlyElement(compute.getContext().utils().injector().getInstance(JustProvider.class).get());
  Location orgLocation=new LocationBuilder().id(ENDPOINT + "/v1.0/org/" + orgId).scope(LocationScope.REGION).description("jclouds").parent(provider).build();
  Location vdcLocation=new LocationBuilder().id(ENDPOINT + "/v1.0/vdc/" + vdcId).scope(LocationScope.ZONE).description("orgVDC-jclouds-Tier1-PAYG").parent(orgLocation).build();
  Set<? extends Image> currentImages=compute.listImages();
  assertEquals(compute.listImages().size(),1);
  Image onlyImage=Iterables.get(currentImages,0);
  Image expectedImage=new ImageBuilder().ids(ENDPOINT + "/v1.0/vAppTemplate/" + templateId).uri(URI.create(ENDPOINT + "/v1.0/vAppTemplate/" + templateId)).name("UbuntuServer-x64-2GB").operatingSystem(new CIMOperatingSystem(OSType.UBUNTU_64,"",null,"Ubuntu Linux (64-bit)")).description("This is a special place-holder used for disconnected network interfaces.").defaultCredentials(LoginCredentials.builder().identity("root").build()).status(Image.Status.AVAILABLE).location(vdcLocation).build();
  assertEquals(onlyImage,expectedImage);
  assertEquals(onlyImage.getStatus(),Image.Status.AVAILABLE);
}
