{
  if (qName.equals("architecture")) {
    architecture=Architecture.fromValue(currentText.toString().trim());
  }
 else   if (qName.equals("imageId")) {
    imageId=currentText.toString().trim();
  }
 else   if (qName.equals("imageLocation")) {
    imageLocation=currentText.toString().trim();
  }
 else   if (qName.equals("imageOwnerId")) {
    imageOwnerId=currentText.toString().trim();
  }
 else   if (qName.equals("imageState")) {
    imageState=ImageState.fromValue(currentText.toString().trim());
  }
 else   if (qName.equals("imageType")) {
    imageType=ImageType.fromValue(currentText.toString().trim());
  }
 else   if (qName.equals("isPublic")) {
    isPublic=Boolean.parseBoolean(currentText.toString().trim());
  }
 else   if (qName.equals("kernelId")) {
    kernelId=currentText.toString().trim();
  }
 else   if (qName.equals("platform")) {
    platform=currentText.toString().trim();
  }
 else   if (qName.equals("productCode")) {
    productCodes.add(currentText.toString().trim());
  }
 else   if (qName.equals("productCodesSet")) {
    inProductCodes=false;
  }
 else   if (qName.equals("ramdiskId")) {
    ramdiskId=currentText.toString().trim();
  }
 else   if (qName.equals("item")) {
    if (!inProductCodes) {
      try {
        contents.add(new Image(architecture,imageId,imageLocation,imageOwnerId,imageState,imageType,isPublic,kernelId,platform,productCodes,ramdiskId));
      }
 catch (      NullPointerException e) {
        logger.warn(e,"malformed image: %s",imageId);
      }
      this.architecture=null;
      this.imageId=null;
      this.imageLocation=null;
      this.imageOwnerId=null;
      this.imageState=null;
      this.imageType=null;
      this.isPublic=false;
      this.kernelId=null;
      this.platform=null;
      this.productCodes=Sets.newHashSet();
      this.ramdiskId=null;
    }
  }
  currentText=new StringBuilder();
}
