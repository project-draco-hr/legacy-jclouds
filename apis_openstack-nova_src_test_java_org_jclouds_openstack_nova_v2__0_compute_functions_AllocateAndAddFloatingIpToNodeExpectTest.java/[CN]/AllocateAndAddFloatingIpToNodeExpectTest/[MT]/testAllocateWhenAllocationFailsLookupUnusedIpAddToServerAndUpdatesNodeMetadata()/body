{
  HttpResponse createFloatingIPResponse=HttpResponse.builder().statusCode(400).payload(payloadFromStringWithContentType("{\"badRequest\": {\"message\": \"AddressLimitExceeded: Address quota exceeded. You cannot create any more addresses\", \"code\": 400}}","application/json")).build();
  HttpRequest list=HttpRequest.builder().method("GET").endpoint(URI.create("https://az-1.region-a.geo-1.compute.hpcloudsvc.com/v1.1/3456/os-floating-ips")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse listResponseForUnassigned=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/floatingip_list.json")).build();
  HttpRequest addFloatingIPRequest=addFloatingIPForAddress("10.0.0.5");
  AllocateAndAddFloatingIpToNode fn=requestsSendResponses(ImmutableMap.<HttpRequest,HttpResponse>builder().put(keystoneAuthWithUsernameAndPasswordAndTenantName,responseWithKeystoneAccess).put(extensionsOfNovaRequest,extensionsOfNovaResponse).put(createFloatingIP,createFloatingIPResponse).put(addFloatingIPRequest,addFloatingIPResponse).put(list,listResponseForUnassigned).build()).getContext().utils().injector().getInstance(AllocateAndAddFloatingIpToNode.class);
  AtomicReference<NodeMetadata> nodeRef=Atomics.newReference(node);
  fn.apply(nodeRef);
  NodeMetadata node1=nodeRef.get();
  assertNotNull(node1);
  assertEquals(node1.getPublicAddresses(),ImmutableSet.of("10.0.0.5"));
}
