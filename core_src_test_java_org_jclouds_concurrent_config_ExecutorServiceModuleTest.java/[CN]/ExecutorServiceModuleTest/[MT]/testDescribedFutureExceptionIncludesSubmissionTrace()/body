{
  ExecutorServiceModule module=new ExecutorServiceModule(){
    @Override protected void configure(){
      bindConstant().annotatedWith(Names.named(Constants.PROPERTY_IO_WORKER_THREADS)).to(1);
      bindConstant().annotatedWith(Names.named(Constants.PROPERTY_USER_THREADS)).to(1);
      super.configure();
    }
  }
;
  Injector i=Guice.createInjector(module);
  Closer closer=i.getInstance(Closer.class);
  ExecutorService user=i.getInstance(Key.get(ExecutorService.class,Names.named(Constants.PROPERTY_USER_THREADS)));
  ExecutorService io=i.getInstance(Key.get(ExecutorService.class,Names.named(Constants.PROPERTY_IO_WORKER_THREADS)));
  ConfigurableRunner t1=new ConfigurableRunner();
  t1.failMessage="foo";
  t1.result="shouldn't happen";
  Future<Object> euc=performSubmissionInSeparateMethod1(user,t1);
  checkFutureGetFailsWith(euc,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performSubmissionInSeparateMethod1");
  Future<Object> eur=performSubmissionInSeparateMethod2(user,t1);
  checkFutureGetFailsWith(eur,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performSubmissionInSeparateMethod2");
  Future<Object> eic=performSubmissionInSeparateMethod1(io,t1);
  checkFutureGetFailsWith(eic,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performSubmissionInSeparateMethod1");
  Future<Object> eir=performSubmissionInSeparateMethod2(io,t1);
  checkFutureGetFailsWith(eir,"foo","testDescribedFutureExceptionIncludesSubmissionTrace","performSubmissionInSeparateMethod2");
  closer.close();
}
