{
  int OBJECT_COUNT=50;
  int OBJECT_SIZE=1024;
  byte[] dataBuffer=new byte[OBJECT_SIZE];
  String bucketName=getBucketName();
  try {
    S3Bucket bucket=new S3Bucket(bucketName);
    S3Object[] objects=new S3Object[OBJECT_COUNT];
    for (int i=0; i < objects.length; i++) {
      InputStream dataInputStream=new ByteArrayInputStream(dataBuffer);
      objects[i]=new S3Object("testMultiServiceObject" + i);
      objects[i].setDataInputStream(dataInputStream);
      objects[i].setContentLength(dataBuffer.length);
    }
    final long[] countOfUploadCompletions=new long[1];
    S3ServiceEventListener eventListener=new S3ServiceEventAdaptor(){
      @Override public synchronized void s3ServiceEventPerformed(      CreateObjectsEvent event){
        if (CreateObjectsEvent.EVENT_STARTED == event.getEventCode()) {
        }
 else         if (CreateObjectsEvent.EVENT_COMPLETED == event.getEventCode()) {
        }
 else         if (CreateObjectsEvent.EVENT_ERROR == event.getEventCode()) {
          fail("Upload should not result in error",event.getErrorCause());
        }
 else         if (CreateObjectsEvent.EVENT_IGNORED_ERRORS == event.getEventCode()) {
          fail("Upload should not result in ignored errors: " + event.getIgnoredErrors());
        }
 else         if (CreateObjectsEvent.EVENT_CANCELLED == event.getEventCode()) {
          fail("Upload should not be cancelled");
        }
 else         if (CreateObjectsEvent.EVENT_IN_PROGRESS == event.getEventCode()) {
          countOfUploadCompletions[0]=event.getThreadWatcher().getCompletedThreads();
        }
      }
    }
;
    S3ServiceMulti multiService=new S3ServiceMulti(service,eventListener);
    multiService.putObjects(bucket,objects);
    assertEquals(countOfUploadCompletions[0],OBJECT_COUNT);
    org.jclouds.aws.s3.domain.S3Bucket theBucket=client.listBucket(bucketName).get(10,TimeUnit.SECONDS);
    assertEquals(theBucket.getSize(),OBJECT_COUNT);
  }
  finally {
    returnBucket(bucketName);
  }
}
