{
  super.setupClient();
  Module module=new AbstractModule(){
    @Override protected void configure(){
      bindProperties(binder(),setupProperties());
      bind(String.class).annotatedWith(Identity.class).toInstance(identity);
      bind(new TypeLiteral<Supplier<User>>(){
      }
).annotatedWith(Memoized.class).to(GetCurrentUser.class).in(Scopes.SINGLETON);
      bind(new TypeLiteral<Supplier<Map<Long,Network>>>(){
      }
).annotatedWith(Memoized.class).to(NetworksForCurrentUser.class).in(Scopes.SINGLETON);
      bind(new TypeLiteral<Map<String,Credentials>>(){
      }
).toInstance(credentialStore);
      bind(CloudStackClient.class).toInstance(context.getApi());
      install(new FactoryModuleBuilder().build(StaticNATVirtualMachineInNetwork.Factory.class));
    }
    @SuppressWarnings("unused") @Provides @Singleton protected Predicate<Long> jobComplete(    JobComplete jobComplete){
      return new RetryablePredicate<Long>(jobComplete,1200,1,5,TimeUnit.SECONDS);
    }
    @SuppressWarnings("unused") @Provides @Singleton protected LoadingCache<Long,Set<IPForwardingRule>> getIPForwardingRuleByVirtualMachine(    GetIPForwardingRulesByVirtualMachine getIPForwardingRule){
      return CacheBuilder.newBuilder().build(getIPForwardingRule);
    }
  }
;
  adapter=Guice.createInjector(module,new Log4JLoggingModule()).getInstance(CloudStackComputeServiceAdapter.class);
  keyPairName=prefix + "-adapter-test-keypair";
  try {
    keyPair=ComputeTestUtils.setupKeyPair();
  }
 catch (  IOException e) {
    fail("Unable to create keypair",e);
  }
}
