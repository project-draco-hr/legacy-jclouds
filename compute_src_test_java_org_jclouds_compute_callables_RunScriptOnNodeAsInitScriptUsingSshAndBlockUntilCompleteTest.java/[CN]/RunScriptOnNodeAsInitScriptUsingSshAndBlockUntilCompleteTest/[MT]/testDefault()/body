{
  Statement command=exec("doFoo");
  NodeMetadata node=new NodeMetadataBuilder().ids("id").status(Status.RUNNING).credentials(LoginCredentials.builder().user("tester").password("testpassword!").build()).build();
  SshClient sshClient=createMock(SshClient.class);
  InitScript init=InitScript.builder().name("jclouds-script-0").home("/tmp/jclouds-script-0").run(command).build();
  sshClient.connect();
  sshClient.put("/tmp/init-jclouds-script-0",init.render(OsFamily.UNIX));
  expect(sshClient.getUsername()).andReturn("tester").atLeastOnce();
  expect(sshClient.getHostAddress()).andReturn("somewhere.example.com").atLeastOnce();
  expect(sshClient.exec("chmod 755 /tmp/init-jclouds-script-0")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("ln -fs /tmp/init-jclouds-script-0 jclouds-script-0")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("/tmp/init-jclouds-script-0 init")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("sudo /tmp/init-jclouds-script-0 start")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("/tmp/init-jclouds-script-0 status")).andReturn(new ExecResponse("","",1)).times(1);
  expect(sshClient.exec("/tmp/init-jclouds-script-0 stdout")).andReturn(new ExecResponse("out","",0));
  expect(sshClient.exec("/tmp/init-jclouds-script-0 stderr")).andReturn(new ExecResponse("err","",0));
  expect(sshClient.exec("/tmp/init-jclouds-script-0 exitstatus")).andReturn(new ExecResponse("0","",0));
  sshClient.disconnect();
  replay(sshClient);
  RunScriptOnNodeAsInitScriptUsingSshAndBlockUntilComplete testMe=new RunScriptOnNodeAsInitScriptUsingSshAndBlockUntilComplete(statusFactory,timeouts,Functions.forMap(ImmutableMap.of(node,sshClient)),eventBus,InitScriptConfigurationForTasks.create().appendIncrementingNumberToAnonymousTaskNames(),node,command,new RunScriptOptions());
  assertEquals(testMe.getInitFile(),"/tmp/init-jclouds-script-0");
  assertEquals(testMe.getNode(),node);
  assertEquals(testMe.getStatement(),init);
  testMe.init();
  assertEquals(testMe.call(),new ExecResponse("out","err",0));
  verify(sshClient);
}
