{
  Statement command=exec("doFoo");
  NodeMetadata node=new NodeMetadataBuilder().ids("id").state(NodeState.RUNNING).credentials(new Credentials("tester","notalot")).build();
  SshClient sshClient=createMock(SshClient.class);
  InitBuilder init=new InitBuilder("jclouds-script-0","/tmp/jclouds-script-0","/tmp/jclouds-script-0",ImmutableMap.<String,String>of(),ImmutableSet.of(command));
  sshClient.connect();
  sshClient.put("/tmp/init-jclouds-script-0",init.render(OsFamily.UNIX));
  expect(sshClient.getUsername()).andReturn("tester").atLeastOnce();
  expect(sshClient.getHostAddress()).andReturn("somewhere.example.com").atLeastOnce();
  expect(sshClient.exec("chmod 755 /tmp/init-jclouds-script-0")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("ln -fs /tmp/init-jclouds-script-0 jclouds-script-0")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("./jclouds-script-0 init")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("sudo ./jclouds-script-0 start")).andReturn(new ExecResponse("","",0));
  expect(sshClient.exec("./jclouds-script-0 status")).andReturn(new ExecResponse("","",1));
  expect(sshClient.exec("./jclouds-script-0 tail")).andReturn(new ExecResponse("out","",0));
  expect(sshClient.exec("./jclouds-script-0 tailerr")).andReturn(new ExecResponse("err","",0));
  sshClient.disconnect();
  replay(sshClient);
  RunScriptOnNodeAsInitScriptUsingSshAndBlockUntilComplete testMe=new RunScriptOnNodeAsInitScriptUsingSshAndBlockUntilComplete(statusFactory,timeouts,Functions.forMap(ImmutableMap.of(node,sshClient)),InitScriptConfigurationForTasks.create().appendIncrementingNumberToAnonymousTaskNames(),node,command,new RunScriptOptions());
  assertEquals(testMe.getInitFile(),"/tmp/init-jclouds-script-0");
  assertEquals(testMe.getNode(),node);
  assertEquals(testMe.getStatement(),init);
  testMe.init();
  assertEquals(testMe.call(),new ExecResponse("out","err",0));
  verify(sshClient);
}
