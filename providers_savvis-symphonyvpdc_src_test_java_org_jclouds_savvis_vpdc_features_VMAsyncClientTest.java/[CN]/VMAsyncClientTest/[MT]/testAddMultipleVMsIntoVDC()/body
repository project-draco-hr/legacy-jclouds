{
  Method method=VMAsyncClient.class.getMethod("addMultipleVMsIntoVDC",URI.class,List.class);
  CIMOperatingSystem os=Iterables.find(injector.getInstance(Key.get(new TypeLiteral<Set<CIMOperatingSystem>>(){
  }
)),new Predicate<CIMOperatingSystem>(){
    @Override public boolean apply(    CIMOperatingSystem arg0){
      return arg0.getOsType() == OSType.RHEL_64;
    }
  }
);
  Network network=Network.builder().name("VM Tier01").build();
  List<VMSpec> vmSpecs=new ArrayList<VMSpec>();
  vmSpecs.add(VMSpec.builder().name("Test VM").operatingSystem(os).network(network).build());
  HttpRequest request=processor.createRequest(method,URI.create("https://api.symphonyvpdc.savvis.net/rest/api/v0.8/org/11/vdc/22"),vmSpecs);
  assertRequestLineEquals(request,"GET https://api.symphonyvpdc.savvis.net/rest/api/v0.8/org/11/vdc/22/vApp/ HTTP/1.1");
  assertNonPayloadHeadersEqual(request,"");
  assertPayloadEquals(request,Strings2.toStringAndClose(getClass().getResourceAsStream("/vm-multiple-default.xml")),"application/xml",false);
  assertResponseParserClassEquals(method,request,ParseSax.class);
  assertSaxResponseParserClassEquals(method,TasksListHandler.class);
  assertExceptionParserClassEquals(method,MapHttp4xxCodesToExceptions.class);
  checkFilters(request);
}
