{
  BindUserMetadataToHeadersWithPrefix mdBinder=createMock(BindUserMetadataToHeadersWithPrefix.class);
  AzureBlobToBlob object2Blob=createMock(AzureBlobToBlob.class);
  HttpRequest request=createMock(HttpRequest.class);
  AzureBlob object=createMock(AzureBlob.class);
  Payload payload=createMock(Payload.class);
  Blob blob=createMock(Blob.class);
  MutableBlobProperties md=createMock(MutableBlobProperties.class);
  Multimap<String,String> headers=createMock(Multimap.class);
  expect(object.getPayload()).andReturn(payload).atLeastOnce();
  expect(payload.getContentLength()).andReturn(1024l).atLeastOnce();
  expect(object2Blob.apply(object)).andReturn(blob);
  mdBinder.bindToRequest(request,blob);
  expect(object.getProperties()).andReturn(md).atLeastOnce();
  expect(md.getType()).andReturn(BlobType.BLOCK_BLOB).atLeastOnce();
  expect(request.getHeaders()).andReturn(headers).atLeastOnce();
  expect(headers.put("x-ms-blob-type","BlockBlob")).andReturn(true);
  expect(md.getContentLanguage()).andReturn("en").atLeastOnce();
  expect(headers.put("Content-Language","en")).andReturn(true);
  expect(md.getContentEncoding()).andReturn("gzip").atLeastOnce();
  expect(headers.put("Content-Encoding","gzip")).andReturn(true);
  replay(headers);
  replay(payload);
  replay(mdBinder);
  replay(object2Blob);
  replay(request);
  replay(object);
  replay(blob);
  replay(md);
  BindAzureBlobToPayload binder=new BindAzureBlobToPayload(object2Blob,mdBinder);
  binder.bindToRequest(request,object);
  verify(headers);
  verify(payload);
  verify(mdBinder);
  verify(object2Blob);
  verify(request);
  verify(object);
  verify(blob);
  verify(md);
}
