{
  Matcher versionMatcher=SEMANTIC_VERSION_PATTERN.matcher(version);
  checkArgument(versionMatcher.matches(),"Version '%s' did not match expected pattern '%s'",version,SEMANTIC_VERSION_PATTERN);
  this.version=version;
  majorVersion=Integer.valueOf(versionMatcher.group(1));
  minorVersion=Integer.valueOf(versionMatcher.group(2));
  patchVersion=Integer.valueOf(versionMatcher.group(3));
  String alphaOrReleaseCandidateVersionIfPresent=versionMatcher.group(4);
  if (alphaOrReleaseCandidateVersionIfPresent != null) {
    Integer alphaOrReleaseCandidateVersion=Integer.valueOf(versionMatcher.group(5));
    if (alphaOrReleaseCandidateVersionIfPresent.equals(ALPHA_VERSION_IDENTIFIER)) {
      alpha=true;
      alphaVersion=alphaOrReleaseCandidateVersion;
      releaseCandidate=false;
      releaseCandidateVersion=null;
    }
 else {
      alpha=false;
      alphaVersion=null;
      releaseCandidate=true;
      releaseCandidateVersion=alphaOrReleaseCandidateVersion;
    }
  }
 else {
    alpha=false;
    alphaVersion=null;
    releaseCandidate=false;
    releaseCandidateVersion=null;
  }
  snapshot=version.endsWith("-SNAPSHOT");
}
