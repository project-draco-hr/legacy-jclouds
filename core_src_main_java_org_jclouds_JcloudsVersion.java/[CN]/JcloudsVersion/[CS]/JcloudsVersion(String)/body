{
  Matcher versionMatcher=SEMANTIC_VERSION_PATTERN.matcher(version);
  checkArgument(versionMatcher.matches(),"Version '%s' did not match expected pattern '%s'",version,SEMANTIC_VERSION_PATTERN);
  this.version=version;
  majorVersion=Integer.valueOf(versionMatcher.group(1));
  minorVersion=Integer.valueOf(versionMatcher.group(2));
  patchVersion=Integer.valueOf(versionMatcher.group(3));
  String alphaOrBetaOrReleaseCandidateVersionIfPresent=versionMatcher.group(4);
  if (alphaOrBetaOrReleaseCandidateVersionIfPresent != null) {
    Integer alphaOrBetaOrReleaseCandidateVersion=Integer.valueOf(versionMatcher.group(5));
    if (alphaOrBetaOrReleaseCandidateVersionIfPresent.equals(ALPHA_VERSION_IDENTIFIER)) {
      alpha=true;
      alphaVersion=alphaOrBetaOrReleaseCandidateVersion;
      beta=false;
      betaVersion=null;
      releaseCandidate=false;
      releaseCandidateVersion=null;
    }
 else     if (alphaOrBetaOrReleaseCandidateVersionIfPresent.equals(BETA_VERSION_IDENTIFIER)) {
      alpha=false;
      alphaVersion=null;
      beta=true;
      betaVersion=alphaOrBetaOrReleaseCandidateVersion;
      releaseCandidate=false;
      releaseCandidateVersion=null;
    }
 else {
      alpha=false;
      alphaVersion=null;
      beta=false;
      betaVersion=null;
      releaseCandidate=true;
      releaseCandidateVersion=alphaOrBetaOrReleaseCandidateVersion;
    }
  }
 else {
    alpha=false;
    alphaVersion=null;
    beta=false;
    betaVersion=null;
    releaseCandidate=false;
    releaseCandidateVersion=null;
  }
  snapshot=version.endsWith("-SNAPSHOT");
}
