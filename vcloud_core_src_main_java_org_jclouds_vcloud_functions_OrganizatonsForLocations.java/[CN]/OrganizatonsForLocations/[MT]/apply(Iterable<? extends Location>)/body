{
  return transformParallel(Sets.newLinkedHashSet(transform(filter(from,new Predicate<Location>(){
    @Override public boolean apply(    Location input){
      return input.getScope() == LocationScope.ZONE;
    }
  }
),new Function<Location,URI>(){
    @Override public URI apply(    Location from){
      return VCloudLocation.class.cast(from.getParent()).getResource().getId();
    }
  }
)),new Function<URI,Future<Organization>>(){
    @SuppressWarnings("unchecked") @Override public Future<Organization> apply(    URI from){
      return (Future<Organization>)aclient.getOrganization(from);
    }
  }
,executor,null,logger,"organizations for uris");
}
