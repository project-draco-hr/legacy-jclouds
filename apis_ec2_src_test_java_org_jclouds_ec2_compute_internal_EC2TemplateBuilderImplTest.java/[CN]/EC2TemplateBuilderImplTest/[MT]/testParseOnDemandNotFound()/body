{
  Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(region));
  Supplier<Set<? extends Image>> images=Suppliers.<Set<? extends Image>>ofInstance(ImmutableSet.<Image>of());
  Supplier<Set<? extends Hardware>> sizes=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(c1_medium().build()));
  Location defaultLocation=createMock(Location.class);
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  TemplateOptions defaultOptions=createMock(TemplateOptions.class);
  Image knownImage=createMock(Image.class);
  expect(knownImage.getId()).andReturn("region/ami").anyTimes();
  expect(knownImage.getProviderId()).andReturn("ami").anyTimes();
  expect(knownImage.getLocation()).andReturn(region).anyTimes();
  expect(defaultLocation.getId()).andReturn("region");
  expect(optionsProvider.get()).andReturn(defaultOptions);
  replay(knownImage);
  replay(defaultOptions);
  replay(defaultLocation);
  replay(optionsProvider);
  replay(templateBuilderProvider);
  TemplateBuilderImpl template=createTemplateBuilder(knownImage,locations,images,sizes,defaultLocation,optionsProvider,templateBuilderProvider);
  assertEquals(template.imageId("region/bad").build().getImage(),knownImage);
  verify(knownImage);
  verify(defaultOptions);
  verify(defaultLocation);
  verify(optionsProvider);
  verify(templateBuilderProvider);
}
