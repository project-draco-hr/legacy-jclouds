{
  Location location=new LocationImpl(LocationScope.REGION,"region","region",null);
  Supplier<Set<? extends Location>> locations=Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(location));
  Supplier<Set<? extends Image>> images=Suppliers.<Set<? extends Image>>ofInstance(Sets.<Image>newLinkedHashSet());
  Supplier<Set<? extends Hardware>> sizes=Suppliers.<Set<? extends Hardware>>ofInstance(ImmutableSet.<Hardware>of(c1_medium().build()));
  Provider<TemplateOptions> optionsProvider=createMock(Provider.class);
  Provider<TemplateBuilder> templateBuilderProvider=createMock(Provider.class);
  TemplateOptions defaultOptions=createMock(TemplateOptions.class);
  Image knownImage=createMock(Image.class);
  OperatingSystem os=createMock(OperatingSystem.class);
  expect(optionsProvider.get()).andReturn(defaultOptions);
  expect(knownImage.getId()).andReturn("region/ami").atLeastOnce();
  expect(knownImage.getLocation()).andReturn(location).atLeastOnce();
  expect(knownImage.getName()).andReturn(null).atLeastOnce();
  expect(knownImage.getDescription()).andReturn(null).atLeastOnce();
  expect(knownImage.getVersion()).andReturn(null).atLeastOnce();
  expect(knownImage.getOperatingSystem()).andReturn(os).atLeastOnce();
  expect(os.getName()).andReturn(null).atLeastOnce();
  expect(os.getVersion()).andReturn(null).atLeastOnce();
  expect(os.getFamily()).andReturn(null).atLeastOnce();
  expect(os.getDescription()).andReturn(null).atLeastOnce();
  expect(os.getArch()).andReturn(null).atLeastOnce();
  expect(os.is64Bit()).andReturn(false).atLeastOnce();
  replay(knownImage);
  replay(os);
  replay(defaultOptions);
  replay(optionsProvider);
  replay(templateBuilderProvider);
  TemplateBuilderImpl template=createTemplateBuilder(knownImage,locations,images,sizes,location,optionsProvider,templateBuilderProvider);
  assertEquals(template.imageId("region/ami").build().getImage(),knownImage);
  verify(knownImage);
  verify(os);
  verify(defaultOptions);
  verify(optionsProvider);
  verify(templateBuilderProvider);
}
