{
  Template template=computeService.templateBuilder().osFamily(OsFamily.WINDOWS).os64Bit(true).imageNameMatches("Windows_Server-2008-R2_SP1-English-64Bit-Base-").hardwareId(InstanceType.M1_LARGE).options(TemplateOptions.Builder.inboundPorts(3389)).build();
  Set<? extends NodeMetadata> nodes=computeService.createNodesInGroup("test",1,template);
  NodeMetadata node=Iterables.getOnlyElement(nodes);
  try {
    Predicate<String> passwordReady=new Predicate<String>(){
      @Override public boolean apply(      @Nullable String s){
        if (Strings.isNullOrEmpty(s))         return false;
        PasswordData data=client.getPasswordDataInRegion(null,s);
        if (data == null)         return false;
        return !Strings.isNullOrEmpty(data.getPasswordData());
      }
    }
;
    RetryablePredicate<String> passwordReadyRetryable=new RetryablePredicate<String>(passwordReady,600,10,TimeUnit.SECONDS);
    assertTrue(passwordReadyRetryable.apply(node.getProviderId()));
    PasswordDataAndPrivateKey dataAndKey=new PasswordDataAndPrivateKey(client.getPasswordDataInRegion(null,node.getProviderId()),node.getCredentials().getPrivateKey());
    WindowsLoginCredentialsFromEncryptedData f=view.getUtils().getInjector().getInstance(WindowsLoginCredentialsFromEncryptedData.class);
    LoginCredentials credentials=f.apply(dataAndKey);
    assertEquals(credentials.getUser(),"Administrator");
    assertFalse(Strings.isNullOrEmpty(credentials.getPassword()));
  }
  finally {
    computeService.destroyNode(node.getId());
  }
}
