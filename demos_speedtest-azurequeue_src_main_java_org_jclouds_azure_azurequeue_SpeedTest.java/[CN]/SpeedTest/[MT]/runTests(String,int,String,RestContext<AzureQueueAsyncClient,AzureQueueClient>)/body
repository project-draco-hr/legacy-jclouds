{
  String message="1";
  long timeOut=messageCount * 200;
  int complete=0;
  int errors=0;
  long start=System.currentTimeMillis();
  Set<ListenableFuture<Void>> responses=Sets.newHashSet();
  for (int i=0; i < messageCount; i++) {
    responses.add(context.getAsyncApi().putMessage(queueName,message));
  }
  do {
    Set<ListenableFuture<Void>> retries=Sets.newHashSet();
    for (    ListenableFuture<Void> response : responses) {
      try {
        response.get(100,TimeUnit.MILLISECONDS);
        complete++;
      }
 catch (      ExecutionException e) {
        System.err.println(e.getMessage());
        errors++;
      }
catch (      TimeoutException e) {
        retries.add(response);
      }
    }
    responses=Sets.newHashSet(retries);
  }
 while (responses.size() > 0 && System.currentTimeMillis() < start + timeOut);
  long duration=System.currentTimeMillis() - start;
  if (duration > timeOut)   System.out.printf("TIMEOUT: context: %s, rate: %f messages/second%n",contextName,((double)complete) / (duration / 1000.0));
 else   System.out.printf("COMPLETE: context: %s, rate: %f messages/second%n",contextName,((double)complete) / (duration / 1000.0));
  System.gc();
  System.out.println("pausing 5 seconds before the next run");
  Thread.sleep(5000);
}
