{
  checkNotNull(options,"options");
  logger.debug(">> instantiating vApp vDC(%s) name(%s) template(%s) options(%s) ",vDCId,name,templateId,options);
  VApp vAppResponse=client.instantiateVAppTemplateInVDC(vDCId,name,templateId,options);
  logger.debug("<< instantiated VApp(%s)",vAppResponse.getId());
  logger.debug(">> deploying vApp(%s)",vAppResponse.getId());
  Task task=client.deployVApp(vAppResponse.getId());
  if (!taskTester.apply(task.getId())) {
    throw new TaskException("deploy",vAppResponse,task);
  }
  logger.debug("<< deployed vApp(%s)",vAppResponse.getId());
  logger.debug(">> powering vApp(%s)",vAppResponse.getId());
  try {
    task=client.powerOnVApp(vAppResponse.getId());
    if (!taskTester.apply(task.getId())) {
      throw new TaskException("powerOn",vAppResponse,task);
    }
  }
 catch (  HttpResponseException e) {
    if (e.getResponse().getStatusCode() == 400 && client.getVApp(vAppResponse.getId()).getStatus() == VAppStatus.ON) {
    }
 else {
      throw e;
    }
  }
  logger.debug("<< on vApp(%s)",vAppResponse.getId());
  Map<String,String> response=parseResponse(vAppResponse);
  checkState(response.containsKey("id"),"bad configuration: [id] should be in response");
  checkState(response.containsKey("username"),"bad configuration: [username] should be in response");
  checkState(response.containsKey("password"),"bad configuration: [password] should be in response");
  return response;
}
