{
  if (!storageStrategy.containerExists(container))   return immediateFailedFuture(cnfe(container));
  Iterable<String> blobBelongingToContainer=null;
  try {
    blobBelongingToContainer=storageStrategy.getBlobKeysInsideContainer(container);
  }
 catch (  IOException e) {
    logger.error(e,"An error occurred loading blobs contained into container %s",container);
    Throwables.propagate(e);
  }
  SortedSet<StorageMetadata> contents=newTreeSet(transform(blobBelongingToContainer,new Function<String,StorageMetadata>(){
    public StorageMetadata apply(    String key){
      Blob oldBlob=loadBlob(container,key);
      checkState(oldBlob != null,"blob " + key + " is not present although it was in the list of "+ container);
      checkState(oldBlob.getMetadata() != null,"blob " + container + "/"+ key+ " has no metadata");
      MutableBlobMetadata md=copy(oldBlob.getMetadata());
      String directoryName=ifDirectoryReturnName.execute(md);
      if (directoryName != null) {
        md.setName(directoryName);
        md.setType(StorageType.RELATIVE_PATH);
      }
      return md;
    }
  }
));
  String marker=null;
  if (options != null) {
    if (options.getMarker() != null) {
      final String finalMarker=options.getMarker();
      StorageMetadata lastMarkerMetadata=find(contents,new Predicate<StorageMetadata>(){
        public boolean apply(        StorageMetadata metadata){
          return metadata.getName().compareTo(finalMarker) > 0;
        }
      }
);
      contents=contents.tailSet(lastMarkerMetadata);
    }
    final String prefix=options.getDir();
    if (prefix != null) {
      contents=newTreeSet(filter(contents,new Predicate<StorageMetadata>(){
        public boolean apply(        StorageMetadata o){
          return (o != null && o.getName().startsWith(prefix) && !o.getName().equals(prefix));
        }
      }
));
    }
    int maxResults=options.getMaxResults() != null ? options.getMaxResults() : 1000;
    if (!contents.isEmpty()) {
      StorageMetadata lastElement=contents.last();
      contents=newTreeSet(Iterables.limit(contents,maxResults));
      if (!contents.contains(lastElement)) {
        marker=contents.last().getName();
      }
    }
    final String delimiter=options.isRecursive() ? null : "/";
    if (delimiter != null) {
      SortedSet<String> commonPrefixes=newTreeSet(transform(contents,new CommonPrefixes(prefix,delimiter)));
      commonPrefixes.remove(CommonPrefixes.NO_PREFIX);
      contents=newTreeSet(filter(contents,new DelimiterFilter(prefix,delimiter)));
      Iterables.<StorageMetadata>addAll(contents,transform(commonPrefixes,new Function<String,StorageMetadata>(){
        public StorageMetadata apply(        String o){
          MutableStorageMetadata md=new MutableStorageMetadataImpl();
          md.setType(StorageType.RELATIVE_PATH);
          md.setName(o);
          return md;
        }
      }
));
    }
    if (!options.isDetailed()) {
      for (      StorageMetadata md : contents) {
        md.getUserMetadata().clear();
      }
    }
  }
  return Futures.<PageSet<? extends StorageMetadata>>immediateFuture(new PageSetImpl<StorageMetadata>(contents,marker));
}
