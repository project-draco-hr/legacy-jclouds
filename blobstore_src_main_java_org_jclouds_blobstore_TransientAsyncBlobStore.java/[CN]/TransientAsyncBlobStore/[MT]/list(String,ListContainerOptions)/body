{
  final Map<String,Blob> realContents=getContainerToBlobs().get(container);
  if (realContents == null)   return immediateFailedFuture(cnfe(container));
  SortedSet<StorageMetadata> contents=newTreeSet(transform(realContents.keySet(),new Function<String,StorageMetadata>(){
    public StorageMetadata apply(    String key){
      Blob oldBlob=realContents.get(key);
      checkState(oldBlob != null,"blob " + key + " is not present although it was in the list of "+ container);
      checkState(oldBlob.getMetadata() != null,"blob " + container + "/"+ key+ " has no metadata");
      MutableBlobMetadata md=copy(oldBlob.getMetadata());
      String directoryName=ifDirectoryReturnName.execute(md);
      if (directoryName != null) {
        md.setName(directoryName);
        md.setType(StorageType.RELATIVE_PATH);
      }
      return md;
    }
  }
));
  if (options.getMarker() != null) {
    final String finalMarker=options.getMarker();
    StorageMetadata lastMarkerMetadata=find(contents,new Predicate<StorageMetadata>(){
      public boolean apply(      StorageMetadata metadata){
        return metadata.getName().compareTo(finalMarker) >= 0;
      }
    }
);
    contents=contents.tailSet(lastMarkerMetadata);
    if (finalMarker.equals(lastMarkerMetadata.getName())) {
      contents.remove(lastMarkerMetadata);
    }
  }
  final String prefix=options.getDir();
  if (prefix != null) {
    contents=newTreeSet(filter(contents,new Predicate<StorageMetadata>(){
      public boolean apply(      StorageMetadata o){
        return (o != null && o.getName().startsWith(prefix) && !o.getName().equals(prefix));
      }
    }
));
  }
  String marker=null;
  Integer maxResults=options.getMaxResults() != null ? options.getMaxResults() : 1000;
  if (contents.size() > 0) {
    SortedSet<StorageMetadata> contentsSlice=firstSliceOfSize(contents,maxResults);
    if (!contentsSlice.contains(contents.last())) {
      marker=contentsSlice.last().getName();
    }
 else {
      marker=null;
    }
    contents=contentsSlice;
  }
  final String delimiter=options.isRecursive() ? null : "/";
  if (delimiter != null) {
    SortedSet<String> commonPrefixes=null;
    Iterable<String> iterable=transform(contents,new CommonPrefixes(prefix != null ? prefix : null,delimiter));
    commonPrefixes=iterable != null ? newTreeSet(iterable) : new TreeSet<String>();
    commonPrefixes.remove(CommonPrefixes.NO_PREFIX);
    contents=newTreeSet(filter(contents,new DelimiterFilter(prefix != null ? prefix : null,delimiter)));
    Iterables.<StorageMetadata>addAll(contents,transform(commonPrefixes,new Function<String,StorageMetadata>(){
      public StorageMetadata apply(      String o){
        MutableStorageMetadata md=new MutableStorageMetadataImpl();
        md.setType(StorageType.RELATIVE_PATH);
        md.setName(o);
        return md;
      }
    }
));
  }
  if (!options.isDetailed()) {
    for (    StorageMetadata md : contents) {
      md.getUserMetadata().clear();
    }
  }
  return Futures.<PageSet<? extends StorageMetadata>>immediateFuture(new PageSetImpl<StorageMetadata>(contents,marker));
}
