{
  return Guice.createInjector(new SaxParserModule(),new AbstractModule(){
    @Override protected void configure(){
      Properties props=new Properties();
      Names.bindProperties(binder(),checkNotNull(new VCloudPropertiesBuilder(props).build(),"properties"));
      bind(new TypeLiteral<Function<ReferenceType,Location>>(){
      }
).to(new TypeLiteral<FindLocationForResource>(){
      }
);
      bind(new TypeLiteral<Function<VApp,Hardware>>(){
      }
).to(new TypeLiteral<HardwareForVApp>(){
      }
);
      bind(ResourceAllocationSettingDataHandler.class).to(VCloudResourceAllocationSettingDataHandler.class);
    }
    @SuppressWarnings("unused") @Memoized @Singleton @Provides Supplier<Set<? extends Location>> supplyLocations(){
      return Suppliers.<Set<? extends Location>>ofInstance(ImmutableSet.<Location>of(location));
    }
    @SuppressWarnings("unused") @Singleton @Provides Map<String,Credentials> supplyCreds(){
      return Maps.newConcurrentMap();
    }
    @SuppressWarnings("unused") @Singleton @Provides protected Map<Status,NodeState> provideVAppStatusToNodeState(){
      return VCloudComputeServiceDependenciesModule.VAPPSTATUS_TO_NODESTATE;
    }
  }
);
}
