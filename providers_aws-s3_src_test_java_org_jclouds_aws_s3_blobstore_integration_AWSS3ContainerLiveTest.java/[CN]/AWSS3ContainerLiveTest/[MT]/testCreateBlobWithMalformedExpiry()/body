{
  final ContentMetadataCodec contentMetadataCodec=new DefaultContentMetadataCodec(){
    @Override protected DateCodec getExpiresDateCodec(){
      return new DateCodec(){
        @Override public Date toDate(        String date) throws ParseException {
          return DateCodecs.rfc1123().toDate(date);
        }
        @Override public String toString(        Date date){
          return "wrong";
        }
      }
;
    }
  }
;
  Module customModule=new AbstractModule(){
    @Override protected void configure(){
      bind(ContentMetadataCodec.class).toInstance(contentMetadataCodec);
    }
  }
;
  Iterable<Module> modules=Iterables.concat(setupModules(),ImmutableList.of(customModule));
  BlobStoreContext naughtyBlobStoreContext=createView(setupProperties(),modules);
  BlobStore naughtyBlobStore=naughtyBlobStoreContext.getBlobStore();
  final String containerName=getScratchContainerName();
  try {
    final String blobName="hello";
    naughtyBlobStore.createContainerInLocation(null,containerName,publicRead());
    naughtyBlobStore.putBlob(containerName,naughtyBlobStore.blobBuilder(blobName).payload(TEST_STRING).expires(new Date(System.currentTimeMillis() + 60 * 1000)).build());
    assertConsistencyAwareBlobExpiryMetadata(containerName,blobName,new Date(0));
  }
  finally {
    recycleContainer(containerName);
  }
}
