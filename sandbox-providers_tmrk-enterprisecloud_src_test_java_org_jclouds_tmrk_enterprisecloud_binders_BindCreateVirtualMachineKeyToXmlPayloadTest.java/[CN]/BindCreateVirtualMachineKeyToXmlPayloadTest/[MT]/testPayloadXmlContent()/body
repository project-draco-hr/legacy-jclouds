{
  String expected="<CreateVirtualMachine name='VirtualMachine2'>" + "<ProcessorCount>2</ProcessorCount>" + "<Memory><Unit>MB</Unit><Value>1024</Value></Memory>"+ "<Layout><Group href='/cloudapi/ecloud/layoutgroups/308' type='application/vnd.tmrk.cloud.layoutGroup'/></Layout>"+ "<Description>This is my first VM</Description>"+ "<Tags><Tag>Web</Tag></Tags>"+ "<LinuxCustomization>"+ "<NetworkSettings>"+ "<NetworkAdapterSettings>"+ "<NetworkAdapter>"+ "<Network href='/cloudapi/ecloud/networks/3936' name='10.146.204.64/28' type='application/vnd.tmrk.cloud.network'/>"+ "<IpAddress>10.146.204.68</IpAddress>"+ "</NetworkAdapter>"+ "</NetworkAdapterSettings>"+ "</NetworkSettings>"+ "<SshKey href='/cloudapi/ecloud/admin/sshkeys/77' type='application/vnd.tmrk.cloud.admin.sshKey'/>"+ "</LinuxCustomization>"+ "<PoweredOn>false</PoweredOn>"+ "<Template href='/cloudapi/ecloud/templates/6/computepools/89' type='application/vnd.tmrk.cloud.template'/>"+ "</CreateVirtualMachine>";
  HttpRequest request=new HttpRequest("GET",URI.create("http://test"));
  BindCreateVirtualMachineKeyToXmlPayload binder=injector.getInstance(BindCreateVirtualMachineKeyToXmlPayload.class);
  CreateVirtualMachine.Builder builder=CreateVirtualMachine.builder();
  builder.name("VirtualMachine2").processorCount(2).memory(ResourceCapacity.builder().value(1024).unit("MB").build());
  AnonymousResource group=AnonymousResource.builder().href(URI.create("/cloudapi/ecloud/layoutgroups/308")).type("application/vnd.tmrk.cloud.layoutGroup").build();
  builder.layout(LayoutRequest.builder().group(group).build());
  builder.description("This is my first VM");
  builder.tags(ImmutableSet.of("Web"));
  AnonymousResource sshKey=AnonymousResource.builder().href(URI.create("/cloudapi/ecloud/admin/sshkeys/77")).type("application/vnd.tmrk.cloud.admin.sshKey").build();
  NamedResource network=NamedResource.builder().href(URI.create("/cloudapi/ecloud/networks/3936")).name("10.146.204.64/28").type("application/vnd.tmrk.cloud.network").build();
  NetworkAdapterSetting adapterSetting=NetworkAdapterSetting.builder().network(network).ipAddress("10.146.204.68").build();
  NetworkAdapterSettings adapterSettings=NetworkAdapterSettings.builder().addNetworkAdapterSetting(adapterSetting).build();
  NetworkSettings networkSettings=NetworkSettings.builder().networkAdapterSettings(adapterSettings).build();
  LinuxCustomization linuxCustomization=LinuxCustomization.builder().sshKey(sshKey).networkSettings(networkSettings).build();
  builder.linuxCustomization(linuxCustomization);
  AnonymousResource template=AnonymousResource.builder().href(URI.create("/cloudapi/ecloud/templates/6/computepools/89")).type("application/vnd.tmrk.cloud.template").build();
  builder.template(template);
  binder.bindToRequest(request,builder.build());
  assertEquals(request.getPayload().getRawContent(),expected.replaceAll("'","\""));
}
