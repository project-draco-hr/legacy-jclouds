{
  final Map<String,String> tokenValueMap=ShellToken.tokenValueMap(osFamily);
  StringBuilder builder=new StringBuilder();
  builder.append(ShellToken.BEGIN_SCRIPT.to(osFamily));
  builder.append(Utils.writeUnsetVariables(Lists.newArrayList(Iterables.transform(variablesToUnset,new Function<String,String>(){
    @Override public String apply(    String from){
      if (tokenValueMap.containsKey(from + "Variable"))       return Utils.FUNCTION_UPPER_UNDERSCORE_TO_LOWER_CAMEL.apply(tokenValueMap.get(from + "Variable"));
      return from;
    }
  }
)),osFamily));
  resolveFunctionDependencies(osFamily);
  if (functions.size() > 0) {
    builder.append(ShellToken.BEGIN_FUNCTIONS.to(osFamily));
    builder.append(Utils.writeFunctionFromResource("abort",osFamily));
    for (    String function : functions.values()) {
      builder.append(Utils.replaceTokens(function,tokenValueMap));
    }
    builder.append(ShellToken.END_FUNCTIONS.to(osFamily));
  }
  builder.append(Utils.writeZeroPath(osFamily));
  StringBuilder statementBuilder=new StringBuilder();
  for (  Statement statement : statements) {
    statementBuilder.append(statement.render(osFamily));
  }
  builder.append(statementBuilder.toString().replaceAll(ShellToken.RETURN.to(osFamily),ShellToken.EXIT.to(osFamily)));
  builder.append(ShellToken.END_SCRIPT.to(osFamily));
  return builder.toString();
}
