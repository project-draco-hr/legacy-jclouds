{
  Map<String,String> functions=Maps.newLinkedHashMap();
  functions.put("abort",Utils.writeFunctionFromResource("abort",osFamily));
  for (  Entry<String,Map<String,String>> entry : variableScopes.entrySet()) {
    functions.put(entry.getKey(),Utils.writeFunction(entry.getKey(),Utils.writeVariableExporters(entry.getValue(),osFamily)));
  }
  StringBuilder builder=new StringBuilder();
  builder.append(ShellToken.BEGIN_SCRIPT.to(osFamily));
  builder.append(Utils.writeUnsetVariables(variablesToUnset,osFamily));
  Map<String,String> functionsToWrite=resolveFunctionDependenciesForStatements(functions,statements,osFamily);
  writeFunctions(functionsToWrite,osFamily,builder);
  builder.append(Utils.writeZeroPath(osFamily));
  StringBuilder statementBuilder=new StringBuilder();
  for (  Statement statement : statements) {
    statementBuilder.append(statement.render(osFamily));
  }
  builder.append(statementBuilder.toString());
  builder.append(ShellToken.END_SCRIPT.to(osFamily));
  return builder.toString();
}
