{
  final String basedir="target/" + this.getClass().getSimpleName();
  new File(basedir).delete();
  Properties overrides=new Properties();
  overrides.setProperty(NodePoolProperties.BACKEND_PROVIDER,"stub");
  overrides.setProperty(NodePoolProperties.BASEDIR,basedir);
  overrides.setProperty(NodePoolProperties.BACKEND_MODULES,SLF4JLoggingModule.class.getName());
  overrides.setProperty(POOL_ADMIN_ACCESS,"adminUsername=pooluser,adminPassword=poolpass");
  ComputeService stub=ContextBuilder.newBuilder("nodepool").credentials("foo","bar").endpoint("gooend").apiVersion("1.1").buildVersion("1.1-2").overrides(overrides).buildInjector().getInstance(Key.get(new TypeLiteral<Supplier<ComputeService>>(){
  }
,Backend.class)).get();
  assertEquals(stub.getContext().unwrap().getIdentity(),"foo");
  assertEquals(stub.getContext().utils().injector().getInstance(Key.get(String.class,Credential.class)),"bar");
  assertEquals(stub.getContext().unwrap().getProviderMetadata().getEndpoint(),"gooend");
  assertEquals(stub.getContext().unwrap().getProviderMetadata().getApiMetadata().getVersion(),"1.1");
  assertEquals(stub.getContext().unwrap().getProviderMetadata().getApiMetadata().getBuildVersion().get(),"1.1-2");
  stub.getContext().close();
  new File(basedir).delete();
}
