{
  try {
    Properties outputProperties=new Properties();
    outputProperties.put(javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION,"yes");
    final String name=vmData.getName();
    final String processorCount=Integer.toString(vmData.getProcessorCount());
    final String memoryUnit=vmData.getMemory().getUnit();
    final int memoryValue=((Double)(vmData.getMemory().getValue())).intValue();
    final Set<String> tags=vmData.getTags();
    final String description=vmData.getDescription();
    final LayoutRequest layout=vmData.getLayout();
    final String poweredOn=Boolean.toString(vmData.isPoweredOn());
    final AnonymousResource template=vmData.getTemplate();
    XMLBuilder builder=XMLBuilder.create("CreateVirtualMachine").a("name",name).e("ProcessorCount").t(processorCount).up().e("Memory").e("Unit").t(memoryUnit).up().e("Value").t(Integer.toString(memoryValue)).up().up();
    builder=layout(builder,layout);
    builder.e("Description").t(description).up();
    builder=tags(builder,tags);
    builder=linuxCustomization(builder,vmData);
    builder=windowsCustomization(builder,vmData);
    builder.e("PoweredOn").t(poweredOn).up().e("Template").a("href",template.getHref().toString()).a("type",template.getType()).up();
    return builder.asString(outputProperties);
  }
 catch (  ParserConfigurationException e) {
    throw new RuntimeException(e);
  }
catch (  TransformerException t) {
    throw new RuntimeException(t);
  }
}
