{
  Class clazz=from.getAsyncClass();
  TypeLiteral typeLiteral=TypeLiteral.get(clazz);
  RestAnnotationProcessor util=(RestAnnotationProcessor)injector.getInstance(Key.get(TypeLiteral.get(Types.newParameterizedType(RestAnnotationProcessor.class,clazz))));
  util.setCaller(from);
  ConcurrentMap<ClassMethodArgs,Object> delegateMap=injector.getInstance(Key.get(new TypeLiteral<ConcurrentMap<ClassMethodArgs,Object>>(){
  }
,Names.named("async")));
  AsyncRestClientProxy proxy=new AsyncRestClientProxy(injector,factory,util,typeLiteral,delegateMap);
  injector.injectMembers(proxy);
  return AsyncClientFactory.create(clazz,proxy);
}
