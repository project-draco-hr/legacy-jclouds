{
  return new FutureBase<S3Bucket>(){
    public S3Bucket get() throws InterruptedException, ExecutionException {
      final Map<String,S3Object> realContents=bucketToContents.get(name);
      if (realContents == null)       return S3Bucket.NOT_FOUND;
      SortedSet<S3Object.Metadata> contents=Sets.newTreeSet(Iterables.transform(realContents.keySet(),new Function<String,S3Object.Metadata>(){
        public S3Object.Metadata apply(        String key){
          return realContents.get(key).getMetadata();
        }
      }
));
      S3Bucket returnVal=new S3Bucket(name);
      if (options.getMarker() != null) {
        final String marker;
        try {
          marker=URLDecoder.decode(options.getMarker(),"UTF-8");
        }
 catch (        UnsupportedEncodingException e) {
          throw new IllegalArgumentException(e);
        }
        S3Object.Metadata lastMarkerMetadata=Iterables.find(contents,new Predicate<S3Object.Metadata>(){
          public boolean apply(          S3Object.Metadata metadata){
            return metadata.getKey().equals(marker);
          }
        }
);
        contents=contents.tailSet(lastMarkerMetadata);
        contents.remove(lastMarkerMetadata);
        returnVal.setMarker(marker);
      }
      try {
        if (options.getPrefix() != null) {
          contents=Sets.newTreeSet(Iterables.filter(contents,new Predicate<S3Object.Metadata>(){
            public boolean apply(            S3Object.Metadata o){
              try {
                return (o != null && o.getKey().startsWith(URLDecoder.decode(options.getPrefix(),"UTF-8")));
              }
 catch (              UnsupportedEncodingException e) {
                throw new RuntimeException(e);
              }
            }
          }
));
          returnVal.setPrefix(URLDecoder.decode(options.getPrefix(),"UTF-8"));
        }
        if (options.getDelimiter() != null) {
          Iterable<String> iterable=Iterables.transform(contents,new CommonPrefixes(options.getPrefix() != null ? URLDecoder.decode(options.getPrefix(),"UTF-8") : null,URLDecoder.decode(options.getDelimiter(),"UTF-8")));
          Set<String> commonPrefixes=iterable != null ? Sets.newTreeSet(iterable) : new HashSet<String>();
          commonPrefixes.remove(CommonPrefixes.NO_PREFIX);
          contents=Sets.newTreeSet(Iterables.filter(contents,new DelimiterFilter(options.getPrefix() != null ? URLDecoder.decode(options.getPrefix(),"UTF-8") : null,URLDecoder.decode(options.getDelimiter(),"UTF-8"))));
          returnVal.setCommonPrefixes(commonPrefixes);
          returnVal.setDelimiter(URLDecoder.decode(options.getDelimiter(),"UTF-8"));
        }
      }
 catch (      UnsupportedEncodingException e) {
        throw new RuntimeException(e);
      }
      if (options.getMaxKeys() != null) {
        contents=firstSliceOfSize(contents,Integer.parseInt(options.getMaxKeys()));
        returnVal.setMaxKeys(Integer.parseInt(options.getMaxKeys()));
        returnVal.setTruncated(true);
      }
      returnVal.setContents(contents);
      return returnVal;
    }
  }
;
}
