{
  ParseSystemAndUserMetadataFromHeaders<BlobMetadata> metadataParser=createMock(ParseSystemAndUserMetadataFromHeaders.class);
  ParseBlobFromHeadersAndHttpContent.BlobFactory<BlobMetadata,Blob<BlobMetadata>> objectFactory=new ParseBlobFromHeadersAndHttpContent.BlobFactory<BlobMetadata,Blob<BlobMetadata>>(){
    public Blob<BlobMetadata> create(    BlobMetadata metadata){
      return new Blob<BlobMetadata>(metadata);
    }
  }
;
  ParseBlobFromHeadersAndHttpContent<BlobMetadata,Blob<BlobMetadata>> callable=new ParseBlobFromHeadersAndHttpContent(metadataParser,objectFactory);
  HttpResponse response=createMock(HttpResponse.class);
  BlobMetadata meta=createMock(BlobMetadata.class);
  expect(metadataParser.apply(response)).andReturn(meta);
  expect(meta.getSize()).andReturn(-1l);
  meta.setSize(-1l);
  expect(response.getFirstHeaderOrNull(HttpHeaders.CONTENT_LENGTH)).andReturn("10485760").atLeastOnce();
  expect(response.getFirstHeaderOrNull("Content-Range")).andReturn("0-10485759/20232760").atLeastOnce();
  expect(response.getHeaders()).andReturn(ImmutableMultimap.of("Content-Length","10485760","Content-Range","0-10485759/20232760"));
  meta.setSize(20232760l);
  expect(meta.getSize()).andReturn(20232760l);
  expect(response.getStatusCode()).andReturn(200).atLeastOnce();
  expect(response.getContent()).andReturn(IOUtils.toInputStream("test"));
  replay(response);
  replay(metadataParser);
  replay(meta);
  Blob<BlobMetadata> object=callable.apply(response);
  assertEquals(object.getContentLength(),10485760);
  assertEquals(object.getMetadata().getSize(),20232760);
  assertEquals(object.getContentRange(),"0-10485759/20232760");
}
