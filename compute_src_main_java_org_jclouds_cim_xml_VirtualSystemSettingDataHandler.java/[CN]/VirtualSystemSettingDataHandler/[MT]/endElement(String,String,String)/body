{
  String current=currentOrNull(currentText);
  if (current != null) {
    if (equalsOrSuffix(qName,"ElementName")) {
      builder.elementName(current);
    }
 else     if (equalsOrSuffix(qName,"InstanceID")) {
      builder.instanceID(current);
    }
 else     if (equalsOrSuffix(qName,"Caption")) {
      builder.caption(current);
    }
 else     if (equalsOrSuffix(qName,"Description")) {
      builder.description(current);
    }
 else     if (equalsOrSuffix(qName,"AutomaticRecoveryAction")) {
      builder.automaticRecoveryAction(AutomaticRecoveryAction.fromValue(current));
    }
 else     if (equalsOrSuffix(qName,"AutomaticShutdownAction")) {
      builder.automaticShutdownAction(AutomaticShutdownAction.fromValue(current));
    }
 else     if (equalsOrSuffix(qName,"AutomaticStartupAction")) {
      builder.automaticStartupAction(AutomaticStartupAction.fromValue(current));
    }
 else     if (equalsOrSuffix(qName,"AutomaticStartupActionDelay")) {
      builder.automaticStartupActionDelay(null);
    }
 else     if (equalsOrSuffix(qName,"AutomaticStartupActionSequenceNumber")) {
      builder.automaticStartupActionSequenceNumber(Integer.valueOf(current));
    }
 else     if (equalsOrSuffix(qName,"ConfigurationDataRoot")) {
      builder.configurationDataRoot(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"ConfigurationFile")) {
      builder.configurationFile(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"ConfigurationID")) {
      builder.configurationID(current);
    }
 else     if (equalsOrSuffix(qName,"CreationTime")) {
      builder.creationTime(null);
    }
 else     if (equalsOrSuffix(qName,"LogDataRoot")) {
      builder.logDataRoot(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"RecoveryFile")) {
      builder.recoveryFile(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"RecoveryFile")) {
      builder.recoveryFile(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"SuspendDataRoot")) {
      builder.suspendDataRoot(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"SwapFileDataRoot")) {
      builder.swapFileDataRoot(URI.create(current));
    }
 else     if (equalsOrSuffix(qName,"VirtualSystemIdentifier")) {
      builder.virtualSystemIdentifier(current);
    }
 else     if (equalsOrSuffix(qName,"VirtualSystemType")) {
      builder.virtualSystemTypes(filter(transform(Splitter.on(',').split(current),new Function<String,String>(){
        @Override public String apply(        String input){
          return input.trim();
        }
      }
),not(equalTo(""))));
    }
 else     if (equalsOrSuffix(qName,"Notes")) {
      builder.notes(current);
    }
  }
  currentText=new StringBuilder();
}
