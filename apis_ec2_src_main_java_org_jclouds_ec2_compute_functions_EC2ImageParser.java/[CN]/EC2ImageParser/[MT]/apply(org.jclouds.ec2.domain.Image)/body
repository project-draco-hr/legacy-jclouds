{
  if (from.getImageType() != ImageType.MACHINE) {
    return null;
  }
  ImageBuilder builder=new ImageBuilder();
  builder.providerId(from.getId());
  builder.id(from.getRegion() + "/" + from.getId());
  builder.name(from.getName());
  builder.description(from.getDescription() != null ? from.getDescription() : from.getImageLocation());
  builder.userMetadata(ImmutableMap.<String,String>builder().put("owner",from.getImageOwnerId()).put("rootDeviceType",from.getRootDeviceType().value()).put("virtualizationType",from.getVirtualizationType().value()).put("hypervisor",from.getHypervisor().value()).build());
  OperatingSystem.Builder osBuilder=OperatingSystem.builder();
  osBuilder.is64Bit(from.getArchitecture() == Architecture.X86_64);
  OsFamily family=parseOsFamilyOrUnrecognized(from.getImageLocation());
  osBuilder.family(family);
  osBuilder.version(ComputeServiceUtils.parseVersionOrReturnEmptyString(family,from.getImageLocation(),osVersionMap));
  osBuilder.description(from.getImageLocation());
  osBuilder.arch(from.getVirtualizationType().value());
  reviseParsedImage.reviseParsedImage(from,builder,family,osBuilder);
  builder.defaultCredentials(credentialProvider.apply(from));
  try {
    builder.location(Iterables.find(locations.get(),new Predicate<Location>(){
      @Override public boolean apply(      Location input){
        return input.getId().equals(from.getRegion());
      }
    }
));
  }
 catch (  NoSuchElementException e) {
    logger.error("unknown region %s for image %s; not in %s",from.getRegion(),from.getId(),locations);
    builder.location(new LocationBuilder().scope(LocationScope.REGION).id(from.getRegion()).description(from.getRegion()).parent(defaultLocation.get()).build());
  }
  builder.operatingSystem(osBuilder.build());
  builder.status(toPortableImageStatus.get(from.getImageState()));
  return builder.build();
}
