{
  Credentials currentCreds=checkNotNull(creds.get(),"credential supplier returned null");
  String cert=checkNotNull(currentCreds.identity,"credential supplier returned null identity (should be cert)");
  String keyStorePassword=checkNotNull(currentCreds.credential,"credential supplier returned null credential (should be keyStorePassword)");
  try {
    KeyStore keyStore=KeyStore.getInstance("PKCS12");
    File certFile=new File(checkNotNull(cert));
    if (certFile.isFile()) {
      keyStore.load(new FileInputStream(certFile),keyStorePassword.toCharArray());
    }
 else {
      int privateKeyBeginIdx=cert.indexOf("-----BEGIN PRIVATE KEY");
      int privateKeyEndIdx=cert.indexOf("-----END PRIVATE KEY");
      String pemPrivateKey=cert.substring(privateKeyBeginIdx,privateKeyEndIdx + 26);
      StringBuilder pemCerts=new StringBuilder();
      int certsBeginIdx=0;
      do {
        certsBeginIdx=cert.indexOf("-----BEGIN CERTIFICATE",certsBeginIdx);
        if (certsBeginIdx >= 0) {
          int certsEndIdx=cert.indexOf("-----END CERTIFICATE",certsBeginIdx) + 26;
          pemCerts.append(cert.substring(certsBeginIdx,certsEndIdx));
          certsBeginIdx=certsEndIdx;
        }
      }
 while (certsBeginIdx != -1);
      KeySpec keySpec=Pems.privateKeySpec(InputSuppliers.of(pemPrivateKey));
      PrivateKey privateKey=crypto.rsaKeyFactory().generatePrivate(keySpec);
      CertificateFactory cf=CertificateFactory.getInstance("X.509");
      @SuppressWarnings("unchecked") Collection<Certificate> certs=(Collection<Certificate>)cf.generateCertificates(new ByteArrayInputStream(pemCerts.toString().getBytes(Charsets.UTF_8)));
      keyStore.load(null);
      keyStore.setKeyEntry("dummy",privateKey,keyStorePassword.toCharArray(),certs.toArray(new java.security.cert.Certificate[0]));
    }
    return keyStore;
  }
 catch (  NoSuchAlgorithmException e) {
    throw propagate(e);
  }
catch (  KeyStoreException e) {
    throw propagate(e);
  }
catch (  CertificateException e) {
    throw propagate(e);
  }
catch (  FileNotFoundException e) {
    throw propagate(e);
  }
catch (  IOException e) {
    throw propagate(e);
  }
catch (  InvalidKeySpecException e) {
    throw propagate(e);
  }
}
