{
  InputStream is=getClass().getResourceAsStream("/test_get_load_balancer_list.json");
  ParseLoadBalancerListFromJsonResponse parser=i.getInstance(ParseLoadBalancerListFromJsonResponse.class);
  SortedSet<LoadBalancer> response=parser.apply(HttpResponse.builder().statusCode(200).message("ok").payload(is).build());
  Option dc=Option.createWithIdNameAndDescription(1l,"US-West-1","US West 1 Datacenter");
  LoadBalancer loadBalancer=LoadBalancer.builder().id(6372L).name("Balancer").virtualIp(IpPortPair.builder().ip(Ip.builder().id(1313082L).ip("204.51.240.181").subnet("204.51.240.176/255.255.255.240").isPublic(true).state(IpState.ASSIGNED).datacenter(dc).build()).port(80).build()).realIpList(IpPortPair.builder().ip(Ip.builder().id(1313086L).ip("204.51.240.185").subnet("204.51.240.176/255.255.255.240").isPublic(true).state(IpState.ASSIGNED).datacenter(dc).build()).port(80).build(),IpPortPair.builder().ip(Ip.builder().id(1313089L).ip("204.51.240.188").subnet("204.51.240.176/255.255.255.240").isPublic(true).state(IpState.ASSIGNED).datacenter(dc).build()).port(80).build()).type(LoadBalancerType.ROUND_ROBIN).persistence(LoadBalancerPersistenceType.NONE).os(LoadBalancerOs.F5).state(LoadBalancerState.ON).datacenter(dc).build();
  assertEquals(Iterables.getOnlyElement(response),loadBalancer);
}
