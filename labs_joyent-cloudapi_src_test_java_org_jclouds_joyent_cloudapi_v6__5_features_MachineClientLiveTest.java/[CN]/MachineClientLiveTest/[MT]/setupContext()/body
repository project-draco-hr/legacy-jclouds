{
  super.setupContext();
  key=SshKeys.generate();
  fingerprint=SshKeys.fingerprintPublicKey(key.get("public"));
  cloudApiContext.getApi().getKeyClient().create(Key.builder().name(fingerprint).key(key.get("public")).build());
  client=cloudApiContext.getApi().getMachineClientForDatacenter(Iterables.get(cloudApiContext.getApi().getConfiguredDatacenters(),0));
  socketTester=new RetryablePredicate<HostAndPort>(new InetSocketAddressConnect(),180,1,1,TimeUnit.SECONDS);
  machineRunning=new RetryablePredicate<Machine>(new Predicate<Machine>(){
    @Override public boolean apply(    Machine input){
      return client.get(input.getId()).getState() == Machine.State.RUNNING;
    }
  }
,600,5,5,TimeUnit.SECONDS);
  machineRunning=new RetryablePredicate<Machine>(new Predicate<Machine>(){
    @Override public boolean apply(    Machine input){
      return client.get(input.getId()).getState() == Machine.State.RUNNING;
    }
  }
,600,5,5,TimeUnit.SECONDS);
}
