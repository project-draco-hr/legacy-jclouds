{
  if (family == OsFamily.WINDOWS) {
    throw new UnsupportedOperationException("windows not yet implemented");
  }
  ImmutableList.Builder<Statement> statements=ImmutableList.builder();
  statements.add(installChefGems);
  statements.add(exec("{md} /var/chef"));
  if (roles.isPresent() && !roles.get().isEmpty()) {
    statements.add(exec("{md} /var/chef/roles"));
    for (    Role role : roles.get()) {
      statements.add(createOrOverwriteFile("/var/chef/roles/" + role.getName() + ".json",ImmutableSet.of(role.toJsonString())));
    }
  }
  if (databags.isPresent() && !databags.get().isEmpty()) {
    statements.add(exec("{md} /var/chef/data_bags"));
    for (    DataBag databag : databags.get()) {
      String databagFolder="/var/chef/data_bags/" + databag.getName();
      statements.add(exec("{md} " + databagFolder));
      for (      Item item : databag.getItems()) {
        statements.add(createOrOverwriteFile(databagFolder + "/" + item.getName()+ ".json",ImmutableSet.of(item.getJsonData())));
      }
    }
  }
  ImmutableMap.Builder<String,String> chefSoloOptions=ImmutableMap.builder();
  chefSoloOptions.put("-N","`hostname`");
  chefSoloOptions.put("-r",cookbooksArchiveLocation);
  if (jsonAttributes.isPresent()) {
    statements.add(createOrOverwriteFile("/var/chef/node.json",jsonAttributes.asSet()));
    chefSoloOptions.put("-j","/var/chef/node.json");
  }
  if (!runlist.isEmpty()) {
    chefSoloOptions.put("-o",Joiner.on(',').join(runlist));
  }
  String options=Joiner.on(' ').withKeyValueSeparator(" ").join(chefSoloOptions.build());
  statements.add(Statements.exec(String.format("chef-solo %s",options)));
  return new StatementList(statements.build()).render(family);
}
