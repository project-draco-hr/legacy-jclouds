{
  this.fileCachePath=checkNotNull(fileCachePath,"fileCachePath must be set").or(DEFAULT_SOLO_PATH);
  this.rolePath=checkNotNull(rolePath,"rolePath must be set").or(this.fileCachePath + "/roles");
  this.databagPath=checkNotNull(databagPath,"databagPath must be set").or(this.fileCachePath + "/data_bags");
  this.cookbooksArchiveLocation=checkNotNull(cookbooksArchiveLocation,"cookbooksArchiveLocation must be set");
  this.jsonAttributes=checkNotNull(jsonAttributes,"jsonAttributes must be set");
  this.group=checkNotNull(group,"group must be set");
  this.interval=checkNotNull(interval,"interval must be set");
  this.logLevel=checkNotNull(logLevel,"logLevel must be set");
  this.logFile=checkNotNull(logFile,"logFile must be set");
  this.nodeName=checkNotNull(nodeName,"nodeName must be set");
  this.splay=checkNotNull(splay,"splay must be set");
  this.user=checkNotNull(user,"user must be set");
  this.roles=checkNotNull(roles,"roles must be set");
  this.databags=checkNotNull(databags,"databags must be set");
  this.runlist=checkNotNull(runlist,"runlist must be set").or(RunList.builder().build());
  this.user=checkNotNull(user,"chefVersion must be set");
  if (!checkNotNull(cookbookPath,"cookbookPath must be set").isPresent() || cookbookPath.get().isEmpty()) {
    this.cookbookPath=ImmutableList.<String>of(this.fileCachePath + "/cookbooks");
  }
 else {
    this.cookbookPath=ImmutableList.<String>copyOf(cookbookPath.get());
  }
  this.installChefGems=InstallChefGems.builder().version(chefVersion.orNull()).build();
}
