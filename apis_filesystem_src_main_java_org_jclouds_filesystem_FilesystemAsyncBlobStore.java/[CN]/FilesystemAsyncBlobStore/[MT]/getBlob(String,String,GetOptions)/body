{
  logger.debug("Retrieving blob with key %s from container %s",key,containerName);
  if (!storageStrategy.containerExists(containerName)) {
    logger.debug("Container %s does not exist",containerName);
    return immediateFailedFuture(cnfe(containerName));
  }
  if (!storageStrategy.blobExists(containerName,key)) {
    logger.debug("Item %s does not exist in container %s",key,containerName);
    return immediateFuture(null);
  }
  Blob blob=loadBlob(containerName,key);
  if (options != null) {
    if (options.getIfMatch() != null) {
      if (!blob.getMetadata().getETag().equals(options.getIfMatch()))       return immediateFailedFuture(returnResponseException(412));
    }
    if (options.getIfNoneMatch() != null) {
      if (blob.getMetadata().getETag().equals(options.getIfNoneMatch()))       return immediateFailedFuture(returnResponseException(304));
    }
    if (options.getIfModifiedSince() != null) {
      Date modifiedSince=options.getIfModifiedSince();
      if (blob.getMetadata().getLastModified().before(modifiedSince)) {
        HttpResponse response=new HttpResponse(304,null,null);
        return immediateFailedFuture(new HttpResponseException(String.format("%1$s is before %2$s",blob.getMetadata().getLastModified(),modifiedSince),null,response));
      }
    }
    if (options.getIfUnmodifiedSince() != null) {
      Date unmodifiedSince=options.getIfUnmodifiedSince();
      if (blob.getMetadata().getLastModified().after(unmodifiedSince)) {
        HttpResponse response=new HttpResponse(412,null,null);
        return immediateFailedFuture(new HttpResponseException(String.format("%1$s is after %2$s",blob.getMetadata().getLastModified(),unmodifiedSince),null,response));
      }
    }
    if (options.getRanges() != null && options.getRanges().size() > 0) {
      byte[] data;
      try {
        data=toByteArray(blob.getPayload().getInput());
      }
 catch (      IOException e) {
        return immediateFailedFuture(new RuntimeException(e));
      }
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      for (      String s : options.getRanges()) {
        int offset=0;
        int last=data.length - 1;
        if (s.startsWith("-")) {
          offset=last - Integer.parseInt(s.substring(1)) + 1;
        }
 else         if (s.endsWith("-")) {
          offset=Integer.parseInt(s.substring(0,s.length() - 1));
        }
 else         if (s.contains("-")) {
          String[] firstLast=s.split("\\-");
          offset=Integer.parseInt(firstLast[0]);
          last=Integer.parseInt(firstLast[1]);
        }
 else {
          return immediateFailedFuture(new IllegalArgumentException("illegal range: " + s));
        }
        if (offset > last || last + 1 > data.length) {
          return immediateFailedFuture(new IllegalArgumentException("illegal range: " + s));
        }
        out.write(data,offset,last - offset + 1);
      }
      ContentMetadata cmd=blob.getPayload().getContentMetadata();
      byte[] byteArray=out.toByteArray();
      blob.setPayload(byteArray);
      HttpUtils.copy(cmd,blob.getPayload().getContentMetadata());
      blob.getPayload().getContentMetadata().setContentLength(new Long(byteArray.length));
    }
  }
  checkNotNull(blob.getPayload(),"payload " + blob);
  return immediateFuture(blob);
}
