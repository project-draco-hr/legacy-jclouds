{
  context=TestUtils.computeServiceForLocalhost();
  socketTester=new RetryablePredicate<IPSocket>(new InetSocketAddressConnect(),130,10,TimeUnit.SECONDS);
  setupCredentials();
  setupConfigurationProperties();
  downloadFileUnlessPresent(distroIsoUrl,workingDir,distroIsoName);
  downloadFileUnlessPresent(gaIsoUrl,workingDir,gaIsoName);
  installVbox();
  configureJettyServer();
  VirtualBoxManager manager=VirtualBoxManager.createInstance("mach");
  manager.connect(endpoint.toASCIIString(),identity,credential);
  IMachine newVM=manager.getVBox().createMachine(settingsFile,vmName,osTypeId,vmId,forceOverwrite);
  manager.getVBox().registerMachine(newVM);
  Long memorySize=new Long(1024);
  ISession session=manager.getSessionObject();
  IMachine machine=manager.getVBox().findMachine(vmName);
  machine.lockMachine(session,LockType.Write);
  IMachine mutable=session.getMachine();
  mutable.setMemorySize(memorySize);
  mutable.saveSettings();
  session.unlockMachine();
  logMachineStatus(machine);
  machine.lockMachine(session,LockType.Write);
  mutable=session.getMachine();
  mutable.addStorageController(controllerIDE,StorageBus.IDE);
  mutable.saveSettings();
  session.unlockMachine();
  IMedium hd=null;
  if (!new File(adminDisk).exists()) {
    hd=manager.getVBox().createHardDisk(diskFormat,adminDisk);
    long size=4L * 1024L * 1024L* 1024L - 4L;
    IProgress progress=hd.createBaseStorage(new Long(size),new Long(org.virtualbox_4_1.jaxws.MediumVariant.STANDARD.ordinal()));
    System.out.println(progress);
  }
 else {
  }
  logMachineStatus(machine);
  IMedium distroMedium=manager.getVBox().openMedium(workingDir + "/" + distroIsoName,DeviceType.DVD,AccessMode.ReadOnly,forceOverwrite);
  machine.lockMachine(session,LockType.Write);
  mutable=session.getMachine();
  mutable.attachDevice(controllerIDE,0,0,DeviceType.DVD,distroMedium);
  mutable.saveSettings();
  session.unlockMachine();
  logger().debug("Setting up hard drive...");
  machine.lockMachine(session,LockType.Write);
  mutable=session.getMachine();
  mutable.attachDevice(controllerIDE,0,1,DeviceType.HardDisk,hd);
  mutable.saveSettings();
  session.unlockMachine();
  logMachineStatus(machine);
  logger().debug("Configuring NIC...");
  machine.lockMachine(session,LockType.Write);
  mutable=session.getMachine();
  mutable.getNetworkAdapter(new Long(0)).setAttachmentType(NetworkAttachmentType.NAT);
  mutable.getNetworkAdapter(new Long(0)).getNatDriver().addRedirect("guestssh",NATProtocol.TCP,"127.0.0.1",2222,"",22);
  mutable.getNetworkAdapter(new Long(0)).setEnabled(true);
  mutable.saveSettings();
  session.unlockMachine();
  logger().debug("Attaching guest additions medium...");
  distroMedium=manager.getVBox().openMedium(guestAdditionsDvd,DeviceType.DVD,AccessMode.ReadOnly,forceOverwrite);
  machine.lockMachine(session,LockType.Write);
  mutable=session.getMachine();
  mutable.attachDevice(controllerIDE,1,1,DeviceType.DVD,distroMedium);
  mutable.saveSettings();
  session.unlockMachine();
  logMachineStatus(machine);
  logger().debug("Starting virtual machine...");
  IProgress prog=machine.launchVMProcess(session,"gui","");
  prog.waitForCompletion(-1);
  try {
    Thread.sleep(5000);
  }
 catch (  InterruptedException e) {
    propagate(e);
  }
  logMachineStatus(machine);
  sendKeyboardSequence(keyboardSequence);
  boolean sshDeamonIsRunning=false;
  while (!sshDeamonIsRunning) {
    try {
      AdminAccess.standard().init(new DefaultConfiguration()).render(OsFamily.UNIX);
      if (runScriptOnNode(guestId,"id").getExitCode() == 0)       sshDeamonIsRunning=true;
    }
 catch (    SshException e) {
      System.err.println("connection reset");
    }
  }
  logMachineStatus(machine);
  logger().debug("Configuring guest additions...");
  if (isUbuntu(guestId)) {
    runScriptOnNode(guestId,"m-a prepare -i",wrapInInitScript(true));
    runScriptOnNode(guestId,"mount -o loop /dev/dvd /media/cdrom");
    runScriptOnNode(guestId,"sh /media/cdrom/VBoxLinuxAdditions.run");
    runScriptOnNode(guestId,"rm /etc/udev/rules.d/70-persistent-net.rules");
    runScriptOnNode(guestId,"mkdir /etc/udev/rules.d/70-persistent-net.rules");
    runScriptOnNode(guestId,"rm -rf /dev/.udev/");
    runScriptOnNode(guestId,"rm /lib/udev/rules.d/75-persistent-net-generator.rules");
  }
  logMachineStatus(machine);
  logger().debug("Powering down...");
  machine=manager.getVBox().findMachine(vmName);
  try {
    session=manager.getSessionObject();
    IProgress progress=session.getConsole().powerDown();
    progress.waitForCompletion(-1);
    session.unlockMachine();
    while (!machine.getSessionState().equals(SessionState.Unlocked)) {
      try {
        System.out.println("waiting for unlocking session - session state: " + machine.getSessionState());
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  logMachineStatus(machine);
  logger().debug("Changing to bridged networking...");
  session=manager.getSessionObject();
  IMachine adminNode=manager.getVBox().findMachine(vmName);
  adminNode.lockMachine(session,LockType.Write);
  mutable=session.getMachine();
  String hostInterface=null;
  String command="vboxmanage list bridgedifs";
  try {
    Process child=Runtime.getRuntime().exec(command);
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(child.getInputStream()));
    String line="";
    boolean found=false;
    while ((line=bufferedReader.readLine()) != null && !found) {
      if (line.split(":")[0].contains("Name")) {
        hostInterface=line.split(":")[1];
      }
      if (line.split(":")[0].contains("Status") && line.split(":")[1].contains("Up")) {
        System.out.println("bridge: " + hostInterface.trim());
        found=true;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  mutable.getNetworkAdapter(new Long(0)).setAttachmentType(NetworkAttachmentType.Bridged);
  mutable.getNetworkAdapter(new Long(0)).setAdapterType(NetworkAdapterType.Am79C973);
  mutable.getNetworkAdapter(new Long(0)).setMACAddress(manager.getVBox().getHost().generateMACAddress());
  mutable.getNetworkAdapter(new Long(0)).setBridgedInterface(hostInterface.trim());
  mutable.getNetworkAdapter(new Long(0)).setEnabled(true);
  mutable.saveSettings();
  session.unlockMachine();
  logMachineStatus(machine);
  logger().debug("Taking snapshot of machine...");
  session=manager.getSessionObject();
  machine.lockMachine(session,LockType.Write);
  if (machine.getCurrentSnapshot() == null || !machine.getCurrentSnapshot().getDescription().equals(snapshotDescription)) {
    manager.getSessionObject().getConsole().takeSnapshot(machine.getId(),snapshotDescription);
  }
  session.unlockMachine();
  logMachineStatus(machine);
  manager.disconnect();
  manager.cleanup();
}
