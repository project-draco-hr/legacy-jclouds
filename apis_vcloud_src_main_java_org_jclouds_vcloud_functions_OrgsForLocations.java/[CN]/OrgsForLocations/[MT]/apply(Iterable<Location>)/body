{
  FluentIterable<URI> uris=FluentIterable.from(from).filter(new Predicate<Location>(){
    public boolean apply(    Location input){
      return input.getScope() == LocationScope.ZONE;
    }
  }
).transform(new Function<Location,URI>(){
    public URI apply(    Location from){
      return URI.create(from.getParent().getId());
    }
  }
);
  return transformParallel(uris,new Function<URI,ListenableFuture<? extends Org>>(){
    public ListenableFuture<Org> apply(    URI from){
      return aclient.getOrgClient().getOrg(from);
    }
  }
,userExecutor,null,logger,"organizations for uris");
}
