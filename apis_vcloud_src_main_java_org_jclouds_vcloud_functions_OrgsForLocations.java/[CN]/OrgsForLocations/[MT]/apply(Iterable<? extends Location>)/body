{
  return transformParallel(Sets.newLinkedHashSet(transform(filter(from,new Predicate<Location>(){
    @Override public boolean apply(    Location input){
      return input.getScope() == LocationScope.ZONE;
    }
  }
),new Function<Location,URI>(){
    @Override public URI apply(    Location from){
      return URI.create(from.getParent().getId());
    }
  }
)),new Function<URI,Future<Org>>(){
    @SuppressWarnings("unchecked") @Override public Future<Org> apply(    URI from){
      return (Future<Org>)aclient.getOrgClient().getOrg(from);
    }
  }
,executor,null,logger,"organizations for uris");
}
