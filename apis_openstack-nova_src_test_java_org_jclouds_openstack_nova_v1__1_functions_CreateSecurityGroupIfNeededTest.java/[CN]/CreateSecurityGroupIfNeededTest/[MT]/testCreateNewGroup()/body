{
  Builder<HttpRequest,HttpResponse> builder=ImmutableMap.<HttpRequest,HttpResponse>builder();
  builder.put(keystoneAuthWithUsernameAndPassword,responseWithKeystoneAccess);
  builder.put(extensionsOfNovaRequest,extensionsOfNovaResponse);
  int groupId=2769;
  HttpResponse createSecurityGroupResponse=HttpResponse.builder().statusCode(200).payload(payloadFromStringWithContentType(String.format("{\"security_group\": {\"rules\": [], \"tenant_id\": \"37936628937291\", \"id\": %s, \"name\": \"jclouds_mygroup\", \"description\": \"jclouds_mygroup\"}}",groupId),"application/json; charset=UTF-8")).build();
  builder.put(createSecurityGroup,createSecurityGroupResponse);
  int ruleId=10331;
  for (  int port : ImmutableList.of(22,8080)) {
    HttpRequest createCidrRule=HttpRequest.builder().method("POST").endpoint(URI.create("https://compute.north.host/v1.1/3456/os-security-group-rules")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).payload(payloadFromStringWithContentType(String.format("{\"security_group_rule\":{\"parent_group_id\":\"%s\",\"cidr\":\"0.0.0.0/0\",\"ip_protocol\":\"tcp\",\"from_port\":\"%d\",\"to_port\":\"%d\"}}",groupId,port,port),"application/json")).build();
    HttpResponse createCidrRuleResponse=HttpResponse.builder().statusCode(200).payload(payloadFromStringWithContentType(String.format("{\"security_group_rule\": {\"from_port\": %d, \"group\": {}, \"ip_protocol\": \"tcp\", \"to_port\": %d, \"parent_group_id\": %d, \"ip_range\": {\"cidr\": \"0.0.0.0/0\"}, \"id\": %d}}",port,port,groupId,ruleId++),"application/json; charset=UTF-8")).build();
    builder.put(createCidrRule,createCidrRuleResponse);
    HttpRequest createSelfRule=HttpRequest.builder().method("POST").endpoint(URI.create("https://compute.north.host/v1.1/3456/os-security-group-rules")).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).payload(payloadFromStringWithContentType(String.format("{\"security_group_rule\":{\"group_id\":\"%d\",\"parent_group_id\":\"%d\",\"ip_protocol\":\"tcp\",\"from_port\":\"%d\",\"to_port\":\"%d\"}}",groupId,groupId,port,port),"application/json")).build();
    HttpResponse createSelfRuleResponse=HttpResponse.builder().statusCode(200).payload(payloadFromStringWithContentType(String.format("{\"security_group_rule\": {\"from_port\": %d, \"group\": {\"tenant_id\": \"37936628937291\", \"name\": \"jclouds_mygroup\"}, \"ip_protocol\": \"tcp\", \"to_port\": %d, \"parent_group_id\": %d, \"ip_range\": {}, \"id\": %d}}",port,port,groupId,ruleId++),"application/json; charset=UTF-8")).build();
    builder.put(createSelfRule,createSelfRuleResponse);
  }
  HttpRequest getSecurityGroup=HttpRequest.builder().method("GET").endpoint(URI.create("https://compute.north.host/v1.1/3456/os-security-groups/" + groupId)).headers(ImmutableMultimap.<String,String>builder().put("Accept","application/json").put("X-Auth-Token",authToken).build()).build();
  HttpResponse getSecurityGroupResponse=HttpResponse.builder().statusCode(200).payload(payloadFromResource("/securitygroup_details_computeservice_typical.json")).build();
  builder.put(getSecurityGroup,getSecurityGroupResponse);
  NovaClient clientCanCreateSecurityGroup=requestsSendResponses(builder.build());
  CreateSecurityGroupIfNeeded fn=new CreateSecurityGroupIfNeeded(clientCanCreateSecurityGroup);
  assertEquals(fn.apply(new ZoneSecurityGroupNameAndPorts("az-1.region-a.geo-1","jclouds_mygroup",ImmutableSet.of(22,8080))).toString(),new SecurityGroupInZone(new ParseComputeServiceTypicalSecurityGroupTest().expected(),"az-1.region-a.geo-1").toString());
}
