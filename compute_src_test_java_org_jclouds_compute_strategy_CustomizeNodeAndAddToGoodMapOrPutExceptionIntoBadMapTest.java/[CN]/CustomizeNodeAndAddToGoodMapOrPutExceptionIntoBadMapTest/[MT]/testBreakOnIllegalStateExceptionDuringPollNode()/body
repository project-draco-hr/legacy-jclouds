{
  InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory=createMock(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class);
  OpenSocketFinder openSocketFinder=createMock(OpenSocketFinder.class);
  Function<TemplateOptions,Statement> templateOptionsToStatement=new TemplateOptionsToStatement();
  @SuppressWarnings("unused") Statement statement=null;
  TemplateOptions options=new TemplateOptions();
  Set<NodeMetadata> goodNodes=Sets.newLinkedHashSet();
  Map<NodeMetadata,Exception> badNodes=Maps.newLinkedHashMap();
  Multimap<NodeMetadata,CustomizationResponse> customizationResponses=LinkedHashMultimap.create();
  final NodeMetadata pendingNode=new NodeMetadataBuilder().ids("id").status(Status.PENDING).build();
  Function<AtomicReference<NodeMetadata>,AtomicReference<NodeMetadata>> pollNodeRunning=new Function<AtomicReference<NodeMetadata>,AtomicReference<NodeMetadata>>(){
    @Override public AtomicReference<NodeMetadata> apply(    AtomicReference<NodeMetadata> node){
      Assert.assertEquals(node.get(),pendingNode);
      throw new IllegalStateException("bad state!");
    }
  }
;
  replay(initScriptRunnerFactory,openSocketFinder);
  AtomicReference<NodeMetadata> atomicNode=new AtomicReference<NodeMetadata>(pendingNode);
  new CustomizeNodeAndAddToGoodMapOrPutExceptionIntoBadMap(pollNodeRunning,openSocketFinder,templateOptionsToStatement,initScriptRunnerFactory,options,atomicNode,goodNodes,badNodes,customizationResponses).apply(atomicNode);
  assertEquals(goodNodes.size(),0);
  assertEquals(badNodes.keySet(),ImmutableSet.of(pendingNode));
  assertEquals(badNodes.get(pendingNode).getMessage(),"bad state!");
  assertEquals(customizationResponses.size(),0);
  verify(initScriptRunnerFactory,openSocketFinder);
}
