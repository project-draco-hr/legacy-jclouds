{
  Predicate<NodeMetadata> nodeRunning=createMock(Predicate.class);
  InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory=createMock(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class);
  GetNodeMetadataStrategy getNode=createMock(GetNodeMetadataStrategy.class);
  RetryIfSocketNotYetOpen socketTester=createMock(RetryIfSocketNotYetOpen.class);
  Timeouts timeouts=new Timeouts();
  Function<TemplateOptions,Statement> templateOptionsToStatement=new TemplateOptionsToStatement();
  @SuppressWarnings("unused") Statement statement=null;
  TemplateOptions options=new TemplateOptions();
  Set<NodeMetadata> goodNodes=Sets.newLinkedHashSet();
  Map<NodeMetadata,Exception> badNodes=Maps.newLinkedHashMap();
  Multimap<NodeMetadata,CustomizationResponse> customizationResponses=LinkedHashMultimap.create();
  NodeMetadata node=new NodeMetadataBuilder().ids("id").state(NodeState.PENDING).build();
  expect(nodeRunning.apply(node)).andReturn(false);
  expect(getNode.getNode(node.getId())).andReturn(null);
  replay(nodeRunning);
  replay(initScriptRunnerFactory);
  replay(getNode);
  replay(socketTester);
  new CustomizeNodeAndAddToGoodMapOrPutExceptionIntoBadMap(nodeRunning,getNode,socketTester,timeouts,templateOptionsToStatement,initScriptRunnerFactory,options,node,goodNodes,badNodes,customizationResponses).apply(node);
  assertEquals(goodNodes.size(),0);
  assertEquals(badNodes.keySet(),ImmutableSet.of(node));
  assertEquals(badNodes.get(node).getMessage(),"node(id) terminated before we could customize");
  assertEquals(customizationResponses.size(),0);
  verify(nodeRunning);
  verify(initScriptRunnerFactory);
  verify(getNode);
  verify(socketTester);
}
