{
  int portTimeoutSecs=2;
  InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory=createMock(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class);
  OpenSocketFinder openSocketFinder=createMock(OpenSocketFinder.class);
  Timeouts timeouts=new Timeouts();
  Function<TemplateOptions,Statement> templateOptionsToStatement=new TemplateOptionsToStatement();
  TemplateOptions options=new TemplateOptions().blockOnPort(22,portTimeoutSecs);
  Set<NodeMetadata> goodNodes=Sets.newLinkedHashSet();
  Map<NodeMetadata,Exception> badNodes=Maps.newLinkedHashMap();
  Multimap<NodeMetadata,CustomizationResponse> customizationResponses=LinkedHashMultimap.create();
  final NodeMetadata pendingNode=new NodeMetadataBuilder().ids("id").state(NodeState.PENDING).build();
  final NodeMetadata runningNode=new NodeMetadataBuilder().ids("id").state(NodeState.RUNNING).build();
  expect(openSocketFinder.findOpenSocketOnNode(runningNode,22,portTimeoutSecs,TimeUnit.SECONDS)).andThrow(new NoSuchElementException("could not connect to any ip address port")).once();
  GetNodeMetadataStrategy nodeRunning=new GetNodeMetadataStrategy(){
    @Override public NodeMetadata getNode(    String input){
      Assert.assertEquals(input,pendingNode.getId());
      return runningNode;
    }
  }
;
  replay(initScriptRunnerFactory,openSocketFinder);
  AtomicReference<NodeMetadata> atomicNode=new AtomicReference<NodeMetadata>(pendingNode);
  new CustomizeNodeAndAddToGoodMapOrPutExceptionIntoBadMap(new AtomicNodeRunning(nodeRunning),openSocketFinder,timeouts,templateOptionsToStatement,initScriptRunnerFactory,options,atomicNode,goodNodes,badNodes,customizationResponses).apply(atomicNode);
  assertEquals(goodNodes.size(),0);
  assertEquals(badNodes.keySet(),ImmutableSet.of(pendingNode));
  badNodes.get(pendingNode).printStackTrace();
  assertEquals(badNodes.get(pendingNode).getMessage(),"could not connect to any ip address port");
  assertEquals(customizationResponses.size(),0);
  verify(initScriptRunnerFactory,openSocketFinder);
}
