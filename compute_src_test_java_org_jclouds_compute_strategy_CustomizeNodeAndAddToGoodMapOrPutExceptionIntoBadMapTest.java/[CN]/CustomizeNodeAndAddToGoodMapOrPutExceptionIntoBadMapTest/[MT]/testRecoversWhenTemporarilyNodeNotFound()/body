{
  String nodeId="myid";
  InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory=createMock(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class);
  OpenSocketFinder openSocketFinder=createMock(OpenSocketFinder.class);
  Timeouts timeouts=new Timeouts();
  Function<TemplateOptions,Statement> templateOptionsToStatement=new TemplateOptionsToStatement();
  Set<NodeMetadata> goodNodes=Sets.newLinkedHashSet();
  Map<NodeMetadata,Exception> badNodes=Maps.newLinkedHashMap();
  Multimap<NodeMetadata,CustomizationResponse> customizationResponses=LinkedHashMultimap.create();
  TemplateOptions options=new TemplateOptions();
  final NodeMetadata pendingNode=new NodeMetadataBuilder().ids(nodeId).status(Status.PENDING).build();
  final NodeMetadata runningNode=new NodeMetadataBuilder().ids(nodeId).status(Status.RUNNING).build();
  GetNodeMetadataStrategy nodeClient=createMock(GetNodeMetadataStrategy.class);
  AtomicNodeRunning nodeRunning=new AtomicNodeRunning(nodeClient);
  Predicate<AtomicReference<NodeMetadata>> retryableNodeRunning=new ComputeServiceTimeoutsModule(){
    public Predicate<AtomicReference<NodeMetadata>> nodeRunning(    AtomicNodeRunning statusRunning,    Timeouts timeouts){
      return super.nodeRunning(statusRunning,timeouts);
    }
  }
.nodeRunning(nodeRunning,timeouts);
  AtomicReference<NodeMetadata> atomicNode=new AtomicReference<NodeMetadata>(pendingNode);
  EasyMock.expect(nodeClient.getNode(nodeId)).andAnswer(new IAnswer<NodeMetadata>(){
    private int count=0;
    @Override public NodeMetadata answer() throws Throwable {
      count++;
      if (count <= 1) {
        return null;
      }
 else {
        return runningNode;
      }
    }
  }
).anyTimes();
  replay(initScriptRunnerFactory,openSocketFinder,nodeClient);
  new CustomizeNodeAndAddToGoodMapOrPutExceptionIntoBadMap(retryableNodeRunning,openSocketFinder,timeouts,templateOptionsToStatement,initScriptRunnerFactory,options,atomicNode,goodNodes,badNodes,customizationResponses).apply(atomicNode);
  if (badNodes.size() > 0)   Iterables.get(badNodes.values(),0).printStackTrace();
  assertEquals(badNodes.size(),0);
  assertEquals(goodNodes,ImmutableSet.of(runningNode));
  assertEquals(customizationResponses.size(),0);
  verify(initScriptRunnerFactory,openSocketFinder,nodeClient);
}
