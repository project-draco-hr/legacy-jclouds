{
  Method method=SSHKeyAsyncClient.class.getMethod("getSSHKeys",URI.class);
  HttpRequest request=factory(SSHKeyAsyncClient.class).createRequest(method,new URI("/1"));
  assertResponseParserClassEquals(method,request,ParseXMLWithJAXB.class);
  Function<HttpResponse,SSHKeys> parser=(Function<HttpResponse,SSHKeys>)RestAnnotationProcessor.createResponseParser(parserFactory,injector,method,request);
  InputStream is=getClass().getResourceAsStream("/sshKeys.xml");
  SSHKeys sshKeys=parser.apply(new HttpResponse(200,"ok",newInputStreamPayload(is)));
  assertNotNull(sshKeys);
  Link link=Iterables.getOnlyElement(sshKeys.getLinks());
  assertEquals(link.getName(),"Cloudsoft Corporation [Beta]");
  assertEquals(link.getRelationship(),Link.Relationship.UP);
  Action action=Iterables.getOnlyElement(sshKeys.getActions());
  assertEquals(action.getName(),"createSshKey");
  assertEquals(sshKeys.getSSHKeys().size(),2);
  SSHKey key1=Iterables.get(sshKeys.getSSHKeys(),0);
  assertTrue(key1.isDefaultKey());
  assertEquals(key1.getFingerPrint(),"c8:3f:41:d6:28:e2:86:37:a6:a3:e6:df:62:d9:31:e5");
  SSHKey key2=Iterables.get(sshKeys.getSSHKeys(),1);
  assertFalse(key2.isDefaultKey());
  assertEquals(key2.getFingerPrint(),"a1:3f:41:d6:28:e2:86:37:a6:a3:e6:df:62:d9:31:e5");
}
