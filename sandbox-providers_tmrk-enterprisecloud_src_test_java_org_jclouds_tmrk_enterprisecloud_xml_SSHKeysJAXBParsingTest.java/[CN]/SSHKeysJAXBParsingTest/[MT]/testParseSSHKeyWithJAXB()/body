{
  Method method=SSHKeyAsyncClient.class.getMethod("getSSHKey",URI.class);
  HttpRequest request=factory(SSHKeyAsyncClient.class).createRequest(method,new URI("/1"));
  assertResponseParserClassEquals(method,request,ParseXMLWithJAXB.class);
  Function<HttpResponse,SSHKey> parser=(Function<HttpResponse,SSHKey>)RestAnnotationProcessor.createResponseParser(parserFactory,injector,method,request);
  InputStream is=getClass().getResourceAsStream("/sshKey.xml");
  SSHKey sshKey=parser.apply(new HttpResponse(200,"ok",newInputStreamPayload(is)));
  assertEquals(sshKey.getHref(),URI.create("/cloudapi/ecloud/admin/sshkeys/77"));
  assertEquals(sshKey.getType(),"application/vnd.tmrk.cloud.admin.sshKey");
  assertEquals(sshKey.getName(),"test");
  assertEquals(sshKey.getLinks().size(),1);
  Link link=Iterables.getOnlyElement(sshKey.getLinks());
  assertEquals(link.getHref(),URI.create("/cloudapi/ecloud/admin/organizations/17"));
  assertEquals(link.getType(),"application/vnd.tmrk.cloud.admin.organization");
  assertEquals(link.getName(),"Cloudsoft Corporation [Beta]");
  assertEquals(link.getRelationship(),Link.Relationship.UP);
  assertEquals(sshKey.getActions().size(),2);
  Action action1=Iterables.get(sshKey.getActions(),0);
  assertEquals(action1.getHref(),URI.create("/cloudapi/ecloud/admin/sshkeys/77"));
  assertEquals(action1.getType(),"application/vnd.tmrk.cloud.admin.sshKey");
  assertEquals(action1.getName(),"edit");
  Action action2=Iterables.get(sshKey.getActions(),1);
  assertEquals(action2.getHref(),URI.create("/cloudapi/ecloud/admin/sshkeys/77"));
  assertNull(action2.getType());
  assertEquals(action2.getName(),"remove");
  assertEquals(action2.getActionDisabled(),Action.ActionDisabled.DISABLED);
  assertEquals(sshKey.isDefaultKey(),true);
  assertEquals(sshKey.getFingerPrint(),"c8:3f:41:d6:28:e2:86:37:a6:a3:e6:df:62:d9:31:e5");
}
