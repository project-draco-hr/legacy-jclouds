{
  if (qName.equals("Description")) {
    description=currentOrNull(currentText);
  }
 else   if (qName.equals("Dns")) {
    dnsServers.add(currentOrNull(currentText));
  }
 else   if (qName.equals("Gateway")) {
    gateway=currentOrNull(currentText);
  }
 else   if (qName.equals("Netmask")) {
    netmask=currentOrNull(currentText);
  }
 else   if (qName.equals("FenceMode")) {
    try {
      fenceModes.add(FenceMode.fromValue(currentOrNull(currentText)));
    }
 catch (    IllegalArgumentException e) {
      fenceModes.add(FenceMode.BRIDGED);
    }
  }
 else   if (qName.equals("Dhcp")) {
    dhcp=new Boolean(currentOrNull(currentText));
  }
 else   if (qName.equals("NatRule")) {
    natRules.add(new PortForwardingRule(externalIP,externalPort,internalIP,internalPort,NatProtocol.TCP_UDP));
    externalIP=null;
    externalPort=null;
    internalIP=null;
    internalPort=null;
  }
 else   if (qName.equals("ExternalIP")) {
    externalIP=currentOrNull(currentText);
  }
 else   if (qName.equals("ExternalPort")) {
    externalPort=Integer.parseInt(currentOrNull(currentText));
  }
 else   if (qName.equals("InternalIP")) {
    internalIP=currentOrNull(currentText);
  }
 else   if (qName.equals("InternalPort")) {
    internalPort=Integer.parseInt(currentOrNull(currentText));
  }
 else   if (qName.equals("FirewallRule")) {
    firewallRules.add(new FirewallRule(true,null,policy,null,sourcePort,sourceIP));
    policy=null;
    sourceIP=null;
    sourcePort=-1;
  }
 else   if (qName.equals("Policy")) {
    policy=FirewallPolicy.fromValue(currentOrNull(currentText));
  }
 else   if (qName.equals("SourceIp")) {
    sourceIP=currentOrNull(currentText);
  }
 else   if (qName.equals("SourcePort")) {
    sourcePort=Integer.parseInt(currentOrNull(currentText));
  }
  currentText=new StringBuilder();
}
