{
  Preconditions.checkNotNull(endTime,"endTime cannot be null.");
  Preconditions.checkNotNull(metricName,"metricName cannot be null.");
  Preconditions.checkNotNull(namespace,"namespace cannot be null.");
  Preconditions.checkNotNull(period,"period cannot be null.");
  Preconditions.checkNotNull(startTime,"startTime cannot be null.");
  Preconditions.checkNotNull(statistics,"statistics cannot be null.");
  Preconditions.checkNotNull(unit,"unit cannot be null.");
  Preconditions.checkArgument(statistics.size() >= 1,"statistics must have at least one member");
  GetMetricStatisticsOptionsV2 options=new GetMetricStatisticsOptionsV2(dimensions,endTime,metricName,namespace,period,startTime,statistics,unit);
  int dimensionIndex=1;
  int statisticIndex=1;
  for (  Dimension dimension : dimensions) {
    options.formParameters.put("Dimensions.member." + dimensionIndex + ".Name",dimension.getName());
    options.formParameters.put("Dimensions.member." + dimensionIndex + ".Value",dimension.getValue());
    dimensionIndex++;
  }
  options.formParameters.put("EndTime",dateService.iso8601SecondsDateFormat(endTime));
  options.formParameters.put("MetricName",metricName);
  options.formParameters.put("Namespace",namespace);
  options.formParameters.put("Period",Integer.toString(period));
  options.formParameters.put("StartTime",dateService.iso8601SecondsDateFormat(startTime));
  for (  Statistics statistic : statistics) {
    options.formParameters.put("Statistics.member." + statisticIndex,statistic.toString());
    statisticIndex++;
  }
  options.formParameters.put("Unit",unit.toString());
  return options;
}
